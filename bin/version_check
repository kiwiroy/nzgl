#!/bin/bash

# Compares the currently installed versions of packages with those upstream,
# reporting any that are out of date.
#
# Requires 'uscan' and 'rpm'.
#
# Carl Jones <carl@biomatters.com>

package_dir='/root/nzgl/apps'	# Default package directory
updated_count=0
uscan_args='--timeout 30'	# Default uscan args

function log() {
	[ -z "${verbose}" ] && return
	echo "$@"
}

function usage() {
	cat << EOF
Usage: ${0} [-a -l -v] [-d <directory>] [-p <package>]
	-a Check all packages
	-d Package directory (default=${package_dir})
	-e Print just a list of packages with updates
	-l Download new packages
	-p Single package to check
	-v Be verbose

Each package directory needs to contain a uscan sub-directory containing a 'watch' file (see uscan docs).
By default ${0} exit code will be the number of packages that have been updated; 0 if no updates.

EOF
}

for binary in uscan rpm; do
	if ! which ${binary} &>/dev/null; then
		echo "Error: ${binary} not found."
		exit 1
	fi
done

if [ $# -eq 0 ]; then
	usage
	exit 1
fi

while getopts ad:elp:v flag; do
	case $flag in
		a)
			package_list='all'
			;;
		d)
			package_dir=${OPTARG}
			;;
		e)	
			output_updates='true'
			;;
		l)
			uscan_args="${uscan_args} --download"
			;;
		p)
			package_list=${OPTARG}
			;;
		v)
			verbose='true'
			output_updates='false'
			;;
		?)
			usage
			exit 1
	esac
done

shift $((OPTIND - 1))

if [ ! -d ${package_dir} ]; then
	echo "Error: Package directory ${package_dir} does not exist."
	exit 1
fi
cd ${package_dir}

if [ -z "${package_list}" ] || [ "${package_list}" == "all" ]; then
	package_list=*
fi

for package in ${package_list}; do
	[ ! -d ${package} ] && continue
	[ ! -e ${package}/uscan/watch ] && continue # skip packages we don't check upstream

	current_version=$(rpm -q --queryformat '%{VERSION}\n' ${package})
	if [ -z "${current_version}" ]; then
		echo "Unable to get current version for ${package}. Not installed?"
		exit 1
	fi

	check=$(uscan --package ${package} --watchfile ${package}/uscan/watch --upstream-version ${current_version} ${uscan_args})
	if [ -n "${check}" ]; then
		let updated_count+=1
		[ "${output_updates}" == "true" ] && echo "${package}"
		log ${check}
	else
		log "${package} up to date."
	fi
done 
exit ${updated_count}
