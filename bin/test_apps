#!/bin/bash

app_dir='/root/nzgl/apps'	# Default apps dir
failed_tests=0

# Some tests fail if not run as root e.g. those that install packages.
if [ ${UID} != '0' ]; then
        echo 'Tests must be run as root.'
        exit 1
fi

function usage() {
	cat << EOF
Usage: ${0} [-a] [-d <dir>] [-r] [-t <test/app>] [-v]

	-a Run all tests	
	-d Application directory where tests reside (looks for \$app_dir/\$app/tests/
	-r Report failing tests (for cron job, reporting)
	-t Run selected test
	-v Be verbose
EOF
}

if [ $# -eq 0 ]; then
        usage
        exit 1
fi

while getopts ad:rt:v flag; do
        case $flag in
		a)
			apps='all'
			;;
		-d)
			app_dir="${OPTARG}"
			;;
		-r)
			report='true'
			;;
		-t)
			apps="${OPTARG}"
			;;
		-v)
			verbose='true'
			;;
		?)
			usage
			;;
	esac
done


if [ ! -d ${app_dir} ]; then
	echo "Error: No such directory ${app_dir}"
	exit 1
fi

cd ${app_dir}

if [ -z "${apps}" ] || [ "${apps}" == "all" ]; then
	apps=$(find . -maxdepth 1 -type d -printf '%f\n' | grep -v \\.)
fi

for app in ${apps}; do
	if [ ! -d ${app_dir}/${app}/tests/ ]; then
		continue 	# Not all apps have individual tests
	fi
	cd ${app_dir}/${app}/tests/

	if [ ! -e run_test ] || [ ! -x run_test ]; then
	#	echo "Error: Unable to run test. Check ${app}/tests/run_test exists and is executable."
	#	exit 1
		continue
	fi
	
	[ -n "${verbose}" ] && echo -n "${app}: "

	./run_test &> /dev/null
	if [ $? -ne 0 ]; then
		let failed_tests+=1
		[ -n "${verbose}" ] && echo "Failed"
		[ -n "${report}" ] && echo "${app}"
	else
		[ -n "${verbose}" ] && echo "Passed"
	fi
done

exit ${failed_tests}
