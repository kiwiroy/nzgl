.TH "lsb_hostgrpinfo" 3 "3 Sep 2009" "Version 7.0" "Platform LSF 7.0.6 C API Reference" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lsb_hostgrpinfo \- lsb_hostgrpinfo 
Returns LSF host group membership.
.PP
\fBlsb_hostgrpinfo\fP gets LSF host group membership.
.PP
LSF host group is defined in the configuration file lsb.hosts.
.PP
The storage for the array of \fBgroupInfoEnt\fP structures will be reused by the next call.
.PP
\fB#include <lsf/lsbatch.h>\fP
.PP
\fB struct \fBgroupInfoEnt\fP *lsb_hostgrpinfo (char **groups,int *numGroups, int options)\fP
.PP
.SH "Parameters:"
\fI**groups\fP An array of group names. 
.br
\fI*numGroups\fP The number of group names. *numGroups will be updated to the actual number of groups when this call returns. 
.br
\fIoptions\fP The bitwise inclusive OR of some of the following flags: 
.br
 GRP_RECURSIVE 
.br
 Expand the group membership recursively. That is, if a member of a group is itself a group, give the names of its members recursively, rather than its name, which is the default. 
.br
 GRP_ALL 
.br
 Get membership of all groups.
.PP
.SH "Data Structures:" 
.PP
\fBgroupInfoEnt\fP 
.br
\fBuserShares\fP
.PP
.SH "Define Statements:" 
.PP
\fBgroup_membership_option\fP 
.br
\fBgroup_define\fP
.PP
.SH "Returns:"
struct \fBgroupInfoEnt\fP *: 
.br
 On success, returns an array of \fBgroupInfoEnt\fP structures which hold the group name and the list of names of its members. If a member of a group is itself a group(i.e., a subgroup), then a '/' is appended to the name to indicate this. *numGroups is the number of \fBgroupInfoEnt\fP structures returned. 
.PP
NULL 
.br
 Function failed.
.PP
.SH "Errors:" 
.PP
On failure, returns NULL and sets lsberrno to indicate the error. If there are invalid groups specified, the function returns the groups up to the invalid ones and then sets lsberrno to LSBE_BAD_GROUP, which means that the specified (*groups)[*numGroups] is not a group known to the LSF system. If the first group specified is invalid, the function returns NULL.
.PP
.SH "Equivalent line commands:" 
.PP
none
.PP
.SH "Files:" 
.PP
$LSB_CONFDIR/cluster_name/configdir/lsb.hosts 
.br
$LSB_CONFDIR/cluster_name/configdir/lsb.users
.PP
.SH "See also:"
\fBlsb_usergrpinfo\fP 
.PP

.ad l
.nh
.SH NAME
groupInfoEnt \- group information entry.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char * \fBgroup\fP"
.br
.ti -1c
.RI "char * \fBmemberList\fP"
.br
.ti -1c
.RI "char * \fBadminMemberList\fP"
.br
.ti -1c
.RI "int \fBnumUserShares\fP"
.br
.ti -1c
.RI "struct \fBuserShares\fP * \fBuserShares\fP"
.br
.ti -1c
.RI "int \fBoptions\fP"
.br
.ti -1c
.RI "char * \fBpattern\fP"
.br
.ti -1c
.RI "char * \fBneg_pattern\fP"
.br
.ti -1c
.RI "int \fBcu_type\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
group information entry. 
.SH "Field Documentation"
.PP 
.SS "char* \fBgroupInfoEnt::group\fP"
.PP
Group name. 
.PP
.SS "char* \fBgroupInfoEnt::memberList\fP"
.PP
ASCII list of member names. 
.PP
.SS "char* \fBgroupInfoEnt::adminMemberList\fP"
.PP
ASCII list of admin member names. 
.PP
.SS "int \fBgroupInfoEnt::numUserShares\fP"
.PP
The number of users with shares. 
.PP
.SS "struct \fBuserShares\fP* \fBgroupInfoEnt::userShares\fP"
.PP
The user shares rappresentation. 
.PP
.SS "int \fBgroupInfoEnt::options\fP"
.PP
Options.see \fBgroup_define\fP. 
.PP
.SS "char* \fBgroupInfoEnt::pattern\fP"
.PP
Host membership pattern. 
.PP
.SS "char* \fBgroupInfoEnt::neg_pattern\fP"
.PP
Negation membership pattern. 
.PP
.SS "int \fBgroupInfoEnt::cu_type\fP"
.PP
Compute unit type. 
.PP


.ad l
.nh
.SH NAME
userShares \- Structure for representing the shares assigned to a user group.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char * \fBuser\fP"
.br
.ti -1c
.RI "int \fBshares\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Structure for representing the shares assigned to a user group. 
.SH "Field Documentation"
.PP 
.SS "char* \fBuserShares::user\fP"
.PP
This can be a user or a keyword 'default' or others. 
.PP
.SS "int \fBuserShares::shares\fP"
.PP
The number of shares assigned to the user. 
.PP


.ad l
.nh
.SH NAME
group_membership_option \- group membership options  

.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBGRP_RECURSIVE\fP   0x8"
.br
.ti -1c
.RI "#define \fBGRP_ALL\fP   0x10"
.br
.in -1c
.SH "Detailed Description"
.PP 
group membership options 
.SH "Define Documentation"
.PP 
.SS "#define GRP_RECURSIVE   0x8"
.PP
Expand the group membership recursively. 
.PP
That is, if a member of a group is itself a group, give the names of its members recursively, rather than its name, which is the default. 
.SS "#define GRP_ALL   0x10"
.PP
Get membership of all groups. 
.PP

.ad l
.nh
.SH NAME
group_define \- group define statements  

.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBGRP_NO_CONDENSE_OUTPUT\fP   0x01"
.br
.ti -1c
.RI "#define \fBGRP_CONDENSE_OUTPUT\fP   0x02"
.br
.ti -1c
.RI "#define \fBGRP_HAVE_REG_EXP\fP   0x04"
.br
.ti -1c
.RI "#define \fBGRP_SERVICE_CLASS\fP   0x08"
.br
.ti -1c
.RI "#define \fBGRP_IS_CU\fP   0x10"
.br
.in -1c
.SH "Detailed Description"
.PP 
group define statements 
.SH "Define Documentation"
.PP 
.SS "#define GRP_NO_CONDENSE_OUTPUT   0x01"
.PP
Group output is in regular (uncondensed) format. 
.PP

.SS "#define GRP_CONDENSE_OUTPUT   0x02"
.PP
Group output is in condensed format. 
.PP

.SS "#define GRP_HAVE_REG_EXP   0x04"
.PP
Group have regular expresion. 
.PP
.SS "#define GRP_SERVICE_CLASS   0x08"
.PP
Group is a service class. 
.PP

.SS "#define GRP_IS_CU   0x10"
.PP
Group is a compute unit. 
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Platform LSF 7.0.6 C API Reference from the source code.
