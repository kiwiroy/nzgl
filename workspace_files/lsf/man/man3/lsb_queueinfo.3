.TH "lsb_queueinfo" 3 "3 Sep 2009" "Version 7.0" "Platform LSF 7.0.6 C API Reference" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lsb_queueinfo \- lsb_queueinfo 
Returns information about batch queues.
.PP
\fBlsb_queueinfo\fP gets information about batch queues. See lsb.queues for more information about queue parameters.
.PP
\fB#include <lsf/lsbatch.h>\fP
.PP
\fBstruct \fBqueueInfoEnt\fP *lsb_queueinfo(char **queues, int *numQueues, char *hosts, char *users, int options)\fP
.PP
.SH "Parameters:"
\fI**queues\fP An array of names of queues of interest. 
.br
\fI*numQueues\fP The number of queue names. To get information on all queues, set *numQueues to 0; *numQueues will be updated to the actual number of queues when this call returns.If *numQueues is 1 and queues is NULL, information on the system default queue is returned. 
.br
\fI*hosts\fP The host or cluster names. If hosts is not NULL, then only the queues that are enabled for the hosts are of interest. 
.br
\fI*user\fP The name of user. If user is not NULL, then only the queues that are enabled for the user are of interest. 
.br
\fIoptions\fP Reserved for future use; supply 0.
.PP
.SH "Data Structures:" 
.PP
\fBqueueInfoEnt\fP 
.br
\fBshareAcctInfoEnt\fP 
.br
\fBapsFactorInfo\fP 
.br
\fBapsFactorMap\fP 
.br
\fBapsLongNameMap\fP
.PP
.SH "Define Statements:" 
.PP
\fBqueue_status\fP 
.br
\fBqueue_attribute\fP
.PP
.SH "Returns:"
struct \fBqueueInfoEnt\fP *:
.br
 An array of \fBqueueInfoEnt\fP structures which stores the queue information and sets numQueues to the size of the array. 
.br
 Function was successful. 
.PP
NULL 
.br
 Function Failed.
.PP
.SH "Errors:" 
.PP
If the function fails, lsberrno is set to indicate the error. If lsberrno is LSBE_BAD_QUEUE, (*queues)[*numQueues] is not a queue known to the LSF system. Otherwise, if *numQueues is less than its original value, *numQueues is the actual number of queues found.
.PP
.SH "Equivalent line commands:" 
.PP
bqueues
.PP
.SH "Files:" 
.PP
$LSB_CONFDIR/cluster_name/configdir/lsb.queues
.PP
.SH "See also:"
\fBlsb_hostinfo\fP 
.PP
\fBlsb_userinfo\fP 
.PP
\fBlsb_usergrpinfo\fP 
.PP

.ad l
.nh
.SH NAME
queueInfoEnt \- \fBqueueInfoEnt\fP queue information entry.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char * \fBqueue\fP"
.br
.ti -1c
.RI "char * \fBdescription\fP"
.br
.ti -1c
.RI "int \fBpriority\fP"
.br
.ti -1c
.RI "short \fBnice\fP"
.br
.ti -1c
.RI "char * \fBuserList\fP"
.br
.ti -1c
.RI "char * \fBhostList\fP"
.br
.ti -1c
.RI "char * \fBhostStr\fP"
.br
.ti -1c
.RI "int \fBnIdx\fP"
.br
.ti -1c
.RI "float * \fBloadSched\fP"
.br
.ti -1c
.RI "float * \fBloadStop\fP"
.br
.ti -1c
.RI "int \fBuserJobLimit\fP"
.br
.ti -1c
.RI "float \fBprocJobLimit\fP"
.br
.ti -1c
.RI "char * \fBwindows\fP"
.br
.ti -1c
.RI "int \fBrLimits\fP [LSF_RLIM_NLIMITS]"
.br
.ti -1c
.RI "char * \fBhostSpec\fP"
.br
.ti -1c
.RI "int \fBqAttrib\fP"
.br
.ti -1c
.RI "int \fBqStatus\fP"
.br
.ti -1c
.RI "int \fBmaxJobs\fP"
.br
.ti -1c
.RI "int \fBnumJobs\fP"
.br
.ti -1c
.RI "int \fBnumPEND\fP"
.br
.ti -1c
.RI "int \fBnumRUN\fP"
.br
.ti -1c
.RI "int \fBnumSSUSP\fP"
.br
.ti -1c
.RI "int \fBnumUSUSP\fP"
.br
.ti -1c
.RI "int \fBmig\fP"
.br
.ti -1c
.RI "int \fBschedDelay\fP"
.br
.ti -1c
.RI "int \fBacceptIntvl\fP"
.br
.ti -1c
.RI "char * \fBwindowsD\fP"
.br
.ti -1c
.RI "char * \fBnqsQueues\fP"
.br
.ti -1c
.RI "char * \fBuserShares\fP"
.br
.ti -1c
.RI "char * \fBdefaultHostSpec\fP"
.br
.ti -1c
.RI "int \fBprocLimit\fP"
.br
.ti -1c
.RI "char * \fBadmins\fP"
.br
.ti -1c
.RI "char * \fBpreCmd\fP"
.br
.ti -1c
.RI "char * \fBpostCmd\fP"
.br
.ti -1c
.RI "char * \fBrequeueEValues\fP"
.br
.ti -1c
.RI "int \fBhostJobLimit\fP"
.br
.ti -1c
.RI "char * \fBresReq\fP"
.br
.ti -1c
.RI "int \fBnumRESERVE\fP"
.br
.ti -1c
.RI "int \fBslotHoldTime\fP"
.br
.ti -1c
.RI "char * \fBsndJobsTo\fP"
.br
.ti -1c
.RI "char * \fBrcvJobsFrom\fP"
.br
.ti -1c
.RI "char * \fBresumeCond\fP"
.br
.ti -1c
.RI "char * \fBstopCond\fP"
.br
.ti -1c
.RI "char * \fBjobStarter\fP"
.br
.ti -1c
.RI "char * \fBsuspendActCmd\fP"
.br
.ti -1c
.RI "char * \fBresumeActCmd\fP"
.br
.ti -1c
.RI "char * \fBterminateActCmd\fP"
.br
.ti -1c
.RI "int \fBsigMap\fP [LSB_SIG_NUM]"
.br
.ti -1c
.RI "char * \fBpreemption\fP"
.br
.ti -1c
.RI "int \fBmaxRschedTime\fP"
.br
.ti -1c
.RI "int \fBnumOfSAccts\fP"
.br
.ti -1c
.RI "struct \fBshareAcctInfoEnt\fP * \fBshareAccts\fP"
.br
.ti -1c
.RI "char * \fBchkpntDir\fP"
.br
.ti -1c
.RI "int \fBchkpntPeriod\fP"
.br
.ti -1c
.RI "int \fBimptJobBklg\fP"
.br
.ti -1c
.RI "int \fBdefLimits\fP [LSF_RLIM_NLIMITS]"
.br
.ti -1c
.RI "int \fBchunkJobSize\fP"
.br
.ti -1c
.RI "int \fBminProcLimit\fP"
.br
.ti -1c
.RI "int \fBdefProcLimit\fP"
.br
.ti -1c
.RI "char * \fBfairshareQueues\fP"
.br
.ti -1c
.RI "char * \fBdefExtSched\fP"
.br
.ti -1c
.RI "char * \fBmandExtSched\fP"
.br
.ti -1c
.RI "int \fBslotShare\fP"
.br
.ti -1c
.RI "char * \fBslotPool\fP"
.br
.ti -1c
.RI "int \fBunderRCond\fP"
.br
.ti -1c
.RI "int \fBoverRCond\fP"
.br
.ti -1c
.RI "float \fBidleCond\fP"
.br
.ti -1c
.RI "int \fBunderRJobs\fP"
.br
.ti -1c
.RI "int \fBoverRJobs\fP"
.br
.ti -1c
.RI "int \fBidleJobs\fP"
.br
.ti -1c
.RI "int \fBwarningTimePeriod\fP"
.br
.ti -1c
.RI "char * \fBwarningAction\fP"
.br
.ti -1c
.RI "char * \fBqCtrlMsg\fP"
.br
.ti -1c
.RI "char * \fBacResReq\fP"
.br
.ti -1c
.RI "int \fBsymJobLimit\fP"
.br
.ti -1c
.RI "char * \fBcpuReq\fP"
.br
.ti -1c
.RI "int \fBproAttr\fP"
.br
.ti -1c
.RI "int \fBlendLimit\fP"
.br
.ti -1c
.RI "int \fBhostReallocInterval\fP"
.br
.ti -1c
.RI "int \fBnumCPURequired\fP"
.br
.ti -1c
.RI "int \fBnumCPUAllocated\fP"
.br
.ti -1c
.RI "int \fBnumCPUBorrowed\fP"
.br
.ti -1c
.RI "int \fBnumCPULent\fP"
.br
.ti -1c
.RI "int \fBschGranularity\fP"
.br
.ti -1c
.RI "int \fBsymTaskGracePeriod\fP"
.br
.ti -1c
.RI "int \fBminOfSsm\fP"
.br
.ti -1c
.RI "int \fBmaxOfSsm\fP"
.br
.ti -1c
.RI "int \fBnumOfAllocSlots\fP"
.br
.ti -1c
.RI "char * \fBservicePreemption\fP"
.br
.ti -1c
.RI "int \fBprovisionStatus\fP"
.br
.ti -1c
.RI "int \fBminTimeSlice\fP"
.br
.ti -1c
.RI "char * \fBqueueGroup\fP"
.br
.ti -1c
.RI "int \fBnumApsFactors\fP"
.br
.ti -1c
.RI "struct \fBapsFactorInfo\fP * \fBapsFactorInfoList\fP"
.br
.ti -1c
.RI "struct \fBapsFactorMap\fP * \fBapsFactorMaps\fP"
.br
.ti -1c
.RI "struct \fBapsLongNameMap\fP * \fBapsLongNames\fP"
.br
.ti -1c
.RI "int \fBmaxJobPreempt\fP"
.br
.ti -1c
.RI "int \fBmaxPreExecRetry\fP"
.br
.ti -1c
.RI "int \fBlocalMaxPreExecRetry\fP"
.br
.ti -1c
.RI "int \fBmaxJobRequeue\fP"
.br
.ti -1c
.RI "int \fBusePam\fP"
.br
.ti -1c
.RI "int \fBcu_type_exclusive\fP"
.br
.ti -1c
.RI "char * \fBcu_str_exclusive\fP"
.br
.ti -1c
.RI "char * \fBresRsvLimit\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBqueueInfoEnt\fP queue information entry. 
.SH "Field Documentation"
.PP 
.SS "char* \fBqueueInfoEnt::queue\fP"
.PP
The name of the queue. 
.PP

.SS "char* \fBqueueInfoEnt::description\fP"
.PP
Describes the typical use of the queue. 
.PP

.SS "int \fBqueueInfoEnt::priority\fP"
.PP
Defines the priority of the queue. 
.PP
This determines the order in which the job queues are searched at job dispatch time: queues with higher priority values are searched first. (This is contrary to UNIX process priority ordering.) 
.SS "short \fBqueueInfoEnt::nice\fP"
.PP
Defines the nice value at which jobs in this queue will be run. 
.PP

.SS "char* \fBqueueInfoEnt::userList\fP"
.PP
A blank-separated list of names of users allowed to \fBsubmit\fP jobs to this queue. 
.PP

.SS "char* \fBqueueInfoEnt::hostList\fP"
.PP
A blank-separated list of names of hosts to which jobs in this queue may be dispatched. 
.PP

.SS "char* \fBqueueInfoEnt::hostStr\fP"
.PP
Original HOSTS string in case '-' is used. 
.PP

.SS "int \fBqueueInfoEnt::nIdx\fP"
.PP
The number of load indices in the loadSched and loadStop arrays. 
.PP

.SS "float* \fBqueueInfoEnt::loadSched\fP"
.PP
The queue and host loadSched and loadStop arrays control batch job dispatch, suspension, and resumption. 
.PP
The values in the loadSched array specify thresholds for the corresponding load indices. Only if the current values of all specified load indices of a host are within (below or above, depending on the meaning of the load index) the corresponding thresholds of this queue, will jobs in this queue be dispatched to the host. The same conditions are used to resume jobs dispatched from this queue that have been suspended on the host. 
.SS "float* \fBqueueInfoEnt::loadStop\fP"
.PP
The values in the loadStop array specify the thresholds for job suspension. 
.PP
If any of the current load index values of a host goes beyond a queue's threshold, jobs from the queue will be suspended.
.PP
For an explanation of the fields in the loadSched and loadStop arrays, see \fBlsb_hostinfo\fP. 
.SS "int \fBqueueInfoEnt::userJobLimit\fP"
.PP
Per-user limit on the number of jobs that can be dispatched from this queue and executed concurrently. 
.PP

.SS "float \fBqueueInfoEnt::procJobLimit\fP"
.PP
Per-processor limit on the number of jobs that can be dispatched from this queue and executed concurrently. 
.PP

.SS "char* \fBqueueInfoEnt::windows\fP"
.PP
A blank-separated list of time windows describing the run window of the queue. 
.PP
When a queue's run window is closed, no job from this queue will be dispatched. When the run window closes, any running jobs from this queue will be suspended until the run window reopens, when they will be resumed. The default is no restriction, or always open (i.e., 24 hours a day, seven days a week).
.PP
A time window has the format begin_time-end_time. Time is specified in the format [day:]hour[:minute], where all fields are numbers in their respective legal ranges: 0(Sunday)-6 for day, 0-23 for hour, and 0-59 for minute. The default value for minute is 0 (on the hour); the default value for day is every day of the week. The begin_time and end_time of a window are separated by `-', with no white space (i.e., blank or TAB) in between. Both begin_time and end_time must be present for a time window.
.PP
Note that this run window only applies to batch jobs;interactive jobs scheduled by the LSF Load Information Manager (LIM) are controlled by another set of run windows. 
.SS "int \fBqueueInfoEnt::rLimits\fP[LSF_RLIM_NLIMITS]"
.PP
The per-process UNIX hard resource limits for all jobs submitted to this queue (see getrlimit() and lsb.queues). 
.PP
The default values for the resource limits are unlimited, indicated by -1. The constants used to index the rLimits array and the corresponding resource limits are listed below. 
.br
 LSF_RLIMIT_CPU (CPULIMIT) 
.br
 LSF_RLIMIT_FSIZE (FILELIMIT) 
.br
 LSF_RLIMIT_DATA (DATALIMIT) 
.br
 LSF_RLIMIT_STACK (STACKLIMIT) 
.br
 LSF_RLIMIT_CORE (CORELIMIT) 
.br
 LSF_RLIMIT_RSS (MEMLIMIT) 
.br
 LSF_RLIMIT_RUN (RUNLIMIT) 
.br
 LSF_RLIMIT_PROCESS (PROCESSLIMIT) 
.br
 LSF_RLIMIT_SWAP (SWAPLIMIT) 
.br
 LSF_RLIMIT_THREAD 
.br
 LSF_RLIMIT_NOFILE 
.br
 LSF_RLIMIT_OPENMAX 
.br
 LSF_RLIMIT_VMEM 
.SS "char* \fBqueueInfoEnt::hostSpec\fP"
.PP
A host name or host model name. 
.PP
If the queue CPULIMIT or RUNLIMIT gives a host specification, hostSpec will be that specification. Otherwise, if defaultHostSpec (see below) is not NULL, hostSpec will be defaultHostSpec. Otherwise, if DEFAULT_HOST_SPEC is defined in the lsb.params file, (see lsb.params), hostSpec will be this value. Otherwise, hostSpec will be the name of the host with the largest CPU factor in the cluster. 
.SS "int \fBqueueInfoEnt::qAttrib\fP"
.PP
The attributes of the queue. 
.PP

.SS "int \fBqueueInfoEnt::qStatus\fP"
.PP
The status of the queue. 
.PP

.SS "int \fBqueueInfoEnt::maxJobs\fP"
.PP
The maximum number of jobs dispatched by the queue and not yet finished. 
.PP

.SS "int \fBqueueInfoEnt::numJobs\fP"
.PP
Number of jobs in the queue, including pending, running, and suspended jobs. 
.PP

.SS "int \fBqueueInfoEnt::numPEND\fP"
.PP
Number of pending jobs in the queue. 
.PP

.SS "int \fBqueueInfoEnt::numRUN\fP"
.PP
Number of running jobs in the queue. 
.PP

.SS "int \fBqueueInfoEnt::numSSUSP\fP"
.PP
Number of system suspended jobs in the queue. 
.PP

.SS "int \fBqueueInfoEnt::numUSUSP\fP"
.PP
Number of user suspended jobs in the queue. 
.PP

.SS "int \fBqueueInfoEnt::mig\fP"
.PP
The queue migration threshold in minutes. 
.PP

.SS "int \fBqueueInfoEnt::schedDelay\fP"
.PP
The number of seconds that a new job waits, before being scheduled. 
.PP
A value of zero (0) means the job is scheduled without any delay. 
.SS "int \fBqueueInfoEnt::acceptIntvl\fP"
.PP
The number of seconds for a host to wait after dispatching a job to a host, before accepting a second job to dispatch to the same host. 
.PP

.SS "char* \fBqueueInfoEnt::windowsD\fP"
.PP
A blank-separated list of time windows describing the dispatch window of the queue. 
.PP
When a queue's dispatch window is closed, no job from this queue will be dispatched.The default is no restriction, or always open (i.e., 24 hours a day, seven days a week).
.PP
For the time window format, see windows (above). 
.SS "char* \fBqueueInfoEnt::nqsQueues\fP"
.PP
A blank-separated list of queue specifiers. 
.PP
Each queue specifier is of the form queue@host where host is an NQS host name and queue is the name of a queue on that host. 
.SS "char* \fBqueueInfoEnt::userShares\fP"
.PP
A blank-separated list of user shares. 
.PP
Each share is of the form [user, share] where user is a user name, a user group name, the reserved word default or the reserved word others, and share is the number of shares the user gets. 
.SS "char* \fBqueueInfoEnt::defaultHostSpec\fP"
.PP
The value of DEFAULT_HOST_SPEC in the Queue section for this queue in the lsb.queues file. 
.PP

.SS "int \fBqueueInfoEnt::procLimit\fP"
.PP
An LSF resource limit used to limit the number of job slots (processors) a (parallel) job in the queue will use. 
.PP
A job submitted to this queue must specify a number of processors not greater than this limit. 
.SS "char* \fBqueueInfoEnt::admins\fP"
.PP
A list of administrators of the queue. 
.PP
The users whose names are here are allowed to operate on the jobs in the queue and on the queue itself. 
.SS "char* \fBqueueInfoEnt::preCmd\fP"
.PP
Queue's pre-exec command. 
.PP
The command is executed before the real batch job is run on the execution host (or on the first host selected for a parallel batch job). 
.SS "char* \fBqueueInfoEnt::postCmd\fP"
.PP
Queue's post-exec command. 
.PP
The command is run when a job terminates. 
.SS "char* \fBqueueInfoEnt::requeueEValues\fP"
.PP
Jobs that exit with these values are automatically requeued. 
.PP

.SS "int \fBqueueInfoEnt::hostJobLimit\fP"
.PP
The maximum number of job slots a host can process from this queue, including job slots of dispatched jobs which have not finished yet and reserved slots for some PEND jobs. 
.PP
This limit controls the number of jobs sent to each host, regardless of a uniprocessor host or multiprocessor host. Default value for this limit is infinity. 
.SS "char* \fBqueueInfoEnt::resReq\fP"
.PP
Resource requirement string used to determine eligible hosts for a job. 
.PP

.SS "int \fBqueueInfoEnt::numRESERVE\fP"
.PP
Number of reserved job slots for pending jobs. 
.PP

.SS "int \fBqueueInfoEnt::slotHoldTime\fP"
.PP
The time used to hold the reserved job slots for a PEND job in this queue. 
.PP

.SS "char* \fBqueueInfoEnt::sndJobsTo\fP"
.PP
Remote MultiCluster send-jobs queues to forward jobs to. 
.PP

.SS "char* \fBqueueInfoEnt::rcvJobsFrom\fP"
.PP
Remote MultiCluster receive-jobs queues that can forward to this queue. 
.PP

.SS "char* \fBqueueInfoEnt::resumeCond\fP"
.PP
Resume threshold conditions for a suspended job in this queue. 
.PP

.SS "char* \fBqueueInfoEnt::stopCond\fP"
.PP
Stop threshold conditions for a running job in this queue. 
.PP

.SS "char* \fBqueueInfoEnt::jobStarter\fP"
.PP
Job starter command for a running job in this queue. 
.PP
.SS "char* \fBqueueInfoEnt::suspendActCmd\fP"
.PP
Command configured for the SUSPEND action. 
.PP

.SS "char* \fBqueueInfoEnt::resumeActCmd\fP"
.PP
Command configured for the RESUME action. 
.PP

.SS "char* \fBqueueInfoEnt::terminateActCmd\fP"
.PP
Command configured for the TERMINATE action. 
.PP

.SS "int \fBqueueInfoEnt::sigMap\fP[LSB_SIG_NUM]"
.PP
Configurable signal mapping. 
.PP
.SS "char* \fBqueueInfoEnt::preemption\fP"
.PP
Preemptive scheduling and preemption policy specified for the queue. 
.PP

.SS "int \fBqueueInfoEnt::maxRschedTime\fP"
.PP
Time period for a remote cluster to schedule a job. 
.PP
MultiCluster job forwarding model only. Determines how long a MultiCluster job stays pending in the execution cluster before returning to the submission cluster. The remote timeout limit in seconds is: 
.PD 0

.IP "\(bu" 2
MAX_RSCHED_TIME * MBD_SLEEP_TIME=timeout 
.PP

.SS "int \fBqueueInfoEnt::numOfSAccts\fP"
.PP
Number of share accounts in the queue. 
.PP

.SS "struct \fBshareAcctInfoEnt\fP* \fBqueueInfoEnt::shareAccts\fP"
.PP
(Only used for queues with fairshare policy) a share account vector capturing the fairshare information of the users using the queue. 
.PP
The storage for the array of \fBqueueInfoEnt\fP structures will be reused by the next call. 
.SS "char* \fBqueueInfoEnt::chkpntDir\fP"
.PP
The directory where the checkpoint files are created. 
.PP

.SS "int \fBqueueInfoEnt::chkpntPeriod\fP"
.PP
The checkpoint period in minutes. 
.PP

.SS "int \fBqueueInfoEnt::imptJobBklg\fP"
.PP
MultiCluster job forwarding model only. 
.PP
Specifies the MultiCluster pending job limit for a receive-jobs queue. This represents the maximum number of MultiCluster import jobs that can be pending in the queue; once the limit has been reached, the queue stops accepting jobs from remote clusters. 
.SS "int \fBqueueInfoEnt::defLimits\fP[LSF_RLIM_NLIMITS]"
.PP
The default (soft) resource limits for all jobs submitted to this queue (see getrlimit() and lsb.queues). 
.PP

.SS "int \fBqueueInfoEnt::chunkJobSize\fP"
.PP
The maximum number of jobs allowed to be dispatched together in one job chunk. 
.PP
Must be a positive integer greater than 1. 
.SS "int \fBqueueInfoEnt::minProcLimit\fP"
.PP
The minimum number of job slots (processors) that a job in the queue will use. 
.PP

.SS "int \fBqueueInfoEnt::defProcLimit\fP"
.PP
The default (soft) limit on the number of job slots (processors) that a job in the queue will use. 
.PP

.SS "char* \fBqueueInfoEnt::fairshareQueues\fP"
.PP
The list of queues for cross-queue fairshare. 
.PP

.SS "char* \fBqueueInfoEnt::defExtSched\fP"
.PP
Default external scheduling for the queue. 
.PP

.SS "char* \fBqueueInfoEnt::mandExtSched\fP"
.PP
Mandatory external scheduling options for the queue. 
.PP

.SS "int \fBqueueInfoEnt::slotShare\fP"
.PP
Share of job slots for queue-based fairshare. 
.PP
Represents the percentage of running jobs (job slots) in use from the queue. SLOT_SHARE must be greater than zero (0) and less than or equal to 100.
.PP
The sum of SLOT_SHARE for all queues in the pool does not need to be 100%. It can be more or less, depending on your needs. 
.SS "char* \fBqueueInfoEnt::slotPool\fP"
.PP
Name of the pool of job slots the queue belongs to for queue-based fairshare. 
.PP
A queue can only belong to one pool. All queues in the pool must share the same set of hosts.
.PP
Specify any ASCII string up to 60 chars long. You can use letters, digits, underscores (_) or dashes (-). You cannot use blank spaces. 
.SS "int \fBqueueInfoEnt::underRCond\fP"
.PP
Specifies a threshold for job underrun exception handling. 
.PP
If a job exits before the specified number of minutes, LSF invokes LSF_SERVERDIR/eadmin to trigger the action for a job underrun exception. 
.SS "int \fBqueueInfoEnt::overRCond\fP"
.PP
Specifies a threshold for job overrun exception handling. 
.PP
If a job runs longer than the specified run time, LSF invokes LSF_SERVERDIR/eadmin to trigger the action for a job overrun exception. 
.SS "float \fBqueueInfoEnt::idleCond\fP"
.PP
Specifies a threshold for idle job exception handling. 
.PP
The value should be a number between 0.0 and 1.0 representing CPU time/runtime. If the job idle factor is less than the specified threshold, LSF invokes LSF_SERVERDIR/eadmin to trigger the action for a job idle exception. 
.SS "int \fBqueueInfoEnt::underRJobs\fP"
.PP
The number of underrun jobs in the queue. 
.PP

.SS "int \fBqueueInfoEnt::overRJobs\fP"
.PP
The number of overrun jobs in the queue. 
.PP

.SS "int \fBqueueInfoEnt::idleJobs\fP"
.PP
The number of idle jobs in the queue. 
.PP

.SS "int \fBqueueInfoEnt::warningTimePeriod\fP"
.PP
Specifies the amount of time before a job control action occurs that a job warning action is to be taken. 
.PP
For example, 2 minutes before the job reaches run time limit or termination deadline, or the queue's run window is closed, an URG signal is sent to the job.
.PP
Job action warning time is not normalized.
.PP
A job action warning time must be specified with a job warning action in order for job warning to take effect. 
.SS "char* \fBqueueInfoEnt::warningAction\fP"
.PP
Specifies the job action to be taken before a job control action occurs. 
.PP
For example, 2 minutes before the job reaches run time limit or termination deadline, or the queue's run window is closed, an URG signal is sent to the job.
.PP
A job warning action must be specified with a job action warning time in order for job warning to take effect.
.PP
If specified, LSF sends the warning action to the job before the actual control action is taken. This allows the job time to save its result before being terminated by the job control action.
.PP
You can specify actions similar to the JOB_CONTROLS queue level parameter: send a signal, invoke a command, or checkpoint the job. 
.SS "char* \fBqueueInfoEnt::qCtrlMsg\fP"
.PP
AdminAction - queue control message. 
.PP
.SS "char* \fBqueueInfoEnt::acResReq\fP"
.PP
Acept resource request. 
.PP

.SS "int \fBqueueInfoEnt::symJobLimit\fP"
.PP
Limit of running session scheduler jobs. 
.PP

.SS "char* \fBqueueInfoEnt::cpuReq\fP"
.PP
cpu_req for service partition of session scheduler 
.PP
.SS "int \fBqueueInfoEnt::proAttr\fP"
.PP
Indicate whether it would be willing to donate/borrow. 
.PP

.SS "int \fBqueueInfoEnt::lendLimit\fP"
.PP
The maximum number of hosts to lend. 
.PP

.SS "int \fBqueueInfoEnt::hostReallocInterval\fP"
.PP
The grace period to lend/return idle hosts. 
.PP

.SS "int \fBqueueInfoEnt::numCPURequired\fP"
.PP
Number of CPUs required by CPU provision. 
.PP

.SS "int \fBqueueInfoEnt::numCPUAllocated\fP"
.PP
Number of CPUs actually allocated. 
.PP

.SS "int \fBqueueInfoEnt::numCPUBorrowed\fP"
.PP
Number of CPUs borrowed. 
.PP

.SS "int \fBqueueInfoEnt::numCPULent\fP"
.PP
Number of CPUs lent. 
.PP

.SS "int \fBqueueInfoEnt::schGranularity\fP"
.PP
Scheduling granularity. 
.PP
in milliseconds. 
.SS "int \fBqueueInfoEnt::symTaskGracePeriod\fP"
.PP
The grace period for stopping session scheduler tasks. 
.PP

.SS "int \fBqueueInfoEnt::minOfSsm\fP"
.PP
Minimum number of SSMs. 
.PP

.SS "int \fBqueueInfoEnt::maxOfSsm\fP"
.PP
Maximum number of SSMs. 
.PP

.SS "int \fBqueueInfoEnt::numOfAllocSlots\fP"
.PP
Number of allocated slots. 
.PP

.SS "char* \fBqueueInfoEnt::servicePreemption\fP"
.PP
Service preemptin policy. 
.PP

.SS "int \fBqueueInfoEnt::provisionStatus\fP"
.PP
Dynamic cpu provision status. 
.PP

.SS "int \fBqueueInfoEnt::minTimeSlice\fP"
.PP
The minimum time for preemption and backfill, in seconds. 
.PP

.SS "char* \fBqueueInfoEnt::queueGroup\fP"
.PP
List of queues defined in a queue group for absolute priority scheduling (APS) across multiple queues. 
.PP

.SS "int \fBqueueInfoEnt::numApsFactors\fP"
.PP
The number of calculation factors for absolute priority scheduling (APS). 
.PP

.SS "struct \fBapsFactorInfo\fP* \fBqueueInfoEnt::apsFactorInfoList\fP"
.PP
List of calculation factors for absolute priority scheduling (APS). 
.PP
.SS "struct \fBapsFactorMap\fP* \fBqueueInfoEnt::apsFactorMaps\fP"
.PP
The mapping of factors to subfactors for absolute priority scheduling (APS). 
.PP

.SS "struct \fBapsLongNameMap\fP* \fBqueueInfoEnt::apsLongNames\fP"
.PP
The mapping of factors to their long names for absolute priority scheduling (APS). 
.PP

.SS "int \fBqueueInfoEnt::maxJobPreempt\fP"
.PP
Maximum number of job preempted times. 
.PP

.SS "int \fBqueueInfoEnt::maxPreExecRetry\fP"
.PP
Maximum number of pre-exec retry times. 
.PP

.SS "int \fBqueueInfoEnt::localMaxPreExecRetry\fP"
.PP
Maximum number of pre-exec retry times for local cluster. 
.PP
.SS "int \fBqueueInfoEnt::maxJobRequeue\fP"
.PP
Maximum number of job re-queue times. 
.PP

.SS "int \fBqueueInfoEnt::usePam\fP"
.PP
Use Linux-PAM. 
.PP
.SS "int \fBqueueInfoEnt::cu_type_exclusive\fP"
.PP
Compute unit type. 
.PP
.SS "char* \fBqueueInfoEnt::cu_str_exclusive\fP"
.PP
A string specified in EXCLUSIVE=CU[<string>]. 
.PP
.SS "char* \fBqueueInfoEnt::resRsvLimit\fP"
.PP
Resource reservation limit. 
.PP


.ad l
.nh
.SH NAME
shareAcctInfoEnt \- Library rappresentation of the share account.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char * \fBshareAcctPath\fP"
.br
.ti -1c
.RI "int \fBshares\fP"
.br
.ti -1c
.RI "float \fBpriority\fP"
.br
.ti -1c
.RI "int \fBnumStartJobs\fP"
.br
.ti -1c
.RI "float \fBhistCpuTime\fP"
.br
.ti -1c
.RI "int \fBnumReserveJobs\fP"
.br
.ti -1c
.RI "int \fBrunTime\fP"
.br
.ti -1c
.RI "float \fBshareAdjustment\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Library rappresentation of the share account. 
.SH "Field Documentation"
.PP 
.SS "char* \fBshareAcctInfoEnt::shareAcctPath\fP"
.PP
The user name or user group name. 
.PP
(See \fBlsb_userinfo\fP and \fBlsb_usergrpinfo\fP.) 
.SS "int \fBshareAcctInfoEnt::shares\fP"
.PP
The number of shares assigned to the user or user group, as configured in the file lsb.queues. 
.PP
.SS "float \fBshareAcctInfoEnt::priority\fP"
.PP
The priority of the user or user group in the fairshare queue. 
.PP
Larger values represent higher priorities. Job belonging to the user or user group with the highest priority are considered first for dispatch in the fairshare queue. In general, a user or user group with more shares, fewer numStartJobs and less histCpuTime has higher priority. 
.SS "int \fBshareAcctInfoEnt::numStartJobs\fP"
.PP
The number of job slots (belonging to the user or user group) that are running or suspended in the fairshare queue. 
.PP

.SS "float \fBshareAcctInfoEnt::histCpuTime\fP"
.PP
The normalized CPU time accumulated in the fairshare queue by jobs belonging to the user or user group, over the time period configured in the file lsb.params. 
.PP
The default time period is 5 hours. 
.SS "int \fBshareAcctInfoEnt::numReserveJobs\fP"
.PP
The number of job slots that are reserved for the PEND jobs belonging to the user or user group in the host partition. 
.PP

.SS "int \fBshareAcctInfoEnt::runTime\fP"
.PP
The time unfinished jobs spend in the RUN state. 
.PP

.SS "float \fBshareAcctInfoEnt::shareAdjustment\fP"
.PP
The fairshare adjustment value from the fairshare plugin (libfairshareadjust.SOEXT). 
.PP
The adjustment is enabled and weighted by setting the value of FAIRSHARE_ADJUSTMENT_FACTOR in lsb.params. 

.ad l
.nh
.SH NAME
apsFactorInfo \- APS factor information.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char * \fBname\fP"
.br
.ti -1c
.RI "float \fBweight\fP"
.br
.ti -1c
.RI "float \fBlimit\fP"
.br
.ti -1c
.RI "int \fBgracePeriod\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
APS factor information. 
.SH "Field Documentation"
.PP 
.SS "char* \fBapsFactorInfo::name\fP"
.PP
Name. 
.PP
.SS "float \fBapsFactorInfo::weight\fP"
.PP
Weight. 
.PP
.SS "float \fBapsFactorInfo::limit\fP"
.PP
Limit. 
.PP
.SS "int \fBapsFactorInfo::gracePeriod\fP"
.PP
Grace period. 
.PP


.ad l
.nh
.SH NAME
apsFactorMap \- APS structures used for mapping between factors.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char * \fBfactorName\fP"
.br
.ti -1c
.RI "char * \fBsubFactorNames\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
APS structures used for mapping between factors. 
.SH "Field Documentation"
.PP 
.SS "char* \fBapsFactorMap::factorName\fP"
.PP
Name of factor. 
.PP

.SS "char* \fBapsFactorMap::subFactorNames\fP"
.PP
SubFactor names. 
.PP


.ad l
.nh
.SH NAME
apsLongNameMap \- APS structures used for mapping between factors.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char * \fBshortName\fP"
.br
.ti -1c
.RI "char * \fBlongName\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
APS structures used for mapping between factors. 
.SH "Field Documentation"
.PP 
.SS "char* \fBapsLongNameMap::shortName\fP"
.PP
Short name. 
.PP
.SS "char* \fBapsLongNameMap::longName\fP"
.PP
Long name. 
.PP


.ad l
.nh
.SH NAME
queue_status \- queue status (qStatus) bits  

.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBQUEUE_STAT_OPEN\fP   0x01"
.br
.ti -1c
.RI "#define \fBQUEUE_STAT_ACTIVE\fP   0x02"
.br
.ti -1c
.RI "#define \fBQUEUE_STAT_RUN\fP   0x04"
.br
.ti -1c
.RI "#define \fBQUEUE_STAT_NOPERM\fP   0x08"
.br
.ti -1c
.RI "#define \fBQUEUE_STAT_DISC\fP   0x10"
.br
.ti -1c
.RI "#define \fBQUEUE_STAT_RUNWIN_CLOSE\fP   0x20"
.br
.in -1c
.SH "Detailed Description"
.PP 
queue status (qStatus) bits 
.SH "Define Documentation"
.PP 
.SS "#define QUEUE_STAT_OPEN   0x01"
.PP
The queue is open to accept newly submitted jobs. 
.PP

.SS "#define QUEUE_STAT_ACTIVE   0x02"
.PP
The queue is actively dispatching jobs. 
.PP
The queue can be inactivated and reactivated by the LSF administrator using \fBlsb_queuecontrol\fP. The queue will also be inactivated when its run or dispatch window is closed. In this case it cannot be reactivated manually; it will be reactivated by the LSF system when its run and dispatch windows reopen. 
.SS "#define QUEUE_STAT_RUN   0x04"
.PP
The queue run and dispatch windows are open. 
.PP
The initial state of a queue at LSF boot time is open and either active or inactive, depending on its run and dispatch windows. 
.SS "#define QUEUE_STAT_NOPERM   0x08"
.PP
Remote queue rejecting jobs. 
.PP

.SS "#define QUEUE_STAT_DISC   0x10"
.PP
Remote queue status is disconnected. 
.PP

.SS "#define QUEUE_STAT_RUNWIN_CLOSE   0x20"
.PP
Queue run windows are closed. 
.PP

.ad l
.nh
.SH NAME
queue_attribute \- queue attribute (QAttrib) bits.  

.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBQ_ATTRIB_EXCLUSIVE\fP   0x01"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_DEFAULT\fP   0x02"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_FAIRSHARE\fP   0x04"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_PREEMPTIVE\fP   0x08"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_NQS\fP   0x10"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_RECEIVE\fP   0x20"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_PREEMPTABLE\fP   0x40"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_BACKFILL\fP   0x80"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_HOST_PREFER\fP   0x100"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_NONPREEMPTIVE\fP   0x200"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_NONPREEMPTABLE\fP   0x400"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_NO_INTERACTIVE\fP   0x800"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_ONLY_INTERACTIVE\fP   0x1000"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_NO_HOST_TYPE\fP   0x2000"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_IGNORE_DEADLINE\fP   0x4000"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_CHKPNT\fP   0x8000"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_RERUNNABLE\fP   0x10000"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_EXCL_RMTJOB\fP   0x20000"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_MC_FAST_SCHEDULE\fP   0x40000"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_ENQUE_INTERACTIVE_AHEAD\fP   0x80000"
.br
.ti -1c
.RI "#define \fBQ_MC_FLAG\fP   0xf00000"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_LEASE_LOCAL\fP   0x100000"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_LEASE_ONLY\fP   0x200000"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_RMT_BATCH_LOCAL\fP   0x300000"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_RMT_BATCH_ONLY\fP   0x400000"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_RESOURCE_RESERVE\fP   0x1000000"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_FS_DISPATCH_ORDER_QUEUE\fP   0x2000000"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_BATCH\fP   0x4000000"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_ONLINE\fP   0x8000000"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_INTERRUPTIBLE_BACKFILL\fP   0x10000000"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_APS\fP   0x20000000"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_NO_HIGHER_RESERVE\fP   0x40000000"
.br
.ti -1c
.RI "#define \fBQ_ATTRIB_NO_HOST_VALID\fP   0x80000000"
.br
.in -1c
.SH "Detailed Description"
.PP 
queue attribute (QAttrib) bits. 
.SH "Define Documentation"
.PP 
.SS "#define Q_ATTRIB_EXCLUSIVE   0x01"
.PP
This queue accepts jobs which request exclusive execution. 
.PP

.SS "#define Q_ATTRIB_DEFAULT   0x02"
.PP
This queue is a default LSF queue. 
.PP

.SS "#define Q_ATTRIB_FAIRSHARE   0x04"
.PP
This queue uses the FAIRSHARE scheduling policy. 
.PP
The user shares are given in \fBuserShares\fP. 
.SS "#define Q_ATTRIB_PREEMPTIVE   0x08"
.PP
This queue uses the PREEMPTIVE scheduling policy. 
.PP

.SS "#define Q_ATTRIB_NQS   0x10"
.PP
This is an NQS forward queue. 
.PP
The target NQS queues are given in nqsQueues. For NQS forward queues, the hostList, procJobLimit, windows, mig and windowsD fields are meaningless. 
.SS "#define Q_ATTRIB_RECEIVE   0x20"
.PP
This queue can receive jobs from other clusters. 
.PP
.SS "#define Q_ATTRIB_PREEMPTABLE   0x40"
.PP
This queue uses a preemptable scheduling policy. 
.PP

.SS "#define Q_ATTRIB_BACKFILL   0x80"
.PP
This queue uses a backfilling policy. 
.PP

.SS "#define Q_ATTRIB_HOST_PREFER   0x100"
.PP
This queue uses a host preference policy. 
.PP

.SS "#define Q_ATTRIB_NONPREEMPTIVE   0x200"
.PP
This queue can't preempt any other another queue. 
.PP

.SS "#define Q_ATTRIB_NONPREEMPTABLE   0x400"
.PP
This queue can't be preempted from any queue. 
.PP

.SS "#define Q_ATTRIB_NO_INTERACTIVE   0x800"
.PP
This queue does not accept batch interactive jobs. 
.PP

.SS "#define Q_ATTRIB_ONLY_INTERACTIVE   0x1000"
.PP
This queue only accepts batch interactive jobs. 
.PP

.SS "#define Q_ATTRIB_NO_HOST_TYPE   0x2000"
.PP
No host type related resource name specified in resource requirement. 
.PP

.SS "#define Q_ATTRIB_IGNORE_DEADLINE   0x4000"
.PP
This queue disables deadline constrained resource scheduling. 
.PP

.SS "#define Q_ATTRIB_CHKPNT   0x8000"
.PP
Jobs may run as chkpntable. 
.PP

.SS "#define Q_ATTRIB_RERUNNABLE   0x10000"
.PP
Jobs may run as rerunnable. 
.PP

.SS "#define Q_ATTRIB_EXCL_RMTJOB   0x20000"
.PP
Excluding remote jobs when local jobs are present in the queue. 
.PP

.SS "#define Q_ATTRIB_MC_FAST_SCHEDULE   0x40000"
.PP
Turn on a multicluster fast scheduling policy. 
.PP

.SS "#define Q_ATTRIB_ENQUE_INTERACTIVE_AHEAD   0x80000"
.PP
Push interactive jobs in front of other jobs in queue. 
.PP

.SS "#define Q_MC_FLAG   0xf00000"
.PP
Flags used by MultiCluster. 
.PP

.SS "#define Q_ATTRIB_LEASE_LOCAL   0x100000"
.PP
Lease and local. 
.PP

.SS "#define Q_ATTRIB_LEASE_ONLY   0x200000"
.PP
Lease only; no local. 
.PP

.SS "#define Q_ATTRIB_RMT_BATCH_LOCAL   0x300000"
.PP
Remote batch and local. 
.PP

.SS "#define Q_ATTRIB_RMT_BATCH_ONLY   0x400000"
.PP
Remote batch only. 
.PP

.SS "#define Q_ATTRIB_RESOURCE_RESERVE   0x1000000"
.PP
Memory reservation. 
.PP

.SS "#define Q_ATTRIB_FS_DISPATCH_ORDER_QUEUE   0x2000000"
.PP
Cross-queue fairshare. 
.PP

.SS "#define Q_ATTRIB_BATCH   0x4000000"
.PP
Batch queue/partition. 
.PP
.SS "#define Q_ATTRIB_ONLINE   0x8000000"
.PP
Online partition. 
.PP
.SS "#define Q_ATTRIB_INTERRUPTIBLE_BACKFILL   0x10000000"
.PP
Interruptible backfill. 
.PP
.SS "#define Q_ATTRIB_APS   0x20000000"
.PP
Absolute Priority scheduling (APS) value. 
.PP

.SS "#define Q_ATTRIB_NO_HIGHER_RESERVE   0x40000000"
.PP
No queue with RESOURCE_RESERVE or SLOT_RESERVE has higher priority than this queue. 
.PP

.SS "#define Q_ATTRIB_NO_HOST_VALID   0x80000000"
.PP
No host valid. 
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for Platform LSF 7.0.6 C API Reference from the source code.
