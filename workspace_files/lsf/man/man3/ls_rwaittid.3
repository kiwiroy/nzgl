.TH "ls_rwaittid" 3 "3 Sep 2009" "Version 7.0" "Platform LSF 7.0.6 C API Reference" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ls_rwaittid \- ls_rwaittid 
Provides support for collecting the status of a specified remote task.
.PP
\fBls_rwaittid\fP is modelled after the UNIX waitpid() system call. It provides support for collecting the status of the remote task whose task ID is tid.
.PP
If a remote child's status is successfully obtained, then the remote task ID (which is returned by an earlier \fBls_rtask\fP or \fBls_rtaske\fP call) is returned. Also, if status is not NULL, the status of the exited child is stored in the structure pointed to by status. If ru is not NULL, and the remote child's machine supports the rusage structure in its wait3() call, the resource usage information of the exited child is stored in the structure pointed to by ru. Only the ru_utime and ru_stime fields are set in the structure if the remote child's machine does not support the rusage structure in the wait3() call. If the remote child is run on a different platform than the parent, then only the fields in the resource structure that are common between the two platforms are filled in (the rusage structure is not identical across all platforms). If the child runs on a 64-bit machine, and the parent runs on a 32-bit machine, each of the values in the rusage structure that will overflow on a 32-bit machine are set to LONG_MAX.
.PP
\fBls_rwaittid\fP behaves identically to \fBls_rwait\fP if tid has a value of zero. If tid is less than 0, it returns -1 and sets lserrno to LSE_BAD_ARGS
.PP
Use the blocking mode of \fBls_rwaittid\fP with care. If there are both local and remote children, \fBls_rwaittid\fP take care only of remote children; none of them will return even though a local child has exited. In such cases, you can call wait(), \fBls_rwait\fP and/or \fBls_rwaittid\fP via signal handlers (for SIGCHLD and SIGUSR1, respectively) to process local and remote children.
.PP
Any program using these routines must call \fBls_initrex\fP first.
.PP
Any program using these routines must be setuid to root if LSF_AUTH is not defined in the lsf.conf file.
.PP
The remote file operations make use of a Remote File Server on the remote host. When this RFS shuts down, its status will be reported to its client. The client should ignore this status.
.PP
\fB #include <sys/types.h> 
.br
#include <sys/wait.h> 
.br
#include <sys/time.h> 
.br
#include <sys/resource.h> 
.br
#include <lsf/lsf.h>\fP
.PP
\fB int ls_rwaittid(int tid, LS_WAIT_T *status, int options, struct rusage *ru) \fP
.PP
.SH "Parameters:"
\fItid\fP The ID of the remote task being accessed. 
.br
\fI*status\fP \fBreturn_values_waittid\fP 
.br
\fIoptions\fP If options is set to 0, and there is at least one remote task, the calling host is blocked until the specific task exits. If options is WNOHANG(non-blocking), it reads the child's status if the child is dead, otherwise it returns immediately with 0. If the status of the child is successfully read, the remote task ID is returned. 
.br
\fI*ru\fP The structure where the resource usage information of the exited child is stored.
.PP
.SH "Data Structures:" 
.PP
none
.PP
.SH "Define Statements:" 
.PP
\fBreturn_values_waittid\fP
.PP
.SH "Returns:"
char:remote task ID 
.br
 The function was successful. 
.PP
int:-1 
.br
 Function failed.
.PP
.SH "Errors:" 
.PP
If the function fails, lserrno is set to indicate the error. If tid is less than 0, it returns -1 and sets lserrno to LSE_BAD_ARGS
.PP
.SH "Equivalent line commands:" 
.PP
none
.PP
.SH "Files:" 
.PP
${LSF_ENVDIR:-/etc}/lsf.conf
.PP
.SH "See also:"
\fBls_rwait\fP 
.PP
\fBls_rtask\fP 
.PP
\fBls_rtaske\fP 
.PP

.ad l
.nh
.SH NAME
return_values_waittid \- Special signals returned in status codes from \fBls_rwait\fP.  

.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBSTATUS_TIMEOUT\fP   125"
.br
.ti -1c
.RI "#define \fBSTATUS_IOERR\fP   124"
.br
.ti -1c
.RI "#define \fBSTATUS_EXCESS\fP   123"
.br
.ti -1c
.RI "#define \fBSTATUS_REX_NOMEM\fP   122"
.br
.ti -1c
.RI "#define \fBSTATUS_REX_FATAL\fP   121"
.br
.ti -1c
.RI "#define \fBSTATUS_REX_CWD\fP   120"
.br
.ti -1c
.RI "#define \fBSTATUS_REX_PTY\fP   119"
.br
.ti -1c
.RI "#define \fBSTATUS_REX_SP\fP   118"
.br
.ti -1c
.RI "#define \fBSTATUS_REX_FORK\fP   117"
.br
.ti -1c
.RI "#define \fBSTATUS_REX_AFS\fP   116"
.br
.ti -1c
.RI "#define \fBSTATUS_REX_UNKNOWN\fP   115"
.br
.ti -1c
.RI "#define \fBSTATUS_REX_NOVCL\fP   114"
.br
.ti -1c
.RI "#define \fBSTATUS_REX_NOSYM\fP   113"
.br
.ti -1c
.RI "#define \fBSTATUS_REX_VCL_INIT\fP   112"
.br
.ti -1c
.RI "#define \fBSTATUS_REX_VCL_SPAWN\fP   111"
.br
.ti -1c
.RI "#define \fBSTATUS_REX_EXEC\fP   110"
.br
.ti -1c
.RI "#define \fBSTATUS_REX_MLS_INVAL\fP   109"
.br
.ti -1c
.RI "#define \fBSTATUS_REX_MLS_CLEAR\fP   108"
.br
.ti -1c
.RI "#define \fBSTATUS_REX_MLS_RHOST\fP   107"
.br
.ti -1c
.RI "#define \fBSTATUS_REX_MLS_DOMIN\fP   106"
.br
.ti -1c
.RI "#define \fBSTATUS_DENIED\fP   105"
.br
.in -1c
.SH "Detailed Description"
.PP 
Special signals returned in status codes from \fBls_rwait\fP. 
.SH "Define Documentation"
.PP 
.SS "#define STATUS_TIMEOUT   125"
.PP
Timed_out status code for rpid. 
.PP
.SS "#define STATUS_IOERR   124"
.PP
The remote task failed with an I/O error. 
.PP

.SS "#define STATUS_EXCESS   123"
.PP
Too many tasks are currently executing. 
.PP

.SS "#define STATUS_REX_NOMEM   122"
.PP
RES failed to allocate memory. 
.PP
.SS "#define STATUS_REX_FATAL   121"
.PP
Fatal error, check RES err log. 
.PP
.SS "#define STATUS_REX_CWD   120"
.PP
Cannot change to current working directory. 
.PP
.SS "#define STATUS_REX_PTY   119"
.PP
RES cannot allocate a pty. 
.PP
.SS "#define STATUS_REX_SP   118"
.PP
RES cannot allocate socket pair. 
.PP
.SS "#define STATUS_REX_FORK   117"
.PP
RES failed to fork the taks. 
.PP
.SS "#define STATUS_REX_AFS   116"
.PP
RES failed to set AFS tokens. 
.PP
.SS "#define STATUS_REX_UNKNOWN   115"
.PP
Internal error in RES. 
.PP
.SS "#define STATUS_REX_NOVCL   114"
.PP
RES failed to load VCL object. 
.PP
.SS "#define STATUS_REX_NOSYM   113"
.PP
Failed to loacte any VCL handler. 
.PP
.SS "#define STATUS_REX_VCL_INIT   112"
.PP
res_vcl_node_init failed 
.PP
.SS "#define STATUS_REX_VCL_SPAWN   111"
.PP
res_vcl_pre_spawn failed 
.PP
.SS "#define STATUS_REX_EXEC   110"
.PP
execit() failed 
.PP
.SS "#define STATUS_REX_MLS_INVAL   109"
.PP
Invalid MLS label. 
.PP
.SS "#define STATUS_REX_MLS_CLEAR   108"
.PP
Not enough clearance. 
.PP
.SS "#define STATUS_REX_MLS_RHOST   107"
.PP
rhost.conf reject require MLS label 
.PP
.SS "#define STATUS_REX_MLS_DOMIN   106"
.PP
Require label doesn't dominate. 
.PP
.SS "#define STATUS_DENIED   105"
.PP
User permission denied. 
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for Platform LSF 7.0.6 C API Reference from the source code.
