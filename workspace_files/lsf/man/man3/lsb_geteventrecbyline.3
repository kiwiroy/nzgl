.TH "lsb_geteventrecbyline" 3 "3 Sep 2009" "Version 7.0" "Platform LSF 7.0.6 C API Reference" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lsb_geteventrecbyline \- lsb_geteventrecbyline 
Parse an event line and put the result in an event record structure.
.PP
The \fBlsb_geteventrecbyline\fP function parses an event line and puts the result in an event record structure.
.PP
If the line to be parsed is a comment line, \fBlsb_geteventrecbyline\fP sets errno to bad event format and logs an error.
.PP
\fB#include <lsf/lsbatch.h>\fP
.PP
\fB int lsb_geteventrecbyline(char *line, struct eventRec *logRec)\fP
.PP
.SH "Parameters:"
\fI*line\fP Buffer containing a line of event text string 
.br
\fI*logRec\fP Pointer to an \fBeventRec\fP structure
.PP
.SH "Data Structures:" 
.PP
\fBeventRec\fP 
.br
\fBeventLog\fP 
.br
\fBxFile\fP 
.br
\fBjobAttrSetLog\fP 
.br
\fBlogSwitchLog\fP 
.br
\fBdataLoggingLog\fP 
.br
\fBjgrpNewLog\fP 
.br
\fBjgrpCtrlLog\fP 
.br
\fBjgrpStatusLog\fP 
.br
\fBjobNewLog\fP 
.br
\fBjobModLog\fP 
.br
\fBjobStartLog\fP 
.br
\fBjobStartAcceptLog\fP 
.br
\fBjobExecuteLog\fP 
.br
\fBjobStatusLog\fP 
.br
\fBsbdJobStatusLog\fP 
.br
\fBsbdUnreportedStatusLog\fP 
.br
\fBjobSwitchLog\fP 
.br
\fBjobMoveLog\fP 
.br
\fBchkpntLog\fP 
.br
\fBjobRequeueLog\fP 
.br
\fBjobCleanLog\fP 
.br
\fBjobExceptionLog\fP 
.br
\fBsigactLog\fP 
.br
\fBmigLog\fP 
.br
\fBsignalLog\fP 
.br
\fBqueueCtrlLog\fP 
.br
\fBhostCtrlLog\fP 
.br
\fBhgCtrlLog\fP 
.br
\fBmbdStartLog\fP 
.br
\fBmbdDieLog\fP 
.br
\fBunfulfillLog\fP 
.br
\fBjobFinishLog\fP 
.br
\fBloadIndexLog\fP 
.br
\fBcalendarLog\fP 
.br
\fBjobForwardLog\fP 
.br
\fBjobAcceptLog\fP 
.br
\fBstatusAckLog\fP 
.br
\fBjobMsgLog\fP 
.br
\fBjobMsgAckLog\fP 
.br
\fBjobOccupyReqLog\fP 
.br
\fBjobVacatedLog\fP 
.br
\fBjobForceRequestLog\fP 
.br
\fBjobChunkLog\fP 
.br
\fBjobExternalMsgLog\fP 
.br
\fBrsvRes\fP 
.br
\fBrsvFinishLog\fP 
.br
\fBcpuProfileLog\fP 
.br
\fBjobRunRusageLog\fP 
.br
\fBslaLog\fP 
.br
\fBperfmonLogInfo\fP 
.br
\fBperfmonLog\fP 
.br
\fBtaskFinishLog\fP 
.br
\fBeventEOSLog\fP 
.br
\fBjobResizeNotifyStartLog\fP 
.br
\fBjobResizeNotifyAcceptLog\fP 
.br
\fBjobResizeNotifyDoneLog\fP 
.br
\fBjobResizeReleaseLog\fP 
.br
\fBjobResizeCancelLog\fP 
.br
\fBjobResizeLog\fP 
.br
\fBjRusage\fP
.PP
.SH "Define Statements:" 
.PP
none
.PP
.SH "Pre-Conditions:" 
.PP
The event record structure must have been initialized outside the \fBlsb_geteventrecbyline\fP function.
.PP
.SH "Returns:"
int: 0 
.br
 Function was successful. 
.PP
int:-1 
.br
 Function failed and lserrno was set.
.PP
.SH "Errors:" 
.PP
none
.PP
.SH "Equivalent line commands:" 
.PP
none
.PP
.SH "Files:" 
.PP
none
.PP
.SH "See also:"
none 
.PP

.ad l
.nh
.SH NAME
eventRec \- event records.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char \fBversion\fP [MAX_VERSION_LEN]"
.br
.ti -1c
.RI "int \fBtype\fP"
.br
.ti -1c
.RI "time_t \fBeventTime\fP"
.br
.ti -1c
.RI "union \fBeventLog\fP \fBeventLog\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
event records. 
.SH "Field Documentation"
.PP 
.SS "char \fBeventRec::version\fP[MAX_VERSION_LEN]"
.PP
The mbatchd version number. 
.PP
.SS "int \fBeventRec::type\fP"
.PP
Event type in \fBevent_types\fP. 
.PP
.SS "time_t \fBeventRec::eventTime\fP"
.PP
The time the event occurred. 
.PP
.SS "union \fBeventLog\fP \fBeventRec::eventLog\fP"
.PP
The information for this type of event, contained in a structure corresponding to type. 
.PP


.ad l
.nh
.SH NAME
eventLog \- Log event types.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "struct \fBjobNewLog\fP \fBjobNewLog\fP"
.br
.ti -1c
.RI "struct \fBjobStartLog\fP \fBjobStartLog\fP"
.br
.ti -1c
.RI "struct \fBjobStatusLog\fP \fBjobStatusLog\fP"
.br
.ti -1c
.RI "struct \fBsbdJobStatusLog\fP \fBsbdJobStatusLog\fP"
.br
.ti -1c
.RI "struct \fBjobSwitchLog\fP \fBjobSwitchLog\fP"
.br
.ti -1c
.RI "struct \fBjobMoveLog\fP \fBjobMoveLog\fP"
.br
.ti -1c
.RI "struct \fBqueueCtrlLog\fP \fBqueueCtrlLog\fP"
.br
.ti -1c
.RI "struct \fBhostCtrlLog\fP \fBhostCtrlLog\fP"
.br
.ti -1c
.RI "struct \fBmbdStartLog\fP \fBmbdStartLog\fP"
.br
.ti -1c
.RI "struct \fBmbdDieLog\fP \fBmbdDieLog\fP"
.br
.ti -1c
.RI "struct \fBunfulfillLog\fP \fBunfulfillLog\fP"
.br
.ti -1c
.RI "struct \fBjobFinishLog\fP \fBjobFinishLog\fP"
.br
.ti -1c
.RI "struct \fBloadIndexLog\fP \fBloadIndexLog\fP"
.br
.ti -1c
.RI "struct \fBmigLog\fP \fBmigLog\fP"
.br
.ti -1c
.RI "struct \fBcalendarLog\fP \fBcalendarLog\fP"
.br
.ti -1c
.RI "struct \fBjobForwardLog\fP \fBjobForwardLog\fP"
.br
.ti -1c
.RI "struct \fBjobAcceptLog\fP \fBjobAcceptLog\fP"
.br
.ti -1c
.RI "struct \fBstatusAckLog\fP \fBstatusAckLog\fP"
.br
.ti -1c
.RI "struct \fBsignalLog\fP \fBsignalLog\fP"
.br
.ti -1c
.RI "struct \fBjobExecuteLog\fP \fBjobExecuteLog\fP"
.br
.ti -1c
.RI "struct \fBjobMsgLog\fP \fBjobMsgLog\fP"
.br
.ti -1c
.RI "struct \fBjobMsgAckLog\fP \fBjobMsgAckLog\fP"
.br
.ti -1c
.RI "struct \fBjobRequeueLog\fP \fBjobRequeueLog\fP"
.br
.ti -1c
.RI "struct \fBchkpntLog\fP \fBchkpntLog\fP"
.br
.ti -1c
.RI "struct \fBsigactLog\fP \fBsigactLog\fP"
.br
.ti -1c
.RI "struct \fBjobOccupyReqLog\fP \fBjobOccupyReqLog\fP"
.br
.ti -1c
.RI "struct \fBjobVacatedLog\fP \fBjobVacatedLog\fP"
.br
.ti -1c
.RI "struct \fBjobStartAcceptLog\fP \fBjobStartAcceptLog\fP"
.br
.ti -1c
.RI "struct \fBjobCleanLog\fP \fBjobCleanLog\fP"
.br
.ti -1c
.RI "struct \fBjobExceptionLog\fP \fBjobExceptionLog\fP"
.br
.ti -1c
.RI "struct \fBjgrpNewLog\fP \fBjgrpNewLog\fP"
.br
.ti -1c
.RI "struct \fBjgrpCtrlLog\fP \fBjgrpCtrlLog\fP"
.br
.ti -1c
.RI "struct \fBjobForceRequestLog\fP \fBjobForceRequestLog\fP"
.br
.ti -1c
.RI "struct \fBlogSwitchLog\fP \fBlogSwitchLog\fP"
.br
.ti -1c
.RI "struct \fBjobModLog\fP \fBjobModLog\fP"
.br
.ti -1c
.RI "struct \fBjgrpStatusLog\fP \fBjgrpStatusLog\fP"
.br
.ti -1c
.RI "struct \fBjobAttrSetLog\fP \fBjobAttrSetLog\fP"
.br
.ti -1c
.RI "struct \fBjobExternalMsgLog\fP \fBjobExternalMsgLog\fP"
.br
.ti -1c
.RI "struct \fBjobChunkLog\fP \fBjobChunkLog\fP"
.br
.ti -1c
.RI "struct \fBsbdUnreportedStatusLog\fP \fBsbdUnreportedStatusLog\fP"
.br
.ti -1c
.RI "struct \fBrsvFinishLog\fP \fBrsvFinishLog\fP"
.br
.ti -1c
.RI "struct \fBhgCtrlLog\fP \fBhgCtrlLog\fP"
.br
.ti -1c
.RI "struct \fBcpuProfileLog\fP \fBcpuProfileLog\fP"
.br
.ti -1c
.RI "struct \fBdataLoggingLog\fP \fBdataLoggingLog\fP"
.br
.ti -1c
.RI "struct \fBjobRunRusageLog\fP \fBjobRunRusageLog\fP"
.br
.ti -1c
.RI "struct \fBeventEOSLog\fP \fBeventEOSLog\fP"
.br
.ti -1c
.RI "struct \fBslaLog\fP \fBslaLog\fP"
.br
.ti -1c
.RI "struct \fBperfmonLog\fP \fBperfmonLog\fP"
.br
.ti -1c
.RI "struct \fBtaskFinishLog\fP \fBtaskFinishLog\fP"
.br
.ti -1c
.RI "struct \fBjobResizeNotifyStartLog\fP \fBjobResizeNotifyStartLog\fP"
.br
.ti -1c
.RI "struct \fBjobResizeNotifyAcceptLog\fP \fBjobResizeNotifyAcceptLog\fP"
.br
.ti -1c
.RI "struct \fBjobResizeNotifyDoneLog\fP \fBjobResizeNotifyDoneLog\fP"
.br
.ti -1c
.RI "struct \fBjobResizeReleaseLog\fP \fBjobResizeReleaseLog\fP"
.br
.ti -1c
.RI "struct \fBjobResizeCancelLog\fP \fBjobResizeCancelLog\fP"
.br
.ti -1c
.RI "struct \fBjobResizeLog\fP \fBjobResizeLog\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Log event types. 
.SH "Field Documentation"
.PP 
.SS "struct \fBjobNewLog\fP \fBeventLog::jobNewLog\fP"
.PP
Job new event. 
.PP
.SS "struct \fBjobStartLog\fP \fBeventLog::jobStartLog\fP"
.PP
Job start event. 
.PP
.SS "struct \fBjobStatusLog\fP \fBeventLog::jobStatusLog\fP"
.PP
Job status event. 
.PP
.SS "struct \fBsbdJobStatusLog\fP \fBeventLog::sbdJobStatusLog\fP"
.PP
sbatchd job status event 
.PP
.SS "struct \fBjobSwitchLog\fP \fBeventLog::jobSwitchLog\fP"
.PP
Job switch event. 
.PP
.SS "struct \fBjobMoveLog\fP \fBeventLog::jobMoveLog\fP"
.PP
Job move event. 
.PP
.SS "struct \fBqueueCtrlLog\fP \fBeventLog::queueCtrlLog\fP"
.PP
Queue control event. 
.PP
.SS "struct \fBhostCtrlLog\fP \fBeventLog::hostCtrlLog\fP"
.PP
Host control event. 
.PP
.SS "struct \fBmbdStartLog\fP \fBeventLog::mbdStartLog\fP"
.PP
mbatchd start event 
.PP
.SS "struct \fBmbdDieLog\fP \fBeventLog::mbdDieLog\fP"
.PP
mbatchd die event 
.PP
.SS "struct \fBunfulfillLog\fP \fBeventLog::unfulfillLog\fP"
.PP
Unfulfill event. 
.PP
.SS "struct \fBjobFinishLog\fP \fBeventLog::jobFinishLog\fP"
.PP
Job finish event. 
.PP
.SS "struct \fBloadIndexLog\fP \fBeventLog::loadIndexLog\fP"
.PP
Load index event. 
.PP
.SS "struct \fBmigLog\fP \fBeventLog::migLog\fP"
.PP
Migration initiated event. 
.PP
.SS "struct \fBcalendarLog\fP \fBeventLog::calendarLog\fP"
.PP
Calendar event. 
.PP
.SS "struct \fBjobForwardLog\fP \fBeventLog::jobForwardLog\fP"
.PP
Job forward event. 
.PP
.SS "struct \fBjobAcceptLog\fP \fBeventLog::jobAcceptLog\fP"
.PP
Job accept event. 
.PP
.SS "struct \fBstatusAckLog\fP \fBeventLog::statusAckLog\fP"
.PP
Job accepted from another cluster event. 
.PP
.SS "struct \fBsignalLog\fP \fBeventLog::signalLog\fP"
.PP
Job signal event. 
.PP
.SS "struct \fBjobExecuteLog\fP \fBeventLog::jobExecuteLog\fP"
.PP
Job execution event. 
.PP
.SS "struct \fBjobMsgLog\fP \fBeventLog::jobMsgLog\fP"
.PP
Job message event. 
.PP
.SS "struct \fBjobMsgAckLog\fP \fBeventLog::jobMsgAckLog\fP"
.PP
Job message ackknowledge event. 
.PP
.SS "struct \fBjobRequeueLog\fP \fBeventLog::jobRequeueLog\fP"
.PP
Job requeue event. 
.PP
.SS "struct \fBchkpntLog\fP \fBeventLog::chkpntLog\fP"
.PP
Checkpoint event. 
.PP
.SS "struct \fBsigactLog\fP \fBeventLog::sigactLog\fP"
.PP
Signal with action event. 
.PP
.SS "struct \fBjobOccupyReqLog\fP \fBeventLog::jobOccupyReqLog\fP"
.PP
Job occupy request event. 
.PP
.SS "struct \fBjobVacatedLog\fP \fBeventLog::jobVacatedLog\fP"
.PP
Job vacate event. 
.PP
.SS "struct \fBjobStartAcceptLog\fP \fBeventLog::jobStartAcceptLog\fP"
.PP
Job start accept event. 
.PP
.SS "struct \fBjobCleanLog\fP \fBeventLog::jobCleanLog\fP"
.PP
Job clean event. 
.PP
.SS "struct \fBjobExceptionLog\fP \fBeventLog::jobExceptionLog\fP"
.PP
Job exception event. 
.PP
.SS "struct \fBjgrpNewLog\fP \fBeventLog::jgrpNewLog\fP"
.PP
Job group new event. 
.PP
.SS "struct \fBjgrpCtrlLog\fP \fBeventLog::jgrpCtrlLog\fP"
.PP
Job group Ctrl event. 
.PP
.SS "struct \fBjobForceRequestLog\fP \fBeventLog::jobForceRequestLog\fP"
.PP
Job Force Request event. 
.PP
.SS "struct \fBlogSwitchLog\fP \fBeventLog::logSwitchLog\fP"
.PP
Event switch event. 
.PP
.SS "struct \fBjobModLog\fP \fBeventLog::jobModLog\fP"
.PP
Job modify event. 
.PP
.SS "struct \fBjgrpStatusLog\fP \fBeventLog::jgrpStatusLog\fP"
.PP
Job group stratus event. 
.PP
.SS "struct \fBjobAttrSetLog\fP \fBeventLog::jobAttrSetLog\fP"
.PP
Job attribute setting event. 
.PP
.SS "struct \fBjobExternalMsgLog\fP \fBeventLog::jobExternalMsgLog\fP"
.PP
Job external message event. 
.PP
.SS "struct \fBjobChunkLog\fP \fBeventLog::jobChunkLog\fP"
.PP
Job chunk event. 
.PP
.SS "struct \fBsbdUnreportedStatusLog\fP \fBeventLog::sbdUnreportedStatusLog\fP"
.PP
sbatchd unreported status event 
.PP
.SS "struct \fBrsvFinishLog\fP \fBeventLog::rsvFinishLog\fP"
.PP
Reservation finish event. 
.PP
.SS "struct \fBhgCtrlLog\fP \fBeventLog::hgCtrlLog\fP"
.PP
Host group control Log. 
.PP
.SS "struct \fBcpuProfileLog\fP \fBeventLog::cpuProfileLog\fP"
.PP
cpu profile event 
.PP
.SS "struct \fBdataLoggingLog\fP \fBeventLog::dataLoggingLog\fP"
.PP
Data logging event. 
.PP
.SS "struct \fBjobRunRusageLog\fP \fBeventLog::jobRunRusageLog\fP"
.PP
Job run rusage event. 
.PP
.SS "struct \fBeventEOSLog\fP \fBeventLog::eventEOSLog\fP"
.PP
Event EOS event. 
.PP
.SS "struct \fBslaLog\fP \fBeventLog::slaLog\fP"
.PP
SLA event. 
.PP
.SS "struct \fBperfmonLog\fP \fBeventLog::perfmonLog\fP"
.PP
Performance event. 
.PP
.SS "struct \fBtaskFinishLog\fP \fBeventLog::taskFinishLog\fP"
.PP
Task finish event. 
.PP
.SS "struct \fBjobResizeNotifyStartLog\fP \fBeventLog::jobResizeNotifyStartLog\fP"
.PP
Job resize notify start event. 
.PP
.SS "struct \fBjobResizeNotifyAcceptLog\fP \fBeventLog::jobResizeNotifyAcceptLog\fP"
.PP
Job resize notify accept event. 
.PP
.SS "struct \fBjobResizeNotifyDoneLog\fP \fBeventLog::jobResizeNotifyDoneLog\fP"
.PP
Job resize notify done event. 
.PP
.SS "struct \fBjobResizeReleaseLog\fP \fBeventLog::jobResizeReleaseLog\fP"
.PP
Job resize release event. 
.PP
.SS "struct \fBjobResizeCancelLog\fP \fBeventLog::jobResizeCancelLog\fP"
.PP
Job resize cancel event. 
.PP
.SS "struct \fBjobResizeLog\fP \fBeventLog::jobResizeLog\fP"
.PP
Job resize event. 
.PP


.ad l
.nh
.SH NAME
xFile \- \fBxFile\fP  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char * \fBsubFn\fP"
.br
.ti -1c
.RI "char * \fBexecFn\fP"
.br
.ti -1c
.RI "int \fBoptions\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBxFile\fP 
.SH "Field Documentation"
.PP 
.SS "char* \fBxFile::subFn\fP"
.PP
Pathname at submission host. 
.PP
.SS "char* \fBxFile::execFn\fP"
.PP
Pathname at execution host. 
.PP
.SS "int \fBxFile::options\fP"
.PP
Defined in \fBdefs_lsb_XF_OP\fP. 
.PP


.ad l
.nh
.SH NAME
jobAttrSetLog \- job attribute setting log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "int \fBuid\fP"
.br
.ti -1c
.RI "int \fBport\fP"
.br
.ti -1c
.RI "char * \fBhostname\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job attribute setting log. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobAttrSetLog::jobId\fP"
.PP
The unique ID for the job. 
.PP
.SS "int \fBjobAttrSetLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP
.SS "int \fBjobAttrSetLog::uid\fP"
.PP
The user who requested the action. 
.PP
.SS "int \fBjobAttrSetLog::port\fP"
.PP
Job attributes. 
.PP
.SS "char* \fBjobAttrSetLog::hostname\fP"
.PP
Name of the host. 
.PP


.ad l
.nh
.SH NAME
logSwitchLog \- Records of logged events.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBlastJobId\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Records of logged events. 
.SH "Field Documentation"
.PP 
.SS "int \fBlogSwitchLog::lastJobId\fP"
.PP
The last jobId so far. 
.PP


.ad l
.nh
.SH NAME
dataLoggingLog \- Records of job CPU data logged event.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "time_t \fBloggingTime\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Records of job CPU data logged event. 
.SH "Field Documentation"
.PP 
.SS "time_t \fBdataLoggingLog::loggingTime\fP"
.PP
The time of last job cpu data logging. 
.PP


.ad l
.nh
.SH NAME
jgrpNewLog \- new job group log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "time_t \fBsubmitTime\fP"
.br
.ti -1c
.RI "char \fBuserName\fP [MAX_LSB_NAME_LEN]"
.br
.ti -1c
.RI "char * \fBdepCond\fP"
.br
.ti -1c
.RI "char * \fBtimeEvent\fP"
.br
.ti -1c
.RI "char * \fBgroupSpec\fP"
.br
.ti -1c
.RI "char * \fBdestSpec\fP"
.br
.ti -1c
.RI "int \fBdelOptions\fP"
.br
.ti -1c
.RI "int \fBdelOptions2\fP"
.br
.ti -1c
.RI "int \fBfromPlatform\fP"
.br
.ti -1c
.RI "char * \fBsla\fP"
.br
.ti -1c
.RI "int \fBmaxJLimit\fP"
.br
.ti -1c
.RI "int \fBoptions\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
new job group log. 
.SH "Field Documentation"
.PP 
.SS "int \fBjgrpNewLog::userId\fP"
.PP
The user ID of the submitter. 
.PP
.SS "time_t \fBjgrpNewLog::submitTime\fP"
.PP
The job submission time. 
.PP
.SS "char \fBjgrpNewLog::userName\fP[MAX_LSB_NAME_LEN]"
.PP
The name of the submitter. 
.PP
.SS "char* \fBjgrpNewLog::depCond\fP"
.PP
The job dependency condition. 
.PP
.SS "char* \fBjgrpNewLog::timeEvent\fP"
.PP
Time event string. 
.PP
.SS "char* \fBjgrpNewLog::groupSpec\fP"
.PP
Job group name. 
.PP
.SS "char* \fBjgrpNewLog::destSpec\fP"
.PP
New job group name. 
.PP
.SS "int \fBjgrpNewLog::delOptions\fP"
.PP
Delete options in options field. 
.PP
.SS "int \fBjgrpNewLog::delOptions2\fP"
.PP
Extended Delete options in options2 field. 
.PP
.SS "int \fBjgrpNewLog::fromPlatform\fP"
.PP
Platform type: such as Unix, Windows. 
.PP
.SS "char* \fBjgrpNewLog::sla\fP"
.PP
SLA service class name under which the job runs. 
.PP
.SS "int \fBjgrpNewLog::maxJLimit\fP"
.PP
Max job group slots limit. 
.PP
.SS "int \fBjgrpNewLog::options\fP"
.PP
Job group creation method: implicit or explicit. 
.PP


.ad l
.nh
.SH NAME
jgrpCtrlLog \- job group control log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "char \fBuserName\fP [MAX_LSB_NAME_LEN]"
.br
.ti -1c
.RI "char * \fBgroupSpec\fP"
.br
.ti -1c
.RI "int \fBoptions\fP"
.br
.ti -1c
.RI "int \fBctrlOp\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job group control log. 
.SH "Field Documentation"
.PP 
.SS "int \fBjgrpCtrlLog::userId\fP"
.PP
The user ID of the submitter. 
.PP
.SS "char \fBjgrpCtrlLog::userName\fP[MAX_LSB_NAME_LEN]"
.PP
The name of the submitter. 
.PP
.SS "char* \fBjgrpCtrlLog::groupSpec\fP"
.PP
Job group name. 
.PP
.SS "int \fBjgrpCtrlLog::options\fP"
.PP
Options. 
.PP
.SS "int \fBjgrpCtrlLog::ctrlOp\fP"
.PP
Job control JGRP_RELEASE, JGRP_HOLD, JGRP_DEL. 
.PP


.ad l
.nh
.SH NAME
jgrpStatusLog \- job group status log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char * \fBgroupSpec\fP"
.br
.ti -1c
.RI "int \fBstatus\fP"
.br
.ti -1c
.RI "int \fBoldStatus\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job group status log. 
.SH "Field Documentation"
.PP 
.SS "char* \fBjgrpStatusLog::groupSpec\fP"
.PP
The full group path name for the job group. 
.PP
.SS "int \fBjgrpStatusLog::status\fP"
.PP
Job group status. 
.PP
.SS "int \fBjgrpStatusLog::oldStatus\fP"
.PP
Prior status. 
.PP


.ad l
.nh
.SH NAME
jobNewLog \- \fBjobNewLog\fP logged in lsb.events when a job is submitted.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "char \fBuserName\fP [MAX_LSB_NAME_LEN]"
.br
.ti -1c
.RI "int \fBoptions\fP"
.br
.ti -1c
.RI "int \fBoptions2\fP"
.br
.ti -1c
.RI "int \fBnumProcessors\fP"
.br
.ti -1c
.RI "time_t \fBsubmitTime\fP"
.br
.ti -1c
.RI "time_t \fBbeginTime\fP"
.br
.ti -1c
.RI "time_t \fBtermTime\fP"
.br
.ti -1c
.RI "int \fBsigValue\fP"
.br
.ti -1c
.RI "int \fBchkpntPeriod\fP"
.br
.ti -1c
.RI "int \fBrestartPid\fP"
.br
.ti -1c
.RI "int \fBrLimits\fP [LSF_RLIM_NLIMITS]"
.br
.ti -1c
.RI "char \fBhostSpec\fP [MAXHOSTNAMELEN]"
.br
.ti -1c
.RI "float \fBhostFactor\fP"
.br
.ti -1c
.RI "int \fBumask\fP"
.br
.ti -1c
.RI "char \fBqueue\fP [MAX_LSB_NAME_LEN]"
.br
.ti -1c
.RI "char * \fBresReq\fP"
.br
.ti -1c
.RI "char \fBfromHost\fP [MAXHOSTNAMELEN]"
.br
.ti -1c
.RI "char * \fBcwd\fP"
.br
.ti -1c
.RI "char * \fBchkpntDir\fP"
.br
.ti -1c
.RI "char * \fBinFile\fP"
.br
.ti -1c
.RI "char * \fBoutFile\fP"
.br
.ti -1c
.RI "char * \fBerrFile\fP"
.br
.ti -1c
.RI "char * \fBinFileSpool\fP"
.br
.ti -1c
.RI "char * \fBcommandSpool\fP"
.br
.ti -1c
.RI "char * \fBjobSpoolDir\fP"
.br
.ti -1c
.RI "char * \fBsubHomeDir\fP"
.br
.ti -1c
.RI "char * \fBjobFile\fP"
.br
.ti -1c
.RI "int \fBnumAskedHosts\fP"
.br
.ti -1c
.RI "char ** \fBaskedHosts\fP"
.br
.ti -1c
.RI "char * \fBdependCond\fP"
.br
.ti -1c
.RI "char * \fBtimeEvent\fP"
.br
.ti -1c
.RI "char * \fBjobName\fP"
.br
.ti -1c
.RI "char * \fBcommand\fP"
.br
.ti -1c
.RI "int \fBnxf\fP"
.br
.ti -1c
.RI "struct \fBxFile\fP * \fBxf\fP"
.br
.ti -1c
.RI "char * \fBpreExecCmd\fP"
.br
.ti -1c
.RI "char * \fBmailUser\fP"
.br
.ti -1c
.RI "char * \fBprojectName\fP"
.br
.ti -1c
.RI "int \fBniosPort\fP"
.br
.ti -1c
.RI "int \fBmaxNumProcessors\fP"
.br
.ti -1c
.RI "char * \fBschedHostType\fP"
.br
.ti -1c
.RI "char * \fBloginShell\fP"
.br
.ti -1c
.RI "char * \fBuserGroup\fP"
.br
.ti -1c
.RI "char * \fBexceptList\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "int \fBuserPriority\fP"
.br
.ti -1c
.RI "char * \fBrsvId\fP"
.br
.ti -1c
.RI "char * \fBjobGroup\fP"
.br
.ti -1c
.RI "char * \fBextsched\fP"
.br
.ti -1c
.RI "int \fBwarningTimePeriod\fP"
.br
.ti -1c
.RI "char * \fBwarningAction\fP"
.br
.ti -1c
.RI "char * \fBsla\fP"
.br
.ti -1c
.RI "int \fBSLArunLimit\fP"
.br
.ti -1c
.RI "char * \fBlicenseProject\fP"
.br
.ti -1c
.RI "int \fBoptions3\fP"
.br
.ti -1c
.RI "char * \fBapp\fP"
.br
.ti -1c
.RI "char * \fBpostExecCmd\fP"
.br
.ti -1c
.RI "int \fBruntimeEstimation\fP"
.br
.ti -1c
.RI "char * \fBrequeueEValues\fP"
.br
.ti -1c
.RI "int \fBinitChkpntPeriod\fP"
.br
.ti -1c
.RI "int \fBmigThreshold\fP"
.br
.ti -1c
.RI "char * \fBnotifyCmd\fP"
.br
.ti -1c
.RI "char * \fBjobDescription\fP"
.br
.ti -1c
.RI "struct \fBsubmit_ext\fP * \fBsubmitExt\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBjobNewLog\fP logged in lsb.events when a job is submitted. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobNewLog::jobId\fP"
.PP
The job ID that the LSF assigned to the job. 
.PP
.SS "int \fBjobNewLog::userId\fP"
.PP
The user ID of the submitter. 
.PP
.SS "char \fBjobNewLog::userName\fP[MAX_LSB_NAME_LEN]"
.PP
The name of the submitter. 
.PP
.SS "int \fBjobNewLog::options\fP"
.PP
Job submission options. 
.PP
see \fBlsb_submit\fP. 
.SS "int \fBjobNewLog::options2\fP"
.PP
Job submission options. 
.PP
see \fBlsb_submit\fP. 
.SS "int \fBjobNewLog::numProcessors\fP"
.PP
The number of processors requested for execution. 
.PP
.SS "time_t \fBjobNewLog::submitTime\fP"
.PP
The job submission time. 
.PP
.SS "time_t \fBjobNewLog::beginTime\fP"
.PP
The job should be started on or after this time. 
.PP
.SS "time_t \fBjobNewLog::termTime\fP"
.PP
If the job has not finished by this time, it will be killed. 
.PP
.SS "int \fBjobNewLog::sigValue\fP"
.PP
The signal value sent to the job 10 minutes before its run window closes. 
.PP
.SS "int \fBjobNewLog::chkpntPeriod\fP"
.PP
The checkpointing period. 
.PP
.SS "int \fBjobNewLog::restartPid\fP"
.PP
The process ID assigned to the job when it was restarted. 
.PP
.SS "int \fBjobNewLog::rLimits\fP[LSF_RLIM_NLIMITS]"
.PP
The user's resource limits. 
.PP
.SS "char \fBjobNewLog::hostSpec\fP[MAXHOSTNAMELEN]"
.PP
The model, host name or host type for scaling CPULIMIT and RUNLIMIT. 
.PP
.SS "float \fBjobNewLog::hostFactor\fP"
.PP
The CPU factor for the above model, host name or host type. 
.PP
.SS "int \fBjobNewLog::umask\fP"
.PP
The file creation mask for this job. 
.PP
.SS "char \fBjobNewLog::queue\fP[MAX_LSB_NAME_LEN]"
.PP
The name of the queue to which this job was submitted. 
.PP
.SS "char* \fBjobNewLog::resReq\fP"
.PP
The resource requirements of the job. 
.PP
.SS "char \fBjobNewLog::fromHost\fP[MAXHOSTNAMELEN]"
.PP
The submission host name. 
.PP
.SS "char* \fBjobNewLog::cwd\fP"
.PP
The current working directory. 
.PP
.SS "char* \fBjobNewLog::chkpntDir\fP"
.PP
The checkpoint directory. 
.PP
.SS "char* \fBjobNewLog::inFile\fP"
.PP
The input file name. 
.PP
.SS "char* \fBjobNewLog::outFile\fP"
.PP
The output file name. 
.PP
.SS "char* \fBjobNewLog::errFile\fP"
.PP
The error output file name. 
.PP
.SS "char* \fBjobNewLog::inFileSpool\fP"
.PP
Job spool input file. 
.PP
.SS "char* \fBjobNewLog::commandSpool\fP"
.PP
Job spool command file. 
.PP
.SS "char* \fBjobNewLog::jobSpoolDir\fP"
.PP
Job spool directory. 
.PP
.SS "char* \fBjobNewLog::subHomeDir\fP"
.PP
The home directory of the submitter. 
.PP
.SS "char* \fBjobNewLog::jobFile\fP"
.PP
The job file name. 
.PP
.SS "int \fBjobNewLog::numAskedHosts\fP"
.PP
The number of hosts considered for dispatching this job. 
.PP
.SS "char** \fBjobNewLog::askedHosts\fP"
.PP
The array of names of hosts considered for dispatching this job. 
.PP
.SS "char* \fBjobNewLog::dependCond\fP"
.PP
The job dependency condition. 
.PP
.SS "char* \fBjobNewLog::timeEvent\fP"
.PP
Time event string. 
.PP
.SS "char* \fBjobNewLog::jobName\fP"
.PP
The job name. 
.PP
.SS "char* \fBjobNewLog::command\fP"
.PP
The job command. 
.PP
.SS "int \fBjobNewLog::nxf\fP"
.PP
The number of files to transfer. 
.PP
.SS "struct \fBxFile\fP* \fBjobNewLog::xf\fP"
.PP
The array of file transfer specifications. 
.PP
(The \fBxFile\fP structure is defined in <lsf/lsbatch.h>) 
.SS "char* \fBjobNewLog::preExecCmd\fP"
.PP
The command string to be pre_executed. 
.PP
.SS "char* \fBjobNewLog::mailUser\fP"
.PP
User option mail string. 
.PP
.SS "char* \fBjobNewLog::projectName\fP"
.PP
The project name for this job, used for accounting purposes. 
.PP
.SS "int \fBjobNewLog::niosPort\fP"
.PP
Port to be used for interactive jobs. 
.PP
.SS "int \fBjobNewLog::maxNumProcessors\fP"
.PP
Maximum number of processors. 
.PP
.SS "char* \fBjobNewLog::schedHostType\fP"
.PP
Execution host type. 
.PP
.SS "char* \fBjobNewLog::loginShell\fP"
.PP
Login shell specified by user. 
.PP
.SS "char* \fBjobNewLog::userGroup\fP"
.PP
The user group name for this job. 
.PP
.SS "char* \fBjobNewLog::exceptList\fP"
.PP
List of alarm conditions for job. 
.PP
.SS "int \fBjobNewLog::idx\fP"
.PP
Array idx, must be 0 in JOB_NEW. 
.PP
.SS "int \fBjobNewLog::userPriority\fP"
.PP
User priority. 
.PP
.SS "char* \fBjobNewLog::rsvId\fP"
.PP
Advance reservation ID. 
.PP
.SS "char* \fBjobNewLog::jobGroup\fP"
.PP
The job group under which the job runs. 
.PP

.SS "char* \fBjobNewLog::extsched\fP"
.PP
External scheduling options. 
.PP
.SS "int \fBjobNewLog::warningTimePeriod\fP"
.PP
Warning time period in seconds, -1 if unspecified. 
.PP
.SS "char* \fBjobNewLog::warningAction\fP"
.PP
Warning action, SIGNAL | CHKPNT | command, NULL if unspecified. 
.PP
.SS "char* \fBjobNewLog::sla\fP"
.PP
The service class under which the job runs. 
.PP

.SS "int \fBjobNewLog::SLArunLimit\fP"
.PP
The absolute run limit of the job. 
.PP
.SS "char* \fBjobNewLog::licenseProject\fP"
.PP
License Project. 
.PP
.SS "int \fBjobNewLog::options3\fP"
.PP
Extended bitwise inclusive OR of options flags. 
.PP
See \fBlsb_submit\fP. 
.SS "char* \fBjobNewLog::app\fP"
.PP
Application profile under which the job runs. 
.PP

.SS "char* \fBjobNewLog::postExecCmd\fP"
.PP
Post-execution commands. 
.PP

.SS "int \fBjobNewLog::runtimeEstimation\fP"
.PP
Runtime estimate specified. 
.PP

.SS "char* \fBjobNewLog::requeueEValues\fP"
.PP
Job-level requeue exit values. 
.PP

.SS "int \fBjobNewLog::initChkpntPeriod\fP"
.PP
Initial checkpoint period. 
.PP
.SS "int \fBjobNewLog::migThreshold\fP"
.PP
Job migration threshold. 
.PP

.SS "char* \fBjobNewLog::notifyCmd\fP"
.PP
Resize notify command. 
.PP
.SS "char* \fBjobNewLog::jobDescription\fP"
.PP
Job description. 
.PP

.SS "struct \fBsubmit_ext\fP* \fBjobNewLog::submitExt\fP"
.PP
For new options in future. 
.PP


.ad l
.nh
.SH NAME
jobModLog \- job modified log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char * \fBjobIdStr\fP"
.br
.ti -1c
.RI "int \fBoptions\fP"
.br
.ti -1c
.RI "int \fBoptions2\fP"
.br
.ti -1c
.RI "int \fBdelOptions\fP"
.br
.ti -1c
.RI "int \fBdelOptions2\fP"
.br
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "char * \fBuserName\fP"
.br
.ti -1c
.RI "int \fBsubmitTime\fP"
.br
.ti -1c
.RI "int \fBumask\fP"
.br
.ti -1c
.RI "int \fBnumProcessors\fP"
.br
.ti -1c
.RI "int \fBbeginTime\fP"
.br
.ti -1c
.RI "int \fBtermTime\fP"
.br
.ti -1c
.RI "int \fBsigValue\fP"
.br
.ti -1c
.RI "int \fBrestartPid\fP"
.br
.ti -1c
.RI "char * \fBjobName\fP"
.br
.ti -1c
.RI "char * \fBqueue\fP"
.br
.ti -1c
.RI "int \fBnumAskedHosts\fP"
.br
.ti -1c
.RI "char ** \fBaskedHosts\fP"
.br
.ti -1c
.RI "char * \fBresReq\fP"
.br
.ti -1c
.RI "int \fBrLimits\fP [LSF_RLIM_NLIMITS]"
.br
.ti -1c
.RI "char * \fBhostSpec\fP"
.br
.ti -1c
.RI "char * \fBdependCond\fP"
.br
.ti -1c
.RI "char * \fBtimeEvent\fP"
.br
.ti -1c
.RI "char * \fBsubHomeDir\fP"
.br
.ti -1c
.RI "char * \fBinFile\fP"
.br
.ti -1c
.RI "char * \fBoutFile\fP"
.br
.ti -1c
.RI "char * \fBerrFile\fP"
.br
.ti -1c
.RI "char * \fBcommand\fP"
.br
.ti -1c
.RI "char * \fBinFileSpool\fP"
.br
.ti -1c
.RI "char * \fBcommandSpool\fP"
.br
.ti -1c
.RI "int \fBchkpntPeriod\fP"
.br
.ti -1c
.RI "char * \fBchkpntDir\fP"
.br
.ti -1c
.RI "int \fBnxf\fP"
.br
.ti -1c
.RI "struct \fBxFile\fP * \fBxf\fP"
.br
.ti -1c
.RI "char * \fBjobFile\fP"
.br
.ti -1c
.RI "char * \fBfromHost\fP"
.br
.ti -1c
.RI "char * \fBcwd\fP"
.br
.ti -1c
.RI "char * \fBpreExecCmd\fP"
.br
.ti -1c
.RI "char * \fBmailUser\fP"
.br
.ti -1c
.RI "char * \fBprojectName\fP"
.br
.ti -1c
.RI "int \fBniosPort\fP"
.br
.ti -1c
.RI "int \fBmaxNumProcessors\fP"
.br
.ti -1c
.RI "char * \fBloginShell\fP"
.br
.ti -1c
.RI "char * \fBschedHostType\fP"
.br
.ti -1c
.RI "char * \fBuserGroup\fP"
.br
.ti -1c
.RI "char * \fBexceptList\fP"
.br
.ti -1c
.RI "int \fBuserPriority\fP"
.br
.ti -1c
.RI "char * \fBrsvId\fP"
.br
.ti -1c
.RI "char * \fBextsched\fP"
.br
.ti -1c
.RI "int \fBwarningTimePeriod\fP"
.br
.ti -1c
.RI "char * \fBwarningAction\fP"
.br
.ti -1c
.RI "char * \fBjobGroup\fP"
.br
.ti -1c
.RI "char * \fBsla\fP"
.br
.ti -1c
.RI "char * \fBlicenseProject\fP"
.br
.ti -1c
.RI "int \fBoptions3\fP"
.br
.ti -1c
.RI "int \fBdelOptions3\fP"
.br
.ti -1c
.RI "char * \fBapp\fP"
.br
.ti -1c
.RI "char * \fBapsString\fP"
.br
.ti -1c
.RI "char * \fBpostExecCmd\fP"
.br
.ti -1c
.RI "int \fBruntimeEstimation\fP"
.br
.ti -1c
.RI "char * \fBrequeueEValues\fP"
.br
.ti -1c
.RI "int \fBinitChkpntPeriod\fP"
.br
.ti -1c
.RI "int \fBmigThreshold\fP"
.br
.ti -1c
.RI "char * \fBnotifyCmd\fP"
.br
.ti -1c
.RI "char * \fBjobDescription\fP"
.br
.ti -1c
.RI "struct \fBsubmit_ext\fP * \fBsubmitExt\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job modified log. 
.SH "Field Documentation"
.PP 
.SS "char* \fBjobModLog::jobIdStr\fP"
.PP
JobId or jobName in char. 
.PP
.SS "int \fBjobModLog::options\fP"
.PP
Job submission options(See \fBlsb_submit\fP). 
.PP
.SS "int \fBjobModLog::options2\fP"
.PP
Job submission options(See \fBlsb_submit\fP). 
.PP
.SS "int \fBjobModLog::delOptions\fP"
.PP
Delete options in options field. 
.PP
.SS "int \fBjobModLog::delOptions2\fP"
.PP
Extended delete options in options2 field . 
.PP

.SS "int \fBjobModLog::userId\fP"
.PP
The user ID of the submitter. 
.PP
.SS "char* \fBjobModLog::userName\fP"
.PP
The name of the submitter. 
.PP
.SS "int \fBjobModLog::submitTime\fP"
.PP
The job submission time. 
.PP
.SS "int \fBjobModLog::umask\fP"
.PP
The file creation mask for this job. 
.PP
.SS "int \fBjobModLog::numProcessors\fP"
.PP
The number of processors requested for execution. 
.PP
.SS "int \fBjobModLog::beginTime\fP"
.PP
The job should be started on or after this time. 
.PP
.SS "int \fBjobModLog::termTime\fP"
.PP
If the job has not finished by this time, it will be killed. 
.PP
.SS "int \fBjobModLog::sigValue\fP"
.PP
The signal value sent to the job 10 minutes before its run window closes. 
.PP
.SS "int \fBjobModLog::restartPid\fP"
.PP
The process ID assigned to the job when it was restarted. 
.PP
.SS "char* \fBjobModLog::jobName\fP"
.PP
The job name. 
.PP
.SS "char* \fBjobModLog::queue\fP"
.PP
The name of the queue to which this job was submitted. 
.PP
.SS "int \fBjobModLog::numAskedHosts\fP"
.PP
The number of hosts considered for dispatching this job. 
.PP
.SS "char** \fBjobModLog::askedHosts\fP"
.PP
List of asked hosts. 
.PP
.SS "char* \fBjobModLog::resReq\fP"
.PP
The resource requirements of the job. 
.PP
.SS "int \fBjobModLog::rLimits\fP[LSF_RLIM_NLIMITS]"
.PP
User's resource limits (soft). 
.PP
.SS "char* \fBjobModLog::hostSpec\fP"
.PP
The model, host name or host type for scaling CPULIMIT and RUNLIMIT. 
.PP
.SS "char* \fBjobModLog::dependCond\fP"
.PP
The job dependency condition. 
.PP
.SS "char* \fBjobModLog::timeEvent\fP"
.PP
Time event string. 
.PP

.SS "char* \fBjobModLog::subHomeDir\fP"
.PP
The home directory of the submitter. 
.PP
.SS "char* \fBjobModLog::inFile\fP"
.PP
The input file name. 
.PP
.SS "char* \fBjobModLog::outFile\fP"
.PP
The output file name. 
.PP
.SS "char* \fBjobModLog::errFile\fP"
.PP
The error output file name. 
.PP
.SS "char* \fBjobModLog::command\fP"
.PP
Command description - this is really a job description field. 
.PP
.SS "char* \fBjobModLog::inFileSpool\fP"
.PP
Job spool input file. 
.PP
.SS "char* \fBjobModLog::commandSpool\fP"
.PP
Job spool command file. 
.PP
.SS "int \fBjobModLog::chkpntPeriod\fP"
.PP
The checkpointing period. 
.PP
.SS "char* \fBjobModLog::chkpntDir\fP"
.PP
The checkpoint directory. 
.PP
.SS "int \fBjobModLog::nxf\fP"
.PP
The number of files to transfer. 
.PP
.SS "struct \fBxFile\fP* \fBjobModLog::xf\fP"
.PP
The array of file transfer specifications. 
.PP
(The \fBxFile\fP structure is defined in <lsf/lsbatch.h>) 
.SS "char* \fBjobModLog::jobFile\fP"
.PP
The job file name: If == '\\0', indicate let mbatchd make up name, otherwise, mbatchd will use given name. 
.PP
It is '\\0' if it is a regular job,non-nil means it is a restart job. 
.SS "char* \fBjobModLog::fromHost\fP"
.PP
The submission host name. 
.PP
.SS "char* \fBjobModLog::cwd\fP"
.PP
The current working directory. 
.PP
.SS "char* \fBjobModLog::preExecCmd\fP"
.PP
The pre-execution command. 
.PP
.SS "char* \fBjobModLog::mailUser\fP"
.PP
User option mail string. 
.PP
.SS "char* \fBjobModLog::projectName\fP"
.PP
Project name for the job; used for accounting purposes. 
.PP
.SS "int \fBjobModLog::niosPort\fP"
.PP
NIOS callback port to be used for interactive jobs. 
.PP
.SS "int \fBjobModLog::maxNumProcessors\fP"
.PP
Maximum number of processors. 
.PP
.SS "char* \fBjobModLog::loginShell\fP"
.PP
The login shell specified by user. 
.PP
.SS "char* \fBjobModLog::schedHostType\fP"
.PP
Restart job's submission host type. 
.PP
.SS "char* \fBjobModLog::userGroup\fP"
.PP
The user group name for this job. 
.PP
.SS "char* \fBjobModLog::exceptList\fP"
.PP
List of job exception conditions. 
.PP
.SS "int \fBjobModLog::userPriority\fP"
.PP
User priority. 
.PP
.SS "char* \fBjobModLog::rsvId\fP"
.PP
Advance reservation ID. 
.PP
.SS "char* \fBjobModLog::extsched\fP"
.PP
External scheduling options. 
.PP
.SS "int \fBjobModLog::warningTimePeriod\fP"
.PP
Job warning time period in seconds; -1 if unspecified. 
.PP
.SS "char* \fBjobModLog::warningAction\fP"
.PP
Job warning action: SIGNAL | CHKPNT | command; NULL if unspecified. 
.PP
.SS "char* \fBjobModLog::jobGroup\fP"
.PP
The job group under which the job runs. 
.PP
.SS "char* \fBjobModLog::sla\fP"
.PP
SLA service class name under which the job runs. 
.PP
.SS "char* \fBjobModLog::licenseProject\fP"
.PP
LSF License Scheduler project name. 
.PP
.SS "int \fBjobModLog::options3\fP"
.PP
Extended bitwise inclusive OR of options flags. 
.PP
see \fBlsb_submit\fP. 
.SS "int \fBjobModLog::delOptions3\fP"
.PP
Extended delete options in options3 field. 
.PP

.SS "char* \fBjobModLog::app\fP"
.PP
Application profile under which the job runs. 
.PP

.SS "char* \fBjobModLog::apsString\fP"
.PP
Absolute priority scheduling string set by administrators to denote static system APS value or ADMIN factor APS value. 
.PP
.SS "char* \fBjobModLog::postExecCmd\fP"
.PP
Post-execution commands. 
.PP

.SS "int \fBjobModLog::runtimeEstimation\fP"
.PP
Runtime estimate. 
.PP

.SS "char* \fBjobModLog::requeueEValues\fP"
.PP
Job-level requeue exit values. 
.PP

.SS "int \fBjobModLog::initChkpntPeriod\fP"
.PP
Initial checkpoint period. 
.PP
.SS "int \fBjobModLog::migThreshold\fP"
.PP
Job migration threshold. 
.PP

.SS "char* \fBjobModLog::notifyCmd\fP"
.PP
Resize notify command. 
.PP
.SS "char* \fBjobModLog::jobDescription\fP"
.PP
Job description. 
.PP

.SS "struct \fBsubmit_ext\fP* \fBjobModLog::submitExt\fP"
.PP
For new options in future. 
.PP


.ad l
.nh
.SH NAME
jobStartLog \- logged in lsb.events when a job is started.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBjStatus\fP"
.br
.ti -1c
.RI "int \fBjobPid\fP"
.br
.ti -1c
.RI "int \fBjobPGid\fP"
.br
.ti -1c
.RI "float \fBhostFactor\fP"
.br
.ti -1c
.RI "int \fBnumExHosts\fP"
.br
.ti -1c
.RI "char ** \fBexecHosts\fP"
.br
.ti -1c
.RI "char * \fBqueuePreCmd\fP"
.br
.ti -1c
.RI "char * \fBqueuePostCmd\fP"
.br
.ti -1c
.RI "int \fBjFlags\fP"
.br
.ti -1c
.RI "char * \fBuserGroup\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "char * \fBadditionalInfo\fP"
.br
.ti -1c
.RI "int \fBduration4PreemptBackfill\fP"
.br
.ti -1c
.RI "int \fBjFlags2\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
logged in lsb.events when a job is started. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobStartLog::jobId\fP"
.PP
The unique ID for the job. 
.PP
.SS "int \fBjobStartLog::jStatus\fP"
.PP
The status of the job (see \fBlsb_readjobinfo\fP ). 
.PP
.SS "int \fBjobStartLog::jobPid\fP"
.PP
The job process ID. 
.PP
.SS "int \fBjobStartLog::jobPGid\fP"
.PP
The job process group ID. 
.PP
.SS "float \fBjobStartLog::hostFactor\fP"
.PP
The CPU factor of the first execution host. 
.PP
.SS "int \fBjobStartLog::numExHosts\fP"
.PP
The number of processors used for execution. 
.PP
.SS "char** \fBjobStartLog::execHosts\fP"
.PP
The array of execution host names. 
.PP
.SS "char* \fBjobStartLog::queuePreCmd\fP"
.PP
Pre-execution command defined in the queue. 
.PP
.SS "char* \fBjobStartLog::queuePostCmd\fP"
.PP
Post-execution command defined in the queue. 
.PP
.SS "int \fBjobStartLog::jFlags\fP"
.PP
Job processing flags. 
.PP
.SS "char* \fBjobStartLog::userGroup\fP"
.PP
The user group name for this job. 
.PP
.SS "int \fBjobStartLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP
.SS "char* \fBjobStartLog::additionalInfo\fP"
.PP
Placement information of LSF HPC jobs. 
.PP
.SS "int \fBjobStartLog::duration4PreemptBackfill\fP"
.PP
How long a backfilled job can run; used for preemption backfill jobs. 
.PP
.SS "int \fBjobStartLog::jFlags2\fP"
.PP
Job Flags2. 
.PP


.ad l
.nh
.SH NAME
jobStartAcceptLog \- logged in lsb.events when a job start request is accepted.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBjobPid\fP"
.br
.ti -1c
.RI "int \fBjobPGid\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
logged in lsb.events when a job start request is accepted. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobStartAcceptLog::jobId\fP"
.PP
The unique ID for the job. 
.PP
.SS "int \fBjobStartAcceptLog::jobPid\fP"
.PP
The job process ID. 
.PP
.SS "int \fBjobStartAcceptLog::jobPGid\fP"
.PP
The job process group ID. 
.PP
.SS "int \fBjobStartAcceptLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP


.ad l
.nh
.SH NAME
jobExecuteLog \- logged in lsb.events when a job is executed.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBexecUid\fP"
.br
.ti -1c
.RI "char * \fBexecHome\fP"
.br
.ti -1c
.RI "char * \fBexecCwd\fP"
.br
.ti -1c
.RI "int \fBjobPGid\fP"
.br
.ti -1c
.RI "char * \fBexecUsername\fP"
.br
.ti -1c
.RI "int \fBjobPid\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "char * \fBadditionalInfo\fP"
.br
.ti -1c
.RI "int \fBSLAscaledRunLimit\fP"
.br
.ti -1c
.RI "int \fBposition\fP"
.br
.ti -1c
.RI "char * \fBexecRusage\fP"
.br
.ti -1c
.RI "int \fBduration4PreemptBackfill\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
logged in lsb.events when a job is executed. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobExecuteLog::jobId\fP"
.PP
The unique ID for the job. 
.PP
.SS "int \fBjobExecuteLog::execUid\fP"
.PP
User ID under which the job is running. 
.PP
.SS "char* \fBjobExecuteLog::execHome\fP"
.PP
Home directory of the user denoted by execUid. 
.PP
.SS "char* \fBjobExecuteLog::execCwd\fP"
.PP
Current working directory where job is running. 
.PP
.SS "int \fBjobExecuteLog::jobPGid\fP"
.PP
The job process group ID. 
.PP
.SS "char* \fBjobExecuteLog::execUsername\fP"
.PP
User name under which the job is running. 
.PP
.SS "int \fBjobExecuteLog::jobPid\fP"
.PP
The job process ID. 
.PP
.SS "int \fBjobExecuteLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP
.SS "char* \fBjobExecuteLog::additionalInfo\fP"
.PP
Placement information of LSF HPC jobs. 
.PP
.SS "int \fBjobExecuteLog::SLAscaledRunLimit\fP"
.PP
The run limit scaled by the exec host. 
.PP
.SS "int \fBjobExecuteLog::position\fP"
.PP
The position of the job. 
.PP
.SS "char* \fBjobExecuteLog::execRusage\fP"
.PP
The rusage satisfied at job runtime. 
.PP
.SS "int \fBjobExecuteLog::duration4PreemptBackfill\fP"
.PP
The duration for preemptive backfill class in seconds. 
.PP


.ad l
.nh
.SH NAME
jobStatusLog \- logged when a job's status is changed.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBjStatus\fP"
.br
.ti -1c
.RI "int \fBreason\fP"
.br
.ti -1c
.RI "int \fBsubreasons\fP"
.br
.ti -1c
.RI "float \fBcpuTime\fP"
.br
.ti -1c
.RI "time_t \fBendTime\fP"
.br
.ti -1c
.RI "int \fBru\fP"
.br
.ti -1c
.RI "struct \fBlsfRusage\fP \fBlsfRusage\fP"
.br
.ti -1c
.RI "int \fBjFlags\fP"
.br
.ti -1c
.RI "int \fBexitStatus\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "int \fBexitInfo\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
logged when a job's status is changed. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobStatusLog::jobId\fP"
.PP
The unique ID for the job. 
.PP
.SS "int \fBjobStatusLog::jStatus\fP"
.PP
The job status (see \fBlsb_readjobinfo\fP ). 
.PP
.SS "int \fBjobStatusLog::reason\fP"
.PP
The reason the job is pending or suspended (see \fBlsb_pendreason\fP and \fBlsb_suspreason\fP ). 
.PP
.SS "int \fBjobStatusLog::subreasons\fP"
.PP
The load indices that have overloaded the host (see \fBlsb_pendreason\fP and \fBlsb_suspreason\fP ). 
.PP
.SS "float \fBjobStatusLog::cpuTime\fP"
.PP
The CPU time consumed before this event occurred. 
.PP
.SS "time_t \fBjobStatusLog::endTime\fP"
.PP
The job completion time. 
.PP
.SS "int \fBjobStatusLog::ru\fP"
.PP
Boolean indicating \fBlsfRusage\fP is logged. 
.PP
.SS "struct \fBlsfRusage\fP \fBjobStatusLog::lsfRusage\fP"
.PP
Resource usage statistics The \fBlsfRusage\fP structure is defined in <lsf/lsf.h>. 
.PP
Note that the availability of certain fields depends on the platform on which the sbatchd runs. The fields that do not make sense on the platform will be logged as -1.0. 
.SS "int \fBjobStatusLog::jFlags\fP"
.PP
Job exit status. 
.PP
.SS "int \fBjobStatusLog::exitStatus\fP"
.PP
Job's exit status. 
.PP
.SS "int \fBjobStatusLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP
.SS "int \fBjobStatusLog::exitInfo\fP"
.PP
Job termination reason, see <lsf/lsbatch.h>. 
.PP


.ad l
.nh
.SH NAME
sbdJobStatusLog \- logged when a job's status is changed  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBjStatus\fP"
.br
.ti -1c
.RI "int \fBreasons\fP"
.br
.ti -1c
.RI "int \fBsubreasons\fP"
.br
.ti -1c
.RI "int \fBactPid\fP"
.br
.ti -1c
.RI "int \fBactValue\fP"
.br
.ti -1c
.RI "time_t \fBactPeriod\fP"
.br
.ti -1c
.RI "int \fBactFlags\fP"
.br
.ti -1c
.RI "int \fBactStatus\fP"
.br
.ti -1c
.RI "int \fBactReasons\fP"
.br
.ti -1c
.RI "int \fBactSubReasons\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "int \fBsigValue\fP"
.br
.ti -1c
.RI "int \fBexitInfo\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
logged when a job's status is changed 
.SH "Field Documentation"
.PP 
.SS "int \fBsbdJobStatusLog::jobId\fP"
.PP
The unique ID for the job. 
.PP
.SS "int \fBsbdJobStatusLog::jStatus\fP"
.PP
The status of the job (see \fBlsb_readjobinfo\fP). 
.PP
.SS "int \fBsbdJobStatusLog::reasons\fP"
.PP
The reason the job is pending or suspended (See \fBlsb_pendreason\fP and \fBlsb_suspreason\fP). 
.PP
.SS "int \fBsbdJobStatusLog::subreasons\fP"
.PP
The load indices that have overloaded the host (See \fBlsb_pendreason\fP and \fBlsb_suspreason\fP). 
.PP
.SS "int \fBsbdJobStatusLog::actPid\fP"
.PP
Action process ID. 
.PP
.SS "int \fBsbdJobStatusLog::actValue\fP"
.PP
Action Value SIG_CHKPNT | SIG_CHKPNT_COPY | SIG_WARNING. 
.PP
.SS "time_t \fBsbdJobStatusLog::actPeriod\fP"
.PP
Action period. 
.PP
.SS "int \fBsbdJobStatusLog::actFlags\fP"
.PP
Action flag. 
.PP
.SS "int \fBsbdJobStatusLog::actStatus\fP"
.PP
Action logging status. 
.PP
.SS "int \fBsbdJobStatusLog::actReasons\fP"
.PP
Action Reason SUSP_MBD_LOCK | SUSP_USER_STOP | SUSP_USER_RESUME | SUSP_SBD_STARTUP. 
.PP
.SS "int \fBsbdJobStatusLog::actSubReasons\fP"
.PP
Sub Reason SUB_REASON_RUNLIMIT | SUB_REASON_DEADLINE |SUB_REASON_PROCESSLIMIT | SUB_REASON_MEMLIMIT |SUB_REASON_CPULIMIT. 
.PP
.SS "int \fBsbdJobStatusLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP
.SS "int \fBsbdJobStatusLog::sigValue\fP"
.PP
The signal value. 
.PP
.SS "int \fBsbdJobStatusLog::exitInfo\fP"
.PP
The termination reason of a job. 
.PP


.ad l
.nh
.SH NAME
sbdUnreportedStatusLog \- job status that we could send to MBD  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBactPid\fP"
.br
.ti -1c
.RI "int \fBjobPid\fP"
.br
.ti -1c
.RI "int \fBjobPGid\fP"
.br
.ti -1c
.RI "int \fBnewStatus\fP"
.br
.ti -1c
.RI "int \fBreason\fP"
.br
.ti -1c
.RI "int \fBsubreasons\fP"
.br
.ti -1c
.RI "struct \fBlsfRusage\fP \fBlsfRusage\fP"
.br
.ti -1c
.RI "int \fBexecUid\fP"
.br
.ti -1c
.RI "int \fBexitStatus\fP"
.br
.ti -1c
.RI "char * \fBexecCwd\fP"
.br
.ti -1c
.RI "char * \fBexecHome\fP"
.br
.ti -1c
.RI "char * \fBexecUsername\fP"
.br
.ti -1c
.RI "int \fBmsgId\fP"
.br
.ti -1c
.RI "struct \fBjRusage\fP \fBrunRusage\fP"
.br
.ti -1c
.RI "int \fBsigValue\fP"
.br
.ti -1c
.RI "int \fBactStatus\fP"
.br
.ti -1c
.RI "int \fBseq\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "int \fBexitInfo\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job status that we could send to MBD 
.SH "Field Documentation"
.PP 
.SS "int \fBsbdUnreportedStatusLog::jobId\fP"
.PP
The unique ID for the job. 
.PP
.SS "int \fBsbdUnreportedStatusLog::actPid\fP"
.PP
Action process ID. 
.PP
.SS "int \fBsbdUnreportedStatusLog::jobPid\fP"
.PP
The job process ID. 
.PP
.SS "int \fBsbdUnreportedStatusLog::jobPGid\fP"
.PP
The job process group ID. 
.PP
.SS "int \fBsbdUnreportedStatusLog::newStatus\fP"
.PP
New status of the job. 
.PP
.SS "int \fBsbdUnreportedStatusLog::reason\fP"
.PP
Pending or suspending reason code. 
.PP
.SS "int \fBsbdUnreportedStatusLog::subreasons\fP"
.PP
Pending or suspending subreason code. 
.PP
.SS "struct \fBlsfRusage\fP \fBsbdUnreportedStatusLog::lsfRusage\fP"
.PP
Resource usage information for the job (see \fBjobFinishLog\fP). 
.PP
.SS "int \fBsbdUnreportedStatusLog::execUid\fP"
.PP
User ID under which the job is running. 
.PP
.SS "int \fBsbdUnreportedStatusLog::exitStatus\fP"
.PP
Job exit status. 
.PP
.SS "char* \fBsbdUnreportedStatusLog::execCwd\fP"
.PP
Current working directory where job is running. 
.PP
.SS "char* \fBsbdUnreportedStatusLog::execHome\fP"
.PP
Home directory of the user denoted by execUid. 
.PP
.SS "char* \fBsbdUnreportedStatusLog::execUsername\fP"
.PP
User name under which the job is running. 
.PP
.SS "int \fBsbdUnreportedStatusLog::msgId\fP"
.PP
Message index. 
.PP
.SS "struct \fBjRusage\fP \fBsbdUnreportedStatusLog::runRusage\fP"
.PP
Job's resource usage. 
.PP
.SS "int \fBsbdUnreportedStatusLog::sigValue\fP"
.PP
Signal value. 
.PP
.SS "int \fBsbdUnreportedStatusLog::actStatus\fP"
.PP
Action logging status. 
.PP
.SS "int \fBsbdUnreportedStatusLog::seq\fP"
.PP
Sequence status of the job. 
.PP
.SS "int \fBsbdUnreportedStatusLog::idx\fP"
.PP
Job array index. 
.PP
.SS "int \fBsbdUnreportedStatusLog::exitInfo\fP"
.PP
The termination reason of a job. 
.PP


.ad l
.nh
.SH NAME
jobSwitchLog \- logged when a job is switched to another queue  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "char \fBqueue\fP [MAX_LSB_NAME_LEN]"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "char \fBuserName\fP [MAX_LSB_NAME_LEN]"
.br
.in -1c
.SH "Detailed Description"
.PP 
logged when a job is switched to another queue 
.SH "Field Documentation"
.PP 
.SS "int \fBjobSwitchLog::userId\fP"
.PP
The user ID of the submitter. 
.PP
.SS "int \fBjobSwitchLog::jobId\fP"
.PP
The unique ID of the job. 
.PP
.SS "char \fBjobSwitchLog::queue\fP[MAX_LSB_NAME_LEN]"
.PP
The name of the queue the job has been switched to. 
.PP
.SS "int \fBjobSwitchLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP
.SS "char \fBjobSwitchLog::userName\fP[MAX_LSB_NAME_LEN]"
.PP
The name of the submitter. 
.PP


.ad l
.nh
.SH NAME
jobMoveLog \- logged when a job is moved to another position  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBposition\fP"
.br
.ti -1c
.RI "int \fBbase\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "char \fBuserName\fP [MAX_LSB_NAME_LEN]"
.br
.in -1c
.SH "Detailed Description"
.PP 
logged when a job is moved to another position 
.SH "Field Documentation"
.PP 
.SS "int \fBjobMoveLog::userId\fP"
.PP
The user ID of the submitter. 
.PP
.SS "int \fBjobMoveLog::jobId\fP"
.PP
The unique ID of the job. 
.PP
.SS "int \fBjobMoveLog::position\fP"
.PP
The new position of the job. 
.PP
.SS "int \fBjobMoveLog::base\fP"
.PP
The operation code for the move (see \fBlsb_movejob\fP). 
.PP
.SS "int \fBjobMoveLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP
.SS "char \fBjobMoveLog::userName\fP[MAX_LSB_NAME_LEN]"
.PP
The name of the submitter. 
.PP


.ad l
.nh
.SH NAME
chkpntLog \- check point log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "time_t \fBperiod\fP"
.br
.ti -1c
.RI "int \fBpid\fP"
.br
.ti -1c
.RI "int \fBok\fP"
.br
.ti -1c
.RI "int \fBflags\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
check point log. 
.SH "Field Documentation"
.PP 
.SS "int \fBchkpntLog::jobId\fP"
.PP
The unique ID of the job. 
.PP
.SS "time_t \fBchkpntLog::period\fP"
.PP
The new checkpointing period. 
.PP
.SS "int \fBchkpntLog::pid\fP"
.PP
The process ID of the checkpointing process (a child sbatchd). 
.PP
.SS "int \fBchkpntLog::ok\fP"
.PP
0: checkpoint started; 1: checkpoint succeeded 
.PP
.SS "int \fBchkpntLog::flags\fP"
.PP
One of the following: 
.br
 LSB_CHKPNT_KILL : Kill process if checkpoint successful 
.br
 LSB_CHKPNT_FORCE : Force checkpoint even if non-checkpointable conditions exist 
.br
 LSB_CHKPNT_MIG : Checkpoint for the purpose of migration. 
.PP
.SS "int \fBchkpntLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP


.ad l
.nh
.SH NAME
jobRequeueLog \- job requeue log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job requeue log. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobRequeueLog::jobId\fP"
.PP
The unique ID of the job. 
.PP
.SS "int \fBjobRequeueLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP


.ad l
.nh
.SH NAME
jobCleanLog \- job clean log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job clean log. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobCleanLog::jobId\fP"
.PP
The unique ID for the job. 
.PP
.SS "int \fBjobCleanLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP


.ad l
.nh
.SH NAME
jobExceptionLog \- job exception log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBexceptMask\fP"
.br
.ti -1c
.RI "int \fBactMask\fP"
.br
.ti -1c
.RI "time_t \fBtimeEvent\fP"
.br
.ti -1c
.RI "int \fBexceptInfo\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job exception log. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobExceptionLog::jobId\fP"
.PP
The unique ID for the job. 
.PP
.SS "int \fBjobExceptionLog::exceptMask\fP"
.PP
Job exception handling mask. 
.PP
.SS "int \fBjobExceptionLog::actMask\fP"
.PP
Action Id (kill | alarm | rerun | setexcept). 
.PP
.SS "time_t \fBjobExceptionLog::timeEvent\fP"
.PP
Time event string. 
.PP
.SS "int \fBjobExceptionLog::exceptInfo\fP"
.PP
Except Info, pending reason for missched or cantrun exception, the exit code of the job for the abend exception, otherwise 0. 
.PP

.SS "int \fBjobExceptionLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP


.ad l
.nh
.SH NAME
sigactLog \- signal action log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "time_t \fBperiod\fP"
.br
.ti -1c
.RI "int \fBpid\fP"
.br
.ti -1c
.RI "int \fBjStatus\fP"
.br
.ti -1c
.RI "int \fBreasons\fP"
.br
.ti -1c
.RI "int \fBflags\fP"
.br
.ti -1c
.RI "char * \fBsignalSymbol\fP"
.br
.ti -1c
.RI "int \fBactStatus\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
signal action log. 
.SH "Field Documentation"
.PP 
.SS "int \fBsigactLog::jobId\fP"
.PP
The unique ID of the job. 
.PP
.SS "time_t \fBsigactLog::period\fP"
.PP
Action period. 
.PP
.SS "int \fBsigactLog::pid\fP"
.PP
Action process ID. 
.PP
.SS "int \fBsigactLog::jStatus\fP"
.PP
Job status. 
.PP
.SS "int \fBsigactLog::reasons\fP"
.PP
Pending reasons. 
.PP
.SS "int \fBsigactLog::flags\fP"
.PP
Action flag. 
.PP
.SS "char* \fBsigactLog::signalSymbol\fP"
.PP
Signal symbol from the set: DELETEJOB | KILL | KILLREQUEUE |REQUEUE_DONE | REQUEUE_EXIT | REQUEUE_PEND |REQUEUE_PSUSP_ADMIN | REQUEUE_PSUSP_USER | SIG_CHKPNT | SIG_CHKPNT_COPY. 
.PP
.SS "int \fBsigactLog::actStatus\fP"
.PP
Action logging status (ACT_NO | ACT_START | ACT_PREEMPT | ACT_DONE | ACT_FAIL) .Shown in signal_action. 
.PP
.SS "int \fBsigactLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP


.ad l
.nh
.SH NAME
migLog \- migration log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBnumAskedHosts\fP"
.br
.ti -1c
.RI "char ** \fBaskedHosts\fP"
.br
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "char \fBuserName\fP [MAX_LSB_NAME_LEN]"
.br
.in -1c
.SH "Detailed Description"
.PP 
migration log. 
.SH "Field Documentation"
.PP 
.SS "int \fBmigLog::jobId\fP"
.PP
The job to be migrated. 
.PP
.SS "int \fBmigLog::numAskedHosts\fP"
.PP
The number of candidate hosts for migration. 
.PP
.SS "char** \fBmigLog::askedHosts\fP"
.PP
The array of candidate host names. 
.PP
.SS "int \fBmigLog::userId\fP"
.PP
The user ID of the submitter. 
.PP
.SS "int \fBmigLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP
.SS "char \fBmigLog::userName\fP[MAX_LSB_NAME_LEN]"
.PP
The user name of the submitter. 
.PP


.ad l
.nh
.SH NAME
signalLog \- signal log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "char * \fBsignalSymbol\fP"
.br
.ti -1c
.RI "int \fBrunCount\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "char \fBuserName\fP [MAX_LSB_NAME_LEN]"
.br
.in -1c
.SH "Detailed Description"
.PP 
signal log. 
.SH "Field Documentation"
.PP 
.SS "int \fBsignalLog::userId\fP"
.PP
The user ID of the submitter. 
.PP
.SS "int \fBsignalLog::jobId\fP"
.PP
The unique ID of the job. 
.PP
.SS "char* \fBsignalLog::signalSymbol\fP"
.PP
Signal symbol from the set: DELETEJOB | KILL | KILLREQUEUE |REQUEUE_DONE | REQUEUE_EXIT | REQUEUE_PEND |REQUEUE_PSUSP_ADMIN | REQUEUE_PSUSP_USER | SIG_CHKPNT | SIG_CHKPNT_COPY. 
.PP
.SS "int \fBsignalLog::runCount\fP"
.PP
The number of running times. 
.PP
.SS "int \fBsignalLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP
.SS "char \fBsignalLog::userName\fP[MAX_LSB_NAME_LEN]"
.PP
The name of the submitter. 
.PP


.ad l
.nh
.SH NAME
queueCtrlLog \- logged when bqc command is invoked.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBopCode\fP"
.br
.ti -1c
.RI "char \fBqueue\fP [MAX_LSB_NAME_LEN]"
.br
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "char \fBuserName\fP [MAX_LSB_NAME_LEN]"
.br
.ti -1c
.RI "char \fBmessage\fP [MAXLINELEN]"
.br
.in -1c
.SH "Detailed Description"
.PP 
logged when bqc command is invoked. 
.SH "Field Documentation"
.PP 
.SS "int \fBqueueCtrlLog::opCode\fP"
.PP
The queue control operation (see \fBlsb_queuecontrol\fP). 
.PP
.SS "char \fBqueueCtrlLog::queue\fP[MAX_LSB_NAME_LEN]"
.PP
The name of the queue. 
.PP
.SS "int \fBqueueCtrlLog::userId\fP"
.PP
The user ID of the submitter. 
.PP
.SS "char \fBqueueCtrlLog::userName\fP[MAX_LSB_NAME_LEN]"
.PP
The name of the submitter. 
.PP
.SS "char \fBqueueCtrlLog::message\fP[MAXLINELEN]"
.PP
Queue control message. 
.PP


.ad l
.nh
.SH NAME
hostCtrlLog \- log the host control information.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBopCode\fP"
.br
.ti -1c
.RI "char \fBhost\fP [MAXHOSTNAMELEN]"
.br
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "char \fBuserName\fP [MAX_LSB_NAME_LEN]"
.br
.ti -1c
.RI "char \fBmessage\fP [MAXLINELEN]"
.br
.in -1c
.SH "Detailed Description"
.PP 
log the host control information. 
.SH "Field Documentation"
.PP 
.SS "int \fBhostCtrlLog::opCode\fP"
.PP
The host control operation (See \fBlsb_hostcontrol\fP). 
.PP
.SS "char \fBhostCtrlLog::host\fP[MAXHOSTNAMELEN]"
.PP
The name of the host. 
.PP
.SS "int \fBhostCtrlLog::userId\fP"
.PP
The user ID of the submitter. 
.PP
.SS "char \fBhostCtrlLog::userName\fP[MAX_LSB_NAME_LEN]"
.PP
The name of the submitter. 
.PP
.SS "char \fBhostCtrlLog::message\fP[MAXLINELEN]"
.PP
Host control message. 
.PP


.ad l
.nh
.SH NAME
hgCtrlLog \- logged when dynamic hosts are added to group.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBopCode\fP"
.br
.ti -1c
.RI "char \fBhost\fP [MAXHOSTNAMELEN]"
.br
.ti -1c
.RI "char \fBgrpname\fP [MAXHOSTNAMELEN]"
.br
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "char \fBuserName\fP [MAX_LSB_NAME_LEN]"
.br
.ti -1c
.RI "char \fBmessage\fP [MAXLINELEN]"
.br
.in -1c
.SH "Detailed Description"
.PP 
logged when dynamic hosts are added to group. 
.SH "Field Documentation"
.PP 
.SS "int \fBhgCtrlLog::opCode\fP"
.PP
The host control operation (see \fBlsb_hostcontrol\fP). 
.PP
.SS "char \fBhgCtrlLog::host\fP[MAXHOSTNAMELEN]"
.PP
The name of the host. 
.PP
.SS "char \fBhgCtrlLog::grpname\fP[MAXHOSTNAMELEN]"
.PP
The name of the host group. 
.PP
.SS "int \fBhgCtrlLog::userId\fP"
.PP
The user ID of the submitter. 
.PP
.SS "char \fBhgCtrlLog::userName\fP[MAX_LSB_NAME_LEN]"
.PP
The name of the submitter. 
.PP
.SS "char \fBhgCtrlLog::message\fP[MAXLINELEN]"
.PP
Host group control message. 
.PP


.ad l
.nh
.SH NAME
mbdStartLog \- mbatchd start log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char \fBmaster\fP [MAXHOSTNAMELEN]"
.br
.ti -1c
.RI "char \fBcluster\fP [MAXLSFNAMELEN]"
.br
.ti -1c
.RI "int \fBnumHosts\fP"
.br
.ti -1c
.RI "int \fBnumQueues\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
mbatchd start log. 
.SH "Field Documentation"
.PP 
.SS "char \fBmbdStartLog::master\fP[MAXHOSTNAMELEN]"
.PP
The master host name. 
.PP
.SS "char \fBmbdStartLog::cluster\fP[MAXLSFNAMELEN]"
.PP
The cluster name. 
.PP
.SS "int \fBmbdStartLog::numHosts\fP"
.PP
The number of hosts in the cluster. 
.PP
.SS "int \fBmbdStartLog::numQueues\fP"
.PP
The number of queues in the cluster. 
.PP


.ad l
.nh
.SH NAME
mbdDieLog \- mbatchd die log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char \fBmaster\fP [MAXHOSTNAMELEN]"
.br
.ti -1c
.RI "int \fBnumRemoveJobs\fP"
.br
.ti -1c
.RI "int \fBexitCode\fP"
.br
.ti -1c
.RI "char \fBmessage\fP [MAXLINELEN]"
.br
.in -1c
.SH "Detailed Description"
.PP 
mbatchd die log. 
.SH "Field Documentation"
.PP 
.SS "char \fBmbdDieLog::master\fP[MAXHOSTNAMELEN]"
.PP
The master host name. 
.PP
.SS "int \fBmbdDieLog::numRemoveJobs\fP"
.PP
The number of finished jobs that have been removed from the system and logged in the current event file. 
.PP
.SS "int \fBmbdDieLog::exitCode\fP"
.PP
The exit code from the master batch daemon. 
.PP
.SS "char \fBmbdDieLog::message\fP[MAXLINELEN]"
.PP
mbatchd administrator control message 
.PP


.ad l
.nh
.SH NAME
unfulfillLog \- logged before mbatchd dies.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBnotSwitched\fP"
.br
.ti -1c
.RI "int \fBsig\fP"
.br
.ti -1c
.RI "int \fBsig1\fP"
.br
.ti -1c
.RI "int \fBsig1Flags\fP"
.br
.ti -1c
.RI "time_t \fBchkPeriod\fP"
.br
.ti -1c
.RI "int \fBnotModified\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "int \fBmiscOpts4PendSig\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
logged before mbatchd dies. 
.SH "Field Documentation"
.PP 
.SS "int \fBunfulfillLog::jobId\fP"
.PP
The job ID. 
.PP

.SS "int \fBunfulfillLog::notSwitched\fP"
.PP
The mbatchd has switched the job to a new queue but the sbatchd has not been informed of the switch. 
.PP
.SS "int \fBunfulfillLog::sig\fP"
.PP
This signal was not sent to the job. 
.PP
.SS "int \fBunfulfillLog::sig1\fP"
.PP
The job was not signaled to checkpoint itself. 
.PP
.SS "int \fBunfulfillLog::sig1Flags\fP"
.PP
Checkpoint flags. 
.PP
see the \fBchkpntLog\fP structure below. 
.SS "time_t \fBunfulfillLog::chkPeriod\fP"
.PP
The new checkpoint period for the job. 
.PP
.SS "int \fBunfulfillLog::notModified\fP"
.PP
Flag for bmod running job's parameters. 
.PP
.SS "int \fBunfulfillLog::idx\fP"
.PP
Job array index. 
.PP
.SS "int \fBunfulfillLog::miscOpts4PendSig\fP"
.PP
Option flags for pending job signals. 
.PP


.ad l
.nh
.SH NAME
jobFinishLog \- logged in lsb.acct when a job finished.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "char \fBuserName\fP [MAX_LSB_NAME_LEN]"
.br
.ti -1c
.RI "int \fBoptions\fP"
.br
.ti -1c
.RI "int \fBnumProcessors\fP"
.br
.ti -1c
.RI "int \fBjStatus\fP"
.br
.ti -1c
.RI "time_t \fBsubmitTime\fP"
.br
.ti -1c
.RI "time_t \fBbeginTime\fP"
.br
.ti -1c
.RI "time_t \fBtermTime\fP"
.br
.ti -1c
.RI "time_t \fBstartTime\fP"
.br
.ti -1c
.RI "time_t \fBendTime\fP"
.br
.ti -1c
.RI "char \fBqueue\fP [MAX_LSB_NAME_LEN]"
.br
.ti -1c
.RI "char * \fBresReq\fP"
.br
.ti -1c
.RI "char \fBfromHost\fP [MAXHOSTNAMELEN]"
.br
.ti -1c
.RI "char * \fBcwd\fP"
.br
.ti -1c
.RI "char * \fBinFile\fP"
.br
.ti -1c
.RI "char * \fBoutFile\fP"
.br
.ti -1c
.RI "char * \fBerrFile\fP"
.br
.ti -1c
.RI "char * \fBinFileSpool\fP"
.br
.ti -1c
.RI "char * \fBcommandSpool\fP"
.br
.ti -1c
.RI "char * \fBjobFile\fP"
.br
.ti -1c
.RI "int \fBnumAskedHosts\fP"
.br
.ti -1c
.RI "char ** \fBaskedHosts\fP"
.br
.ti -1c
.RI "float \fBhostFactor\fP"
.br
.ti -1c
.RI "int \fBnumExHosts\fP"
.br
.ti -1c
.RI "char ** \fBexecHosts\fP"
.br
.ti -1c
.RI "float \fBcpuTime\fP"
.br
.ti -1c
.RI "char * \fBjobName\fP"
.br
.ti -1c
.RI "char * \fBcommand\fP"
.br
.ti -1c
.RI "struct \fBlsfRusage\fP \fBlsfRusage\fP"
.br
.ti -1c
.RI "char * \fBdependCond\fP"
.br
.ti -1c
.RI "char * \fBtimeEvent\fP"
.br
.ti -1c
.RI "char * \fBpreExecCmd\fP"
.br
.ti -1c
.RI "char * \fBmailUser\fP"
.br
.ti -1c
.RI "char * \fBprojectName\fP"
.br
.ti -1c
.RI "int \fBexitStatus\fP"
.br
.ti -1c
.RI "int \fBmaxNumProcessors\fP"
.br
.ti -1c
.RI "char * \fBloginShell\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "int \fBmaxRMem\fP"
.br
.ti -1c
.RI "int \fBmaxRSwap\fP"
.br
.ti -1c
.RI "char * \fBrsvId\fP"
.br
.ti -1c
.RI "char * \fBsla\fP"
.br
.ti -1c
.RI "int \fBexceptMask\fP"
.br
.ti -1c
.RI "char * \fBadditionalInfo\fP"
.br
.ti -1c
.RI "int \fBexitInfo\fP"
.br
.ti -1c
.RI "int \fBwarningTimePeriod\fP"
.br
.ti -1c
.RI "char * \fBwarningAction\fP"
.br
.ti -1c
.RI "char * \fBchargedSAAP\fP"
.br
.ti -1c
.RI "char * \fBlicenseProject\fP"
.br
.ti -1c
.RI "char * \fBapp\fP"
.br
.ti -1c
.RI "char * \fBpostExecCmd\fP"
.br
.ti -1c
.RI "int \fBruntimeEstimation\fP"
.br
.ti -1c
.RI "char * \fBjgroup\fP"
.br
.ti -1c
.RI "int \fBoptions2\fP"
.br
.ti -1c
.RI "char * \fBrequeueEValues\fP"
.br
.ti -1c
.RI "char * \fBnotifyCmd\fP"
.br
.ti -1c
.RI "time_t \fBlastResizeTime\fP"
.br
.ti -1c
.RI "char * \fBjobDescription\fP"
.br
.ti -1c
.RI "struct \fBsubmit_ext\fP * \fBsubmitExt\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
logged in lsb.acct when a job finished. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobFinishLog::jobId\fP"
.PP
The unique ID for the job. 
.PP
.SS "int \fBjobFinishLog::userId\fP"
.PP
The user ID of the submitter. 
.PP
.SS "char \fBjobFinishLog::userName\fP[MAX_LSB_NAME_LEN]"
.PP
The user name of the submitter. 
.PP
.SS "int \fBjobFinishLog::options\fP"
.PP
Job submission options (see \fBlsb_submit\fP). 
.PP
.SS "int \fBjobFinishLog::numProcessors\fP"
.PP
The number of processors requested for execution. 
.PP
.SS "int \fBjobFinishLog::jStatus\fP"
.PP
The status of the job (See \fBlsb_readjobinfo\fP). 
.PP
.SS "time_t \fBjobFinishLog::submitTime\fP"
.PP
Job submission time. 
.PP
.SS "time_t \fBjobFinishLog::beginTime\fP"
.PP
The job started at or after this time. 
.PP
.SS "time_t \fBjobFinishLog::termTime\fP"
.PP
If the job was not finished by this time, it was killed. 
.PP
.SS "time_t \fBjobFinishLog::startTime\fP"
.PP
Job dispatch time. 
.PP
.SS "time_t \fBjobFinishLog::endTime\fP"
.PP
The time the job finished. 
.PP
.SS "char \fBjobFinishLog::queue\fP[MAX_LSB_NAME_LEN]"
.PP
The name of the queue to which this job was submitted. 
.PP
.SS "char* \fBjobFinishLog::resReq\fP"
.PP
Resource requirements. 
.PP
.SS "char \fBjobFinishLog::fromHost\fP[MAXHOSTNAMELEN]"
.PP
Submission host name. 
.PP
.SS "char* \fBjobFinishLog::cwd\fP"
.PP
Current working directory. 
.PP
.SS "char* \fBjobFinishLog::inFile\fP"
.PP
Input file name. 
.PP
.SS "char* \fBjobFinishLog::outFile\fP"
.PP
Output file name. 
.PP
.SS "char* \fBjobFinishLog::errFile\fP"
.PP
Error output file name. 
.PP
.SS "char* \fBjobFinishLog::inFileSpool\fP"
.PP
Job spool input file. 
.PP
.SS "char* \fBjobFinishLog::commandSpool\fP"
.PP
Job spool command file. 
.PP
.SS "char* \fBjobFinishLog::jobFile\fP"
.PP
Job file name. 
.PP
.SS "int \fBjobFinishLog::numAskedHosts\fP"
.PP
The number of hosts considered for dispatching this job. 
.PP
.SS "char** \fBjobFinishLog::askedHosts\fP"
.PP
The array of names of hosts considered for dispatching this job. 
.PP
.SS "float \fBjobFinishLog::hostFactor\fP"
.PP
The CPU factor of the first execution host. 
.PP
.SS "int \fBjobFinishLog::numExHosts\fP"
.PP
The number of processors used for execution. 
.PP
.SS "char** \fBjobFinishLog::execHosts\fP"
.PP
The array of names of execution hosts. 
.PP
.SS "float \fBjobFinishLog::cpuTime\fP"
.PP
The total CPU time consumed by the job. 
.PP
.SS "char* \fBjobFinishLog::jobName\fP"
.PP
Job name. 
.PP
.SS "char* \fBjobFinishLog::command\fP"
.PP
Job command. 
.PP
.SS "struct \fBlsfRusage\fP \fBjobFinishLog::lsfRusage\fP"
.PP
Resource usage statistics. 
.PP
The \fBlsfRusage\fP structure is defined in <lsf/lsf.h>. Note that the availability of certain fields depends on the platform on which the sbatchd runs. The fields that do not make sense on this platform will be logged as -1.0. 
.SS "char* \fBjobFinishLog::dependCond\fP"
.PP
The job dependency condition. 
.PP
.SS "char* \fBjobFinishLog::timeEvent\fP"
.PP
Time event string. 
.PP
.SS "char* \fBjobFinishLog::preExecCmd\fP"
.PP
The pre-execution command. 
.PP
.SS "char* \fBjobFinishLog::mailUser\fP"
.PP
Name of the user to whom job related mail was sent. 
.PP
.SS "char* \fBjobFinishLog::projectName\fP"
.PP
The project name, used for accounting purposes. 
.PP

.SS "int \fBjobFinishLog::exitStatus\fP"
.PP
Job's exit status. 
.PP
.SS "int \fBjobFinishLog::maxNumProcessors\fP"
.PP
Maximum number of processors specified for the job. 
.PP
.SS "char* \fBjobFinishLog::loginShell\fP"
.PP
Login shell specified by user. 
.PP
.SS "int \fBjobFinishLog::idx\fP"
.PP
Job array index. 
.PP
.SS "int \fBjobFinishLog::maxRMem\fP"
.PP
Maximum memory used by job. 
.PP
.SS "int \fBjobFinishLog::maxRSwap\fP"
.PP
Maximum swap used by job. 
.PP
.SS "char* \fBjobFinishLog::rsvId\fP"
.PP
Advanced reservation ID. 
.PP
.SS "char* \fBjobFinishLog::sla\fP"
.PP
Service class of the job. 
.PP
.SS "int \fBjobFinishLog::exceptMask\fP"
.PP
Job exception handling mask. 
.PP
.SS "char* \fBjobFinishLog::additionalInfo\fP"
.PP
Placement information of LSF HPC jobs. 
.PP
.SS "int \fBjobFinishLog::exitInfo\fP"
.PP
Job termination reason, see <lsf/lsbatch.h>. 
.PP
.SS "int \fBjobFinishLog::warningTimePeriod\fP"
.PP
Job warning time period in seconds; -1 if unspecified. 
.PP
.SS "char* \fBjobFinishLog::warningAction\fP"
.PP
Warning action, SIGNAL | CHKPNT | command, NULL if unspecified. 
.PP
.SS "char* \fBjobFinishLog::chargedSAAP\fP"
.PP
SAAP charged for job. 
.PP
.SS "char* \fBjobFinishLog::licenseProject\fP"
.PP
LSF License Scheduler project name. 
.PP
.SS "char* \fBjobFinishLog::app\fP"
.PP
Application profile under which the job runs. 
.PP

.SS "char* \fBjobFinishLog::postExecCmd\fP"
.PP
Post-execution commands. 
.PP

.SS "int \fBjobFinishLog::runtimeEstimation\fP"
.PP
Runtime estimate specified. 
.PP

.SS "char* \fBjobFinishLog::jgroup\fP"
.PP
Job group name. 
.PP
.SS "int \fBjobFinishLog::options2\fP"
.PP
Option2. 
.PP
.SS "char* \fBjobFinishLog::requeueEValues\fP"
.PP
Job requeue exit values. 
.PP
.SS "char* \fBjobFinishLog::notifyCmd\fP"
.PP
Resize notify command. 
.PP
.SS "time_t \fBjobFinishLog::lastResizeTime\fP"
.PP
Last resize start time. 
.PP
.SS "char* \fBjobFinishLog::jobDescription\fP"
.PP
Job description. 
.PP

.SS "struct \fBsubmit_ext\fP* \fBjobFinishLog::submitExt\fP"
.PP
For new options in future. 
.PP


.ad l
.nh
.SH NAME
loadIndexLog \- load index log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBnIdx\fP"
.br
.ti -1c
.RI "char ** \fBname\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
load index log. 
.SH "Field Documentation"
.PP 
.SS "int \fBloadIndexLog::nIdx\fP"
.PP
The number of load indices. 
.PP
.SS "char** \fBloadIndexLog::name\fP"
.PP
The array of load index names. 
.PP


.ad l
.nh
.SH NAME
calendarLog \- calendar log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBoptions\fP"
.br
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "char * \fBname\fP"
.br
.ti -1c
.RI "char * \fBdesc\fP"
.br
.ti -1c
.RI "char * \fBcalExpr\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
calendar log. 
.SH "Field Documentation"
.PP 
.SS "int \fBcalendarLog::options\fP"
.PP
Reserved for future use. 
.PP
.SS "int \fBcalendarLog::userId\fP"
.PP
The user ID of the submitter. 
.PP
.SS "char* \fBcalendarLog::name\fP"
.PP
The name of the calendar. 
.PP
.SS "char* \fBcalendarLog::desc\fP"
.PP
Description. 
.PP
.SS "char* \fBcalendarLog::calExpr\fP"
.PP
Calendar expression. 
.PP


.ad l
.nh
.SH NAME
jobForwardLog \- job forward log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "char * \fBcluster\fP"
.br
.ti -1c
.RI "int \fBnumReserHosts\fP"
.br
.ti -1c
.RI "char ** \fBreserHosts\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "int \fBjobRmtAttr\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job forward log. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobForwardLog::jobId\fP"
.PP
The unique ID of the job. 
.PP
.SS "char* \fBjobForwardLog::cluster\fP"
.PP
The cluster name. 
.PP
.SS "int \fBjobForwardLog::numReserHosts\fP"
.PP
Number of Reserved Hosts. 
.PP
.SS "char** \fBjobForwardLog::reserHosts\fP"
.PP
Reserved Host Names. 
.PP
.SS "int \fBjobForwardLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP
.SS "int \fBjobForwardLog::jobRmtAttr\fP"
.PP
Remote job attributes from: 
.br
 JOB_FORWARD Remote batch job on submission side 
.br
 JOB_LEASE Lease job on submission side 
.br
 JOB_REMOTE_BATCH Remote batch job on execution side 
.br
 JOB_REMOTE_LEASE Lease job on execution side 
.br
 JOB_LEASE_RESYNC Lease job resync during restart 
.br
 JOB_REMOTE_RERUNNABLE Remote batch job rerunnable on execution cluster. 
.PP


.ad l
.nh
.SH NAME
jobAcceptLog \- job accept log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "LS_LONG_INT \fBremoteJid\fP"
.br
.ti -1c
.RI "char * \fBcluster\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "int \fBjobRmtAttr\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job accept log. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobAcceptLog::jobId\fP"
.PP
The unique ID of the job. 
.PP
.SS "LS_LONG_INT \fBjobAcceptLog::remoteJid\fP"
.PP
The unique ID of the remote job. 
.PP
.SS "char* \fBjobAcceptLog::cluster\fP"
.PP
The cluster name. 
.PP
.SS "int \fBjobAcceptLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP
.SS "int \fBjobAcceptLog::jobRmtAttr\fP"
.PP
Remote job attributes from: 
.br
 JOB_FORWARD Remote batch job on submission side 
.br
 JOB_LEASE Lease job on submission side 
.br
 JOB_REMOTE_BATCH Remote batch job on execution side 
.br
 JOB_REMOTE_LEASE Lease job on execution side 
.br
 JOB_LEASE_RESYNC Lease job resync during restart 
.br
 JOB_REMOTE_RERUNNABLE Remote batch job rerunnable on execution cluster. 
.PP


.ad l
.nh
.SH NAME
statusAckLog \- status Ack log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBstatusNum\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
status Ack log. 
.SH "Field Documentation"
.PP 
.SS "int \fBstatusAckLog::jobId\fP"
.PP
The unique ID of the job. 
.PP
.SS "int \fBstatusAckLog::statusNum\fP"
.PP
Line number of Status. 
.PP
.SS "int \fBstatusAckLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP


.ad l
.nh
.SH NAME
jobMsgLog \- job message log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBusrId\fP"
.br
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBmsgId\fP"
.br
.ti -1c
.RI "int \fBtype\fP"
.br
.ti -1c
.RI "char * \fBsrc\fP"
.br
.ti -1c
.RI "char * \fBdest\fP"
.br
.ti -1c
.RI "char * \fBmsg\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job message log. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobMsgLog::usrId\fP"
.PP
The user ID of the submitter. 
.PP
.SS "int \fBjobMsgLog::jobId\fP"
.PP
The unique ID for the job. 
.PP
.SS "int \fBjobMsgLog::msgId\fP"
.PP
Message index. 
.PP
.SS "int \fBjobMsgLog::type\fP"
.PP
Message type. 
.PP
.SS "char* \fBjobMsgLog::src\fP"
.PP
Message source. 
.PP
.SS "char* \fBjobMsgLog::dest\fP"
.PP
Message destination. 
.PP
.SS "char* \fBjobMsgLog::msg\fP"
.PP
Message. 
.PP
.SS "int \fBjobMsgLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP


.ad l
.nh
.SH NAME
jobMsgAckLog \- job message ack log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBusrId\fP"
.br
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBmsgId\fP"
.br
.ti -1c
.RI "int \fBtype\fP"
.br
.ti -1c
.RI "char * \fBsrc\fP"
.br
.ti -1c
.RI "char * \fBdest\fP"
.br
.ti -1c
.RI "char * \fBmsg\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job message ack log. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobMsgAckLog::usrId\fP"
.PP
The user ID of the submitter. 
.PP
.SS "int \fBjobMsgAckLog::jobId\fP"
.PP
The unique ID for the job. 
.PP
.SS "int \fBjobMsgAckLog::msgId\fP"
.PP
Message index. 
.PP
.SS "int \fBjobMsgAckLog::type\fP"
.PP
Message type. 
.PP
.SS "char* \fBjobMsgAckLog::src\fP"
.PP
Message source. 
.PP
.SS "char* \fBjobMsgAckLog::dest\fP"
.PP
Message destination. 
.PP
.SS "char* \fBjobMsgAckLog::msg\fP"
.PP
Message. 
.PP
.SS "int \fBjobMsgAckLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP


.ad l
.nh
.SH NAME
jobOccupyReqLog \- job occupy request log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBnumOccupyRequests\fP"
.br
.ti -1c
.RI "void * \fBoccupyReqList\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "char \fBuserName\fP [MAX_LSB_NAME_LEN]"
.br
.in -1c
.SH "Detailed Description"
.PP 
job occupy request log. 

\fBjobOccupyReqLog\fP is for future use. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobOccupyReqLog::userId\fP"
.PP
The user ID of the submitter. 
.PP
.SS "int \fBjobOccupyReqLog::jobId\fP"
.PP
The unique ID for the job. 
.PP
.SS "int \fBjobOccupyReqLog::numOccupyRequests\fP"
.PP
Number of Jobs Slots desired. 
.PP
.SS "void* \fBjobOccupyReqLog::occupyReqList\fP"
.PP
List of slots occupied. 
.PP
.SS "int \fBjobOccupyReqLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP
.SS "char \fBjobOccupyReqLog::userName\fP[MAX_LSB_NAME_LEN]"
.PP
The name of the submitter. 
.PP


.ad l
.nh
.SH NAME
jobVacatedLog \- job vacate log.jobVacatedLog is for future use.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "char \fBuserName\fP [MAX_LSB_NAME_LEN]"
.br
.in -1c
.SH "Detailed Description"
.PP 
job vacate log.jobVacatedLog is for future use. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobVacatedLog::userId\fP"
.PP
The user ID of the submitter. 
.PP
.SS "int \fBjobVacatedLog::jobId\fP"
.PP
The unique ID for the job. 
.PP
.SS "int \fBjobVacatedLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP
.SS "char \fBjobVacatedLog::userName\fP[MAX_LSB_NAME_LEN]"
.PP
The name of the submitter. 
.PP


.ad l
.nh
.SH NAME
jobForceRequestLog \- job force request log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "int \fBnumExecHosts\fP"
.br
.ti -1c
.RI "char ** \fBexecHosts\fP"
.br
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "int \fBoptions\fP"
.br
.ti -1c
.RI "char \fBuserName\fP [MAX_LSB_NAME_LEN]"
.br
.ti -1c
.RI "char * \fBqueue\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job force request log. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobForceRequestLog::userId\fP"
.PP
The user ID of the submitter. 
.PP
.SS "int \fBjobForceRequestLog::numExecHosts\fP"
.PP
>1 for local/lease jobs; 0 for remote batch model 
.PP
.SS "char** \fBjobForceRequestLog::execHosts\fP"
.PP
The array of execution host names. 
.PP
.SS "int \fBjobForceRequestLog::jobId\fP"
.PP
The unique ID for the job. 
.PP
.SS "int \fBjobForceRequestLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP
.SS "int \fBjobForceRequestLog::options\fP"
.PP
Job run options (RUNJOB_OPT_NOSTOP | JFLAG_URGENT_NOSTOP |JFLAG_URGENT). 
.PP
.SS "char \fBjobForceRequestLog::userName\fP[MAX_LSB_NAME_LEN]"
.PP
The name of the submitter. 
.PP
.SS "char* \fBjobForceRequestLog::queue\fP"
.PP
The name of the queue to which this job was submitted. 
.PP


.ad l
.nh
.SH NAME
jobChunkLog \- job chunck log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "long \fBmembSize\fP"
.br
.ti -1c
.RI "LS_LONG_INT * \fBmembJobId\fP"
.br
.ti -1c
.RI "long \fBnumExHosts\fP"
.br
.ti -1c
.RI "char ** \fBexecHosts\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job chunck log. 
.SH "Field Documentation"
.PP 
.SS "long \fBjobChunkLog::membSize\fP"
.PP
Size of array membJobId. 
.PP
.SS "LS_LONG_INT* \fBjobChunkLog::membJobId\fP"
.PP
Job ids of jobs in the chunk. 
.PP
.SS "long \fBjobChunkLog::numExHosts\fP"
.PP
The number of processors used for execution. 
.PP
.SS "char** \fBjobChunkLog::execHosts\fP"
.PP
The array of names of execution hosts. 
.PP


.ad l
.nh
.SH NAME
jobExternalMsgLog \- job external message log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "int \fBmsgIdx\fP"
.br
.ti -1c
.RI "char * \fBdesc\fP"
.br
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "long \fBdataSize\fP"
.br
.ti -1c
.RI "time_t \fBpostTime\fP"
.br
.ti -1c
.RI "int \fBdataStatus\fP"
.br
.ti -1c
.RI "char * \fBfileName\fP"
.br
.ti -1c
.RI "char \fBuserName\fP [MAX_LSB_NAME_LEN]"
.br
.in -1c
.SH "Detailed Description"
.PP 
job external message log. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobExternalMsgLog::jobId\fP"
.PP
The unique ID for the job. 
.PP
.SS "int \fBjobExternalMsgLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP
.SS "int \fBjobExternalMsgLog::msgIdx\fP"
.PP
The message index. 
.PP
.SS "char* \fBjobExternalMsgLog::desc\fP"
.PP
Message description. 
.PP
.SS "int \fBjobExternalMsgLog::userId\fP"
.PP
The user ID of the submitter. 
.PP
.SS "long \fBjobExternalMsgLog::dataSize\fP"
.PP
Size of the message. 
.PP
.SS "time_t \fBjobExternalMsgLog::postTime\fP"
.PP
The time the author posted the message. 
.PP

.SS "int \fBjobExternalMsgLog::dataStatus\fP"
.PP
The status of the message. 
.PP
.SS "char* \fBjobExternalMsgLog::fileName\fP"
.PP
Name of attached data file. 
.PP
If no file is attached, use NULL. 
.SS "char \fBjobExternalMsgLog::userName\fP[MAX_LSB_NAME_LEN]"
.PP
The author of the message. 
.PP


.ad l
.nh
.SH NAME
rsvRes \- reservation request.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char * \fBresName\fP"
.br
.ti -1c
.RI "int \fBcount\fP"
.br
.ti -1c
.RI "int \fBusedAmt\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
reservation request. 
.SH "Field Documentation"
.PP 
.SS "char* \fBrsvRes::resName\fP"
.PP
Name of the resource (currently: host). 
.PP
.SS "int \fBrsvRes::count\fP"
.PP
Reserved counter (currently: cpu number). 
.PP
.SS "int \fBrsvRes::usedAmt\fP"
.PP
Used of the reserved counter (not used). 
.PP


.ad l
.nh
.SH NAME
rsvFinishLog \- for advanced reservation.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "time_t \fBrsvReqTime\fP"
.br
.ti -1c
.RI "int \fBoptions\fP"
.br
.ti -1c
.RI "int \fBuid\fP"
.br
.ti -1c
.RI "char * \fBrsvId\fP"
.br
.ti -1c
.RI "char * \fBname\fP"
.br
.ti -1c
.RI "int \fBnumReses\fP"
.br
.ti -1c
.RI "struct \fBrsvRes\fP * \fBalloc\fP"
.br
.ti -1c
.RI "char * \fBtimeWindow\fP"
.br
.ti -1c
.RI "time_t \fBduration\fP"
.br
.ti -1c
.RI "char * \fBcreator\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
for advanced reservation. 
.SH "Field Documentation"
.PP 
.SS "time_t \fBrsvFinishLog::rsvReqTime\fP"
.PP
Time when the reservation is required. 
.PP
.SS "int \fBrsvFinishLog::options\fP"
.PP
Same as the options field in the struct \fBaddRsvRequest\fP(lsbatch.h). 
.PP
.SS "int \fBrsvFinishLog::uid\fP"
.PP
The user who creat the reservation. 
.PP
.SS "char* \fBrsvFinishLog::rsvId\fP"
.PP
Reservation ID. 
.PP
.SS "char* \fBrsvFinishLog::name\fP"
.PP
Client of the reservation. 
.PP
.SS "int \fBrsvFinishLog::numReses\fP"
.PP
Number of resources reserved. 
.PP
.SS "struct \fBrsvRes\fP* \fBrsvFinishLog::alloc\fP"
.PP
Allocation vector. 
.PP
.SS "char* \fBrsvFinishLog::timeWindow\fP"
.PP
Time window within which the reservation is active 
.br
 Two forms: time_t1-time_t2 or [day1]:hour1:0-[day2]:hour2:0. 
.PP
.SS "time_t \fBrsvFinishLog::duration\fP"
.PP
Duration in seconds. 
.PP
duration = to - from : when the reservation expired 
.SS "char* \fBrsvFinishLog::creator\fP"
.PP
Creator of the reservation. 
.PP


.ad l
.nh
.SH NAME
cpuProfileLog \- CPU Profile Log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char \fBservicePartition\fP [MAX_LSB_NAME_LEN]"
.br
.ti -1c
.RI "int \fBslotsRequired\fP"
.br
.ti -1c
.RI "int \fBslotsAllocated\fP"
.br
.ti -1c
.RI "int \fBslotsBorrowed\fP"
.br
.ti -1c
.RI "int \fBslotsLent\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
CPU Profile Log. 
.SH "Field Documentation"
.PP 
.SS "char \fBcpuProfileLog::servicePartition\fP[MAX_LSB_NAME_LEN]"
.PP
Queue name. 
.PP
.SS "int \fBcpuProfileLog::slotsRequired\fP"
.PP
The number of CPU required. 
.PP
.SS "int \fBcpuProfileLog::slotsAllocated\fP"
.PP
The number of CPU actually allocated. 
.PP
.SS "int \fBcpuProfileLog::slotsBorrowed\fP"
.PP
The number of CPU borrowed. 
.PP
.SS "int \fBcpuProfileLog::slotsLent\fP"
.PP
The number of CPU lent. 
.PP


.ad l
.nh
.SH NAME
jobRunRusageLog \- log the running rusage of a job in the lsb.stream file  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobid\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "struct \fBjRusage\fP \fBjrusage\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
log the running rusage of a job in the lsb.stream file 
.SH "Field Documentation"
.PP 
.SS "int \fBjobRunRusageLog::jobid\fP"
.PP
The unique ID of the job. 
.PP
.SS "int \fBjobRunRusageLog::idx\fP"
.PP
Job array index; must be 0 in JOB_NEW. 
.PP
.SS "struct \fBjRusage\fP \fBjobRunRusageLog::jrusage\fP"
.PP
jrusage 
.PP


.ad l
.nh
.SH NAME
slaLog \- SLA event log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char * \fBname\fP"
.br
.ti -1c
.RI "char * \fBconsumer\fP"
.br
.ti -1c
.RI "int \fBgoaltype\fP"
.br
.ti -1c
.RI "int \fBstate\fP"
.br
.ti -1c
.RI "int \fBoptimum\fP"
.br
.ti -1c
.RI "int \fBcounters\fP [NUM_JGRP_COUNTERS]"
.br
.in -1c
.SH "Detailed Description"
.PP 
SLA event log. 
.SH "Field Documentation"
.PP 
.SS "char* \fBslaLog::name\fP"
.PP
Service class name. 
.PP
.SS "char* \fBslaLog::consumer\fP"
.PP
Consumer name associated with the service class. 
.PP
.SS "int \fBslaLog::goaltype\fP"
.PP
Objectives. 
.PP
.SS "int \fBslaLog::state\fP"
.PP
The service class state (ontime, delayed). 
.PP
.SS "int \fBslaLog::optimum\fP"
.PP
Optimum number of job slots (or concurrently running jobs) needed for the service class to meet its service-level goals. 
.PP
.SS "int \fBslaLog::counters\fP[NUM_JGRP_COUNTERS]"
.PP
Job counters for the service class. 
.PP


.ad l
.nh
.SH NAME
perfmonLogInfo \- a wrap of structure \fBperfmonLog\fP for performance metrics project  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBsamplePeriod\fP"
.br
.ti -1c
.RI "int * \fBmetrics\fP"
.br
.ti -1c
.RI "time_t \fBstartTime\fP"
.br
.ti -1c
.RI "time_t \fBlogTime\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
a wrap of structure \fBperfmonLog\fP for performance metrics project 
.SH "Field Documentation"
.PP 
.SS "int \fBperfmonLogInfo::samplePeriod\fP"
.PP
Sample period. 
.PP
.SS "int* \fBperfmonLogInfo::metrics\fP"
.PP
Metrics. 
.PP
.SS "time_t \fBperfmonLogInfo::startTime\fP"
.PP
Start time. 
.PP
.SS "time_t \fBperfmonLogInfo::logTime\fP"
.PP
Log time. 
.PP


.ad l
.nh
.SH NAME
perfmonLog \- performance metrics log in lsb.stream  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBsamplePeriod\fP"
.br
.ti -1c
.RI "int \fBtotalQueries\fP"
.br
.ti -1c
.RI "int \fBjobQuries\fP"
.br
.ti -1c
.RI "int \fBqueueQuries\fP"
.br
.ti -1c
.RI "int \fBhostQuries\fP"
.br
.ti -1c
.RI "int \fBsubmissionRequest\fP"
.br
.ti -1c
.RI "int \fBjobSubmitted\fP"
.br
.ti -1c
.RI "int \fBdispatchedjobs\fP"
.br
.ti -1c
.RI "int \fBjobcompleted\fP"
.br
.ti -1c
.RI "int \fBjobMCSend\fP"
.br
.ti -1c
.RI "int \fBjobMCReceive\fP"
.br
.ti -1c
.RI "time_t \fBstartTime\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
performance metrics log in lsb.stream 
.SH "Field Documentation"
.PP 
.SS "int \fBperfmonLog::samplePeriod\fP"
.PP
Sample rate. 
.PP
.SS "int \fBperfmonLog::totalQueries\fP"
.PP
Number of Queries. 
.PP
.SS "int \fBperfmonLog::jobQuries\fP"
.PP
Number of Job Query. 
.PP
.SS "int \fBperfmonLog::queueQuries\fP"
.PP
Number of Queue Query. 
.PP
.SS "int \fBperfmonLog::hostQuries\fP"
.PP
Number of Host Query. 
.PP
.SS "int \fBperfmonLog::submissionRequest\fP"
.PP
Number of Submission Requests. 
.PP
.SS "int \fBperfmonLog::jobSubmitted\fP"
.PP
Number of Jobs Submitted. 
.PP
.SS "int \fBperfmonLog::dispatchedjobs\fP"
.PP
Number of Dispatched Jobs. 
.PP
.SS "int \fBperfmonLog::jobcompleted\fP"
.PP
Number of Job Completed. 
.PP
.SS "int \fBperfmonLog::jobMCSend\fP"
.PP
Number of MultiCluster Jobs Sent. 
.PP
.SS "int \fBperfmonLog::jobMCReceive\fP"
.PP
Number of MultiCluster Jobs Received. 
.PP
.SS "time_t \fBperfmonLog::startTime\fP"
.PP
Start Time. 
.PP


.ad l
.nh
.SH NAME
taskFinishLog \- task finish log.Task accounting record in ssched.acct  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "struct \fBjobFinishLog\fP \fBjobFinishLog\fP"
.br
.ti -1c
.RI "int \fBtaskId\fP"
.br
.ti -1c
.RI "int \fBtaskIdx\fP"
.br
.ti -1c
.RI "char * \fBtaskName\fP"
.br
.ti -1c
.RI "int \fBtaskOptions\fP"
.br
.ti -1c
.RI "int \fBtaskExitReason\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
task finish log.Task accounting record in ssched.acct 
.SH "Field Documentation"
.PP 
.SS "struct \fBjobFinishLog\fP \fBtaskFinishLog::jobFinishLog\fP"
.PP
Job finish event. 
.PP
.SS "int \fBtaskFinishLog::taskId\fP"
.PP
Task ID. 
.PP
.SS "int \fBtaskFinishLog::taskIdx\fP"
.PP
Task index. 
.PP
.SS "char* \fBtaskFinishLog::taskName\fP"
.PP
Name of task. 
.PP
.SS "int \fBtaskFinishLog::taskOptions\fP"
.PP
Bit mask of task options: 
.br
 TASK_IN_FILE (0x01)-specify input file 
.br
 TASK_OUT_FILE (0x02)-specify output file 
.br
 TASK_ERR_FILE (0x04)-specify error file 
.br
 TASK_PRE_EXEC (0x08)-specify pre-exec command 
.br
 TASK_POST_EXEC (0x10)-specify post-exec command 
.br
 TASK_NAME (0x20)-specify task name. 
.PP
.SS "int \fBtaskFinishLog::taskExitReason\fP"
.PP
Task Exit Reason 
.br
 TASK_EXIT_NORMAL = 0- normal exit 
.br
 TASK_EXIT_INIT = 1-generic task initialization failure 
.br
 TASK_EXIT_PATH = 2-failed to initialize path 
.br
 TASK_EXIT_NO_FILE = 3-failed to create task file 
.br
 TASK_EXIT_PRE_EXEC = 4- task pre-exec failed 
.br
 TASK_EXIT_NO_PROCESS = 5-fork failed 
.br
 TASK_EXIT_XDR = 6-xdr communication error 
.br
 TASK_EXIT_NOMEM = 7- no memory 
.br
 TASK_EXIT_SYS = 8-system call failed 
.br
 TASK_EXIT_TSCHILD_EXEC = 9-failed to run sschild 
.br
 TASK_EXIT_RUNLIMIT = 10-task reaches run limit 
.br
 TASK_EXIT_IO = 11-I/O failure 
.br
 TASK_EXIT_RSRC_LIMIT = 12-set task resource limit failed. 
.PP


.ad l
.nh
.SH NAME
eventEOSLog \- End of stream event.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBeos\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
End of stream event. 

The stream is moved to lsb.stream.0 and a new lsb.stream is opened. Readers of lsb.stream when encounter the event EVENT_END_OF_STREAM should close and reopen the lsb.stream file. 
.SH "Field Documentation"
.PP 
.SS "int \fBeventEOSLog::eos\fP"
.PP
Event end of stream. 
.PP


.ad l
.nh
.SH NAME
jobResizeNotifyStartLog \- job resize start notify log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "int \fBnotifyId\fP"
.br
.ti -1c
.RI "int \fBnumResizeHosts\fP"
.br
.ti -1c
.RI "char ** \fBresizeHosts\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job resize start notify log. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobResizeNotifyStartLog::jobId\fP"
.PP
JobId. 
.PP
.SS "int \fBjobResizeNotifyStartLog::idx\fP"
.PP
Index. 
.PP
.SS "int \fBjobResizeNotifyStartLog::notifyId\fP"
.PP
Notify Id. 
.PP
.SS "int \fBjobResizeNotifyStartLog::numResizeHosts\fP"
.PP
Number of resized hosts. 
.PP

.SS "char** \fBjobResizeNotifyStartLog::resizeHosts\fP"
.PP
Resize Hosts. 
.PP


.ad l
.nh
.SH NAME
jobResizeNotifyAcceptLog \- job resize accept notify log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "int \fBnotifyId\fP"
.br
.ti -1c
.RI "int \fBresizeNotifyCmdPid\fP"
.br
.ti -1c
.RI "int \fBresizeNotifyCmdPGid\fP"
.br
.ti -1c
.RI "int \fBstatus\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job resize accept notify log. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobResizeNotifyAcceptLog::jobId\fP"
.PP
JobId. 
.PP
.SS "int \fBjobResizeNotifyAcceptLog::idx\fP"
.PP
Index. 
.PP
.SS "int \fBjobResizeNotifyAcceptLog::notifyId\fP"
.PP
Notify Id. 
.PP
.SS "int \fBjobResizeNotifyAcceptLog::resizeNotifyCmdPid\fP"
.PP
Resize Notify command pid. 
.PP
.SS "int \fBjobResizeNotifyAcceptLog::resizeNotifyCmdPGid\fP"
.PP
Resize Notify command pgid. 
.PP
.SS "int \fBjobResizeNotifyAcceptLog::status\fP"
.PP
Status. 
.PP


.ad l
.nh
.SH NAME
jobResizeNotifyDoneLog \- job resize done notify log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "int \fBnotifyId\fP"
.br
.ti -1c
.RI "int \fBstatus\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job resize done notify log. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobResizeNotifyDoneLog::jobId\fP"
.PP
JobId. 
.PP
.SS "int \fBjobResizeNotifyDoneLog::idx\fP"
.PP
Index. 
.PP
.SS "int \fBjobResizeNotifyDoneLog::notifyId\fP"
.PP
Notify Id. 
.PP
.SS "int \fBjobResizeNotifyDoneLog::status\fP"
.PP
Status. 
.PP


.ad l
.nh
.SH NAME
jobResizeReleaseLog \- job resize release log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "int \fBreqId\fP"
.br
.ti -1c
.RI "int \fBoptions\fP"
.br
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "char * \fBuserName\fP"
.br
.ti -1c
.RI "char * \fBresizeNotifyCmd\fP"
.br
.ti -1c
.RI "int \fBnumResizeHosts\fP"
.br
.ti -1c
.RI "char ** \fBresizeHosts\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job resize release log. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobResizeReleaseLog::jobId\fP"
.PP
JobId. 
.PP
.SS "int \fBjobResizeReleaseLog::idx\fP"
.PP
Index. 
.PP
.SS "int \fBjobResizeReleaseLog::reqId\fP"
.PP
Request Id. 
.PP
.SS "int \fBjobResizeReleaseLog::options\fP"
.PP
Options. 
.PP
.SS "int \fBjobResizeReleaseLog::userId\fP"
.PP
User Id. 
.PP
.SS "char* \fBjobResizeReleaseLog::userName\fP"
.PP
User Name. 
.PP
.SS "char* \fBjobResizeReleaseLog::resizeNotifyCmd\fP"
.PP
Resize Notify command. 
.PP
.SS "int \fBjobResizeReleaseLog::numResizeHosts\fP"
.PP
Number of resized hosts. 
.PP
.SS "char** \fBjobResizeReleaseLog::resizeHosts\fP"
.PP
Resized hosts. 
.PP


.ad l
.nh
.SH NAME
jobResizeCancelLog \- job resize cancel log.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "char * \fBuserName\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job resize cancel log. 
.SH "Field Documentation"
.PP 
.SS "int \fBjobResizeCancelLog::jobId\fP"
.PP
JobId. 
.PP
.SS "int \fBjobResizeCancelLog::idx\fP"
.PP
Index. 
.PP
.SS "int \fBjobResizeCancelLog::userId\fP"
.PP
User Id. 
.PP
.SS "char* \fBjobResizeCancelLog::userName\fP"
.PP
User name. 
.PP


.ad l
.nh
.SH NAME
jobResizeLog \- job resize event: indicating a realized job allocation change  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBjobId\fP"
.br
.ti -1c
.RI "int \fBidx\fP"
.br
.ti -1c
.RI "time_t \fBstartTime\fP"
.br
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "char \fBuserName\fP [MAX_LSB_NAME_LEN]"
.br
.ti -1c
.RI "int \fBresizeType\fP"
.br
.ti -1c
.RI "time_t \fBlastResizeStartTime\fP"
.br
.ti -1c
.RI "time_t \fBlastResizeFinishTime\fP"
.br
.ti -1c
.RI "int \fBnumExecHosts\fP"
.br
.ti -1c
.RI "char ** \fBexecHosts\fP"
.br
.ti -1c
.RI "int \fBnumResizeHosts\fP"
.br
.ti -1c
.RI "char ** \fBresizeHosts\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job resize event: indicating a realized job allocation change 
.SH "Field Documentation"
.PP 
.SS "int \fBjobResizeLog::jobId\fP"
.PP
JobId. 
.PP
.SS "int \fBjobResizeLog::idx\fP"
.PP
Index. 
.PP
.SS "time_t \fBjobResizeLog::startTime\fP"
.PP
Start time. 
.PP
.SS "int \fBjobResizeLog::userId\fP"
.PP
User Id. 
.PP
.SS "char \fBjobResizeLog::userName\fP[MAX_LSB_NAME_LEN]"
.PP
User name. 
.PP
.SS "int \fBjobResizeLog::resizeType\fP"
.PP
0 grow, 1 shrink 
.PP
.SS "time_t \fBjobResizeLog::lastResizeStartTime\fP"
.PP
The start time of last allocation. 
.PP
.SS "time_t \fBjobResizeLog::lastResizeFinishTime\fP"
.PP
The finish time of last allocation. 
.PP
.SS "int \fBjobResizeLog::numExecHosts\fP"
.PP
Allocation before the resize. 
.PP
.SS "char** \fBjobResizeLog::execHosts\fP"
.PP
Execute hosts. 
.PP
.SS "int \fBjobResizeLog::numResizeHosts\fP"
.PP
The delta of the allocation change. 
.PP
.SS "char** \fBjobResizeLog::resizeHosts\fP"
.PP
Resize hosts. 
.PP


.ad l
.nh
.SH NAME
jRusage \- Information about job using resource.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBmem\fP"
.br
.ti -1c
.RI "int \fBswap\fP"
.br
.ti -1c
.RI "int \fButime\fP"
.br
.ti -1c
.RI "int \fBstime\fP"
.br
.ti -1c
.RI "int \fBnpids\fP"
.br
.ti -1c
.RI "struct \fBpidInfo\fP * \fBpidInfo\fP"
.br
.ti -1c
.RI "int \fBnpgids\fP"
.br
.ti -1c
.RI "int * \fBpgid\fP"
.br
.ti -1c
.RI "int \fBnthreads\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Information about job using resource. 
.SH "Field Documentation"
.PP 
.SS "int \fBjRusage::mem\fP"
.PP
Total resident memory usage in kbytes of all currently running processes in given process groups. 
.PP

.SS "int \fBjRusage::swap\fP"
.PP
Total virtual memory usage in kbytes of all currently running processes in given process groups. 
.PP

.SS "int \fBjRusage::utime\fP"
.PP
Cumulative total user time in seconds. 
.PP
.SS "int \fBjRusage::stime\fP"
.PP
Cumulative total system time in seconds. 
.PP
.SS "int \fBjRusage::npids\fP"
.PP
Number of currently active processes in given process groups. 
.PP

.SS "struct \fBpidInfo\fP* \fBjRusage::pidInfo\fP"
.PP
Array of currently active processes' information. 
.PP
.SS "int \fBjRusage::npgids\fP"
.PP
Number of currently active process groups. 
.PP
.SS "int* \fBjRusage::pgid\fP"
.PP
Array of currently active process group ids. 
.PP
.SS "int \fBjRusage::nthreads\fP"
.PP
Number of currently active threads in given process groups. 
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Platform LSF 7.0.6 C API Reference from the source code.
