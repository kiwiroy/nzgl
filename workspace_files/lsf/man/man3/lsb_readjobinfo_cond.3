.TH "lsb_readjobinfo_cond" 3 "3 Sep 2009" "Version 7.0" "Platform LSF 7.0.6 C API Reference" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lsb_readjobinfo_cond \- lsb_readjobinfo_cond 
Returns the next job information record for condensed host groups in mbatchd.
.PP
\fBlsb_readjobinfo_cond\fP reads the number of records defined by the more parameter. The more parameter receives its value from either \fBlsb_openjobinfo\fP or \fBlsb_openjobinfo_a\fP. Each time \fBlsb_readjobinfo_cond\fP is called, it returns one record from mbatchd. Use \fBlsb_readjobinfo_cond\fP in a loop and use more to determine how many times to repeat the loop to retrieve job information records.
.PP
\fBlsb_readjobinfo_cond\fP differs from \fBlsb_readjobinfo\fP in that if jInfoHExt is not NULL, \fBlsb_readjobinfo_cond\fP substitutes hostGroup (if it is a condensed host group) for job execution hosts.
.PP
\fB#include <lsf/lsbatch.h> 
.br
 #include <time.h> 
.br
 #include <lsf/lsf.h>\fP
.PP
\fB struct \fBjobInfoEnt\fP *lsb_readjobinfo_cond(int *more, struct \fBjobInfoHeadExt\fP *jInfoHExt);\fP
.PP
.SH "Parameters:"
\fI*more\fP Number of job records in the master batch daemon. 
.br
\fI*jInfoHExt\fP Job information header info for the condensed host group.
.PP
.SH "Data Structures:" 
.PP
\fBjobInfoEnt\fP 
.br
\fBjobExternalMsgReply\fP 
.br
\fBjRusage\fP 
.br
\fBpidInfo\fP 
.br
\fBreserveItem\fP 
.br
\fBsubmit\fP
.PP
.SH "Define Statements:" 
.PP
\fBexternal_msg_processing\fP 
.br
\fBgroup_nodetypes\fP
.PP
.SH "Returns:"
struct \fBjobInfoEnt\fP *:A pointer to job information entry. 
.br
 Function was successful. 
.PP
NULL 
.br
 Function failed.
.PP
.SH "Errors:" 
.PP
If there are no more records, then lsberrno is set to LSBE_EOF.
.PP
.SH "Equivalent line commands:" 
.PP
none
.PP
.SH "Files:" 
.PP
$LSB_CONFDIR/cluster_name/configdir/lsb.queues
.PP
.SH "See also:"
\fBlsb_openjobinfo\fP 
.PP
\fBlsb_openjobinfo_a\fP 
.PP
\fBlsb_closejobinfo\fP 
.PP
\fBlsb_hostinfo\fP 
.PP
\fBlsb_pendreason\fP 
.PP
\fBlsb_queueinfo\fP 
.PP
\fBlsb_readjobinfo\fP 
.PP
\fBlsb_suspreason\fP 
.PP

.ad l
.nh
.SH NAME
jobInfoEnt \- job information entry.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "LS_LONG_INT \fBjobId\fP"
.br
.ti -1c
.RI "char * \fBuser\fP"
.br
.ti -1c
.RI "int \fBstatus\fP"
.br
.ti -1c
.RI "int * \fBreasonTb\fP"
.br
.ti -1c
.RI "int \fBnumReasons\fP"
.br
.ti -1c
.RI "int \fBreasons\fP"
.br
.ti -1c
.RI "int \fBsubreasons\fP"
.br
.ti -1c
.RI "int \fBjobPid\fP"
.br
.ti -1c
.RI "time_t \fBsubmitTime\fP"
.br
.ti -1c
.RI "time_t \fBreserveTime\fP"
.br
.ti -1c
.RI "time_t \fBstartTime\fP"
.br
.ti -1c
.RI "time_t \fBpredictedStartTime\fP"
.br
.ti -1c
.RI "time_t \fBendTime\fP"
.br
.ti -1c
.RI "time_t \fBlastEvent\fP"
.br
.ti -1c
.RI "time_t \fBnextEvent\fP"
.br
.ti -1c
.RI "int \fBduration\fP"
.br
.ti -1c
.RI "float \fBcpuTime\fP"
.br
.ti -1c
.RI "int \fBumask\fP"
.br
.ti -1c
.RI "char * \fBcwd\fP"
.br
.ti -1c
.RI "char * \fBsubHomeDir\fP"
.br
.ti -1c
.RI "char * \fBfromHost\fP"
.br
.ti -1c
.RI "char ** \fBexHosts\fP"
.br
.ti -1c
.RI "int \fBnumExHosts\fP"
.br
.ti -1c
.RI "float \fBcpuFactor\fP"
.br
.ti -1c
.RI "int \fBnIdx\fP"
.br
.ti -1c
.RI "float * \fBloadSched\fP"
.br
.ti -1c
.RI "float * \fBloadStop\fP"
.br
.ti -1c
.RI "struct \fBsubmit\fP \fBsubmit\fP"
.br
.ti -1c
.RI "int \fBexitStatus\fP"
.br
.ti -1c
.RI "int \fBexecUid\fP"
.br
.ti -1c
.RI "char * \fBexecHome\fP"
.br
.ti -1c
.RI "char * \fBexecCwd\fP"
.br
.ti -1c
.RI "char * \fBexecUsername\fP"
.br
.ti -1c
.RI "time_t \fBjRusageUpdateTime\fP"
.br
.ti -1c
.RI "struct \fBjRusage\fP \fBrunRusage\fP"
.br
.ti -1c
.RI "int \fBjType\fP"
.br
.ti -1c
.RI "char * \fBparentGroup\fP"
.br
.ti -1c
.RI "char * \fBjName\fP"
.br
.ti -1c
.RI "int \fBcounter\fP [NUM_JGRP_COUNTERS]"
.br
.ti -1c
.RI "u_short \fBport\fP"
.br
.ti -1c
.RI "int \fBjobPriority\fP"
.br
.ti -1c
.RI "int \fBnumExternalMsg\fP"
.br
.ti -1c
.RI "struct \fBjobExternalMsgReply\fP ** \fBexternalMsg\fP"
.br
.ti -1c
.RI "int \fBclusterId\fP"
.br
.ti -1c
.RI "char * \fBdetailReason\fP"
.br
.ti -1c
.RI "float \fBidleFactor\fP"
.br
.ti -1c
.RI "int \fBexceptMask\fP"
.br
.ti -1c
.RI "char * \fBadditionalInfo\fP"
.br
.ti -1c
.RI "int \fBexitInfo\fP"
.br
.ti -1c
.RI "int \fBwarningTimePeriod\fP"
.br
.ti -1c
.RI "char * \fBwarningAction\fP"
.br
.ti -1c
.RI "char * \fBchargedSAAP\fP"
.br
.ti -1c
.RI "char * \fBexecRusage\fP"
.br
.ti -1c
.RI "time_t \fBrsvInActive\fP"
.br
.ti -1c
.RI "int \fBnumLicense\fP"
.br
.ti -1c
.RI "char ** \fBlicenseNames\fP"
.br
.ti -1c
.RI "float \fBaps\fP"
.br
.ti -1c
.RI "float \fBadminAps\fP"
.br
.ti -1c
.RI "int \fBrunTime\fP"
.br
.ti -1c
.RI "int \fBreserveCnt\fP"
.br
.ti -1c
.RI "struct \fBreserveItem\fP * \fBitems\fP"
.br
.ti -1c
.RI "float \fBadminFactorVal\fP"
.br
.ti -1c
.RI "int \fBresizeMin\fP"
.br
.ti -1c
.RI "int \fBresizeMax\fP"
.br
.ti -1c
.RI "time_t \fBresizeReqTime\fP"
.br
.ti -1c
.RI "int \fBjStartNumExHosts\fP"
.br
.ti -1c
.RI "char ** \fBjStartExHosts\fP"
.br
.ti -1c
.RI "time_t \fBlastResizeTime\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
job information entry. 
.SH "Field Documentation"
.PP 
.SS "LS_LONG_INT \fBjobInfoEnt::jobId\fP"
.PP
The job ID that the LSF system assigned to the job. 
.PP

.SS "char* \fBjobInfoEnt::user\fP"
.PP
The name of the user who submitted the job. 
.PP

.SS "int \fBjobInfoEnt::status\fP"
.PP
The current status of the job.Possible values areshown in job_states. 
.PP
.SS "int* \fBjobInfoEnt::reasonTb\fP"
.PP
Pending or suspending reasons of the job. 
.PP
.SS "int \fBjobInfoEnt::numReasons\fP"
.PP
Length of reasonTb[]. 
.PP
.SS "int \fBjobInfoEnt::reasons\fP"
.PP
The reason a job is pending or suspended. 
.PP

.SS "int \fBjobInfoEnt::subreasons\fP"
.PP
The reason a job is pending or suspended. 
.PP
If status is JOB_STAT_PEND, the values of reasons and subreasons are explained by \fBlsb_pendreason\fP. If status is JOB_STAT_PSUSP, the values of reasons and subreasons are explained by \fBlsb_suspreason\fP.
.PP
When reasons is PEND_HOST_LOAD or SUSP_LOAD_REASON, subreasons indicates the load indices that are out of bounds. If reasons is PEND_HOST_LOAD, subreasons is the same as busySched in the \fBhostInfoEnt\fP structure; if reasons is SUSP_LOAD_REASON, subreasons is the same as busyStop in the \fBhostInfoEnt\fP structure. (See \fBlsb_hostinfo\fP) 
.SS "int \fBjobInfoEnt::jobPid\fP"
.PP
The job process ID. 
.PP

.SS "time_t \fBjobInfoEnt::submitTime\fP"
.PP
The time the job was submitted, in seconds since 00:00:00 GMT, Jan. 
.PP
1, 1970. 
.SS "time_t \fBjobInfoEnt::reserveTime\fP"
.PP
Time when job slots are reserved. 
.PP
.SS "time_t \fBjobInfoEnt::startTime\fP"
.PP
The time that the job started running, if it has been dispatched. 
.PP

.SS "time_t \fBjobInfoEnt::predictedStartTime\fP"
.PP
Job's predicted start time. 
.PP
.SS "time_t \fBjobInfoEnt::endTime\fP"
.PP
The termination time of the job, if it has completed. 
.PP

.SS "time_t \fBjobInfoEnt::lastEvent\fP"
.PP
Last time event. 
.PP
.SS "time_t \fBjobInfoEnt::nextEvent\fP"
.PP
Next time event. 
.PP
.SS "int \fBjobInfoEnt::duration\fP"
.PP
Duration time (minutes). 
.PP
.SS "float \fBjobInfoEnt::cpuTime\fP"
.PP
CPU time consumed by the job. 
.PP
.SS "int \fBjobInfoEnt::umask\fP"
.PP
The file creation mask when the job was submitted. 
.PP

.SS "char* \fBjobInfoEnt::cwd\fP"
.PP
The current working directory when the job was submitted. 
.PP

.SS "char* \fBjobInfoEnt::subHomeDir\fP"
.PP
Home directory on submission host. 
.PP

.SS "char* \fBjobInfoEnt::fromHost\fP"
.PP
The name of the host from which the job was submitted. 
.PP

.SS "char** \fBjobInfoEnt::exHosts\fP"
.PP
The array of names of hosts on which the job executes. 
.PP

.SS "int \fBjobInfoEnt::numExHosts\fP"
.PP
The number of hosts on which the job executes. 
.PP

.SS "float \fBjobInfoEnt::cpuFactor\fP"
.PP
The CPU factor for normalizing CPU and wall clock time limits. 
.PP

.SS "int \fBjobInfoEnt::nIdx\fP"
.PP
The number of load indices in the loadSched and loadStop arrays. 
.PP

.SS "float* \fBjobInfoEnt::loadSched\fP"
.PP
The values in the loadSched array specify the thresholds for the corresponding load indices. 
.PP
Only if the current values of all specified load indices of a host are within (below or above, depending on the meaning of the load index) their corresponding thresholds may the suspended job be resumed on this host.
.PP
For an explanation of the entries in the loadSched, see \fBlsb_hostinfo\fP. 
.SS "float* \fBjobInfoEnt::loadStop\fP"
.PP
The values in the loadStop array specify the thresholds for job suspension; if any of the current load index values of the host crosses its threshold, the job will be suspended. 
.PP
For an explanation of the entries in the loadStop, see \fBlsb_hostinfo\fP. 
.SS "struct \fBsubmit\fP \fBjobInfoEnt::submit\fP"
.PP
Structure for \fBlsb_submit\fP call. 
.PP

.SS "int \fBjobInfoEnt::exitStatus\fP"
.PP
Job exit status. 
.PP

.SS "int \fBjobInfoEnt::execUid\fP"
.PP
Mapped UNIX user ID on the execution host. 
.PP

.SS "char* \fBjobInfoEnt::execHome\fP"
.PP
Home directory for the job on the execution host. 
.PP

.SS "char* \fBjobInfoEnt::execCwd\fP"
.PP
Current working directory for the job on the execution host. 
.PP

.SS "char* \fBjobInfoEnt::execUsername\fP"
.PP
Mapped user name on the execution host. 
.PP

.SS "time_t \fBjobInfoEnt::jRusageUpdateTime\fP"
.PP
Time of the last job resource usage update. 
.PP

.SS "struct \fBjRusage\fP \fBjobInfoEnt::runRusage\fP"
.PP
Contains resource usage information for the job. 
.PP

.SS "int \fBjobInfoEnt::jType\fP"
.PP
Job type.N_JOB, N_GROUP, N_HEAD. 
.PP
.SS "char* \fBjobInfoEnt::parentGroup\fP"
.PP
The parent job group of a job or job group. 
.PP

.SS "char* \fBjobInfoEnt::jName\fP"
.PP
If jType is JGRP_NODE_GROUP, then it is the job group name. 
.PP
Otherwise, it is the job name. 
.SS "int \fBjobInfoEnt::counter\fP[NUM_JGRP_COUNTERS]"
.PP
Index into the counter array, only used for job arrays. 
.PP
Possible index values are shown in \fBjobgroup_counterIndex\fP 
.SS "u_short \fBjobInfoEnt::port\fP"
.PP
Service port of the job. 
.PP

.SS "int \fBjobInfoEnt::jobPriority\fP"
.PP
Job dynamic priority. 
.PP
.SS "int \fBjobInfoEnt::numExternalMsg\fP"
.PP
The number of external messages in the job. 
.PP

.SS "struct \fBjobExternalMsgReply\fP** \fBjobInfoEnt::externalMsg\fP"
.PP
This structure contains the information required to define an external message reply. 
.PP

.SS "int \fBjobInfoEnt::clusterId\fP"
.PP
MultiCluster cluster ID. 
.PP
If clusterId is greater than or equal to 0, the job is a pending remote job, and \fBlsb_readjobinfo\fP checks for host_name@cluster_name. If host name is needed, it should be found in jInfoH->remoteHosts. If the remote host name is not available, the constant string remoteHost is used. 
.SS "char* \fBjobInfoEnt::detailReason\fP"
.PP
Detail reason field. 
.PP
.SS "float \fBjobInfoEnt::idleFactor\fP"
.PP
Idle factor for job exception handling. 
.PP
If the job idle factor is less than the specified threshold, LSF invokes LSF_SERVERDIR/eadmin to trigger the action for a job idle exception. 
.SS "int \fBjobInfoEnt::exceptMask\fP"
.PP
Job exception handling mask. 
.PP
.SS "char* \fBjobInfoEnt::additionalInfo\fP"
.PP
Placement information of LSF HPC jobs.Placement information of LSF HPC jobs.Arbitrary information of a job stored as a string currently used by rms_rid and rms_alloc. 
.PP
.SS "int \fBjobInfoEnt::exitInfo\fP"
.PP
Job termination reason. 
.PP
See lsbatch.h. 
.SS "int \fBjobInfoEnt::warningTimePeriod\fP"
.PP
Job warning time period in seconds; -1 if unspecified. 
.PP

.SS "char* \fBjobInfoEnt::warningAction\fP"
.PP
Warning action, SIGNAL | CHKPNT | command, NULL if unspecified. 
.PP
.SS "char* \fBjobInfoEnt::chargedSAAP\fP"
.PP
SAAP charged for job. 
.PP
.SS "char* \fBjobInfoEnt::execRusage\fP"
.PP
The rusage satisfied at job runtime. 
.PP
.SS "time_t \fBjobInfoEnt::rsvInActive\fP"
.PP
The time when advance reservation expired or was deleted. 
.PP

.SS "int \fBjobInfoEnt::numLicense\fP"
.PP
The number of licenses reported from License Scheduler. 
.PP

.SS "char** \fBjobInfoEnt::licenseNames\fP"
.PP
License Scheduler license names. 
.PP

.SS "float \fBjobInfoEnt::aps\fP"
.PP
Absolute priority scheduling (APS) priority value. 
.PP

.SS "float \fBjobInfoEnt::adminAps\fP"
.PP
Absolute priority scheduling (APS) string set by administrators to denote static system APS value. 
.PP
.SS "int \fBjobInfoEnt::runTime\fP"
.PP
The real runtime on the execution host. 
.PP

.SS "int \fBjobInfoEnt::reserveCnt\fP"
.PP
How many kinds of resource are reserved by this job. 
.PP
.SS "struct \fBreserveItem\fP* \fBjobInfoEnt::items\fP"
.PP
Detail reservation information for each kind of resource. 
.PP
.SS "float \fBjobInfoEnt::adminFactorVal\fP"
.PP
Absolute priority scheduling (APS) string set by administrators to denote ADMIN factor APS value. 
.PP

.SS "int \fBjobInfoEnt::resizeMin\fP"
.PP
Pending resize min. 
.PP
0, if no resize pending. 
.SS "int \fBjobInfoEnt::resizeMax\fP"
.PP
Pending resize max. 
.PP
0, if no resize pending 
.SS "time_t \fBjobInfoEnt::resizeReqTime\fP"
.PP
Time when pending request was issued. 
.PP
.SS "int \fBjobInfoEnt::jStartNumExHosts\fP"
.PP
Number of hosts when job starts. 
.PP
.SS "char** \fBjobInfoEnt::jStartExHosts\fP"
.PP
Host list when job starts. 
.PP
.SS "time_t \fBjobInfoEnt::lastResizeTime\fP"
.PP
Last time when job allocation changed. 
.PP


.ad l
.nh
.SH NAME
jobExternalMsgReply \- structure \fBjobExternalMsgReply\fP contains the information required to define an external message reply.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "LS_LONG_INT \fBjobId\fP"
.br
.ti -1c
.RI "int \fBmsgIdx\fP"
.br
.ti -1c
.RI "char * \fBdesc\fP"
.br
.ti -1c
.RI "int \fBuserId\fP"
.br
.ti -1c
.RI "long \fBdataSize\fP"
.br
.ti -1c
.RI "time_t \fBpostTime\fP"
.br
.ti -1c
.RI "int \fBdataStatus\fP"
.br
.ti -1c
.RI "char * \fBuserName\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
structure \fBjobExternalMsgReply\fP contains the information required to define an external message reply. 
.SH "Field Documentation"
.PP 
.SS "LS_LONG_INT \fBjobExternalMsgReply::jobId\fP"
.PP
The system generated job Id of the job associated with the message. 
.PP

.SS "int \fBjobExternalMsgReply::msgIdx\fP"
.PP
The message index. 
.PP
A job can have more than one message. Use msgIdx in an array to index messages. 
.SS "char* \fBjobExternalMsgReply::desc\fP"
.PP
The message you want to read. 
.PP

.SS "int \fBjobExternalMsgReply::userId\fP"
.PP
The user Id of the author of the message. 
.PP

.SS "long \fBjobExternalMsgReply::dataSize\fP"
.PP
The size of the data file attached. 
.PP
If no data file is attached, the size is 0. 
.SS "time_t \fBjobExternalMsgReply::postTime\fP"
.PP
The time the message was posted. 
.PP

.SS "int \fBjobExternalMsgReply::dataStatus\fP"
.PP
The status of the attached data file. 
.PP
The status of the data file can be one of the following: 
.br
 EXT_DATA_UNKNOWN 
.br
 Transferring the message's data file. 
.br
 EXT_DATA_NOEXIST 
.br
 The message does not have an attached data file. 
.br
 EXT_DATA_AVAIL 
.br
 The message's data file is available. 
.br
 EXT_DATA_UNAVAIL 
.br
 The message's data file is corrupt. 
.SS "char* \fBjobExternalMsgReply::userName\fP"
.PP
The author of the msg. 
.PP


.ad l
.nh
.SH NAME
jRusage \- Information about job using resource.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBmem\fP"
.br
.ti -1c
.RI "int \fBswap\fP"
.br
.ti -1c
.RI "int \fButime\fP"
.br
.ti -1c
.RI "int \fBstime\fP"
.br
.ti -1c
.RI "int \fBnpids\fP"
.br
.ti -1c
.RI "struct \fBpidInfo\fP * \fBpidInfo\fP"
.br
.ti -1c
.RI "int \fBnpgids\fP"
.br
.ti -1c
.RI "int * \fBpgid\fP"
.br
.ti -1c
.RI "int \fBnthreads\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Information about job using resource. 
.SH "Field Documentation"
.PP 
.SS "int \fBjRusage::mem\fP"
.PP
Total resident memory usage in kbytes of all currently running processes in given process groups. 
.PP

.SS "int \fBjRusage::swap\fP"
.PP
Total virtual memory usage in kbytes of all currently running processes in given process groups. 
.PP

.SS "int \fBjRusage::utime\fP"
.PP
Cumulative total user time in seconds. 
.PP
.SS "int \fBjRusage::stime\fP"
.PP
Cumulative total system time in seconds. 
.PP
.SS "int \fBjRusage::npids\fP"
.PP
Number of currently active processes in given process groups. 
.PP

.SS "struct \fBpidInfo\fP* \fBjRusage::pidInfo\fP"
.PP
Array of currently active processes' information. 
.PP
.SS "int \fBjRusage::npgids\fP"
.PP
Number of currently active process groups. 
.PP
.SS "int* \fBjRusage::pgid\fP"
.PP
Array of currently active process group ids. 
.PP
.SS "int \fBjRusage::nthreads\fP"
.PP
Number of currently active threads in given process groups. 
.PP


.ad l
.nh
.SH NAME
pidInfo \- Information about a process with its process ID pid.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBpid\fP"
.br
.ti -1c
.RI "int \fBppid\fP"
.br
.ti -1c
.RI "int \fBpgid\fP"
.br
.ti -1c
.RI "int \fBjobid\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Information about a process with its process ID pid. 
.SH "Field Documentation"
.PP 
.SS "int \fBpidInfo::pid\fP"
.PP
Process id. 
.PP
.SS "int \fBpidInfo::ppid\fP"
.PP
Parent's process id. 
.PP
.SS "int \fBpidInfo::pgid\fP"
.PP
Processes' group id. 
.PP
.SS "int \fBpidInfo::jobid\fP"
.PP
Process' cray job id (only on Cray). 
.PP


.ad l
.nh
.SH NAME
reserveItem \- structure \fBreserveItem\fP  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char * \fBresName\fP"
.br
.ti -1c
.RI "int \fBnHost\fP"
.br
.ti -1c
.RI "float * \fBvalue\fP"
.br
.ti -1c
.RI "int \fBshared\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
structure \fBreserveItem\fP 
.SH "Field Documentation"
.PP 
.SS "char* \fBreserveItem::resName\fP"
.PP
Name of the resource to reserve. 
.PP

.SS "int \fBreserveItem::nHost\fP"
.PP
The number of hosts to reserve this resource. 
.PP

.SS "float* \fBreserveItem::value\fP"
.PP
Amount of reservation is made on each host. 
.PP
Some hosts may reserve 0. 
.SS "int \fBreserveItem::shared\fP"
.PP
Flag of shared or host-base resource. 
.PP


.ad l
.nh
.SH NAME
submit \- \fBsubmit\fP request structure.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBoptions\fP"
.br
.ti -1c
.RI "int \fBoptions2\fP"
.br
.ti -1c
.RI "char * \fBjobName\fP"
.br
.ti -1c
.RI "char * \fBqueue\fP"
.br
.ti -1c
.RI "int \fBnumAskedHosts\fP"
.br
.ti -1c
.RI "char ** \fBaskedHosts\fP"
.br
.ti -1c
.RI "char * \fBresReq\fP"
.br
.ti -1c
.RI "int \fBrLimits\fP [LSF_RLIM_NLIMITS]"
.br
.ti -1c
.RI "char * \fBhostSpec\fP"
.br
.ti -1c
.RI "int \fBnumProcessors\fP"
.br
.ti -1c
.RI "char * \fBdependCond\fP"
.br
.ti -1c
.RI "char * \fBtimeEvent\fP"
.br
.ti -1c
.RI "time_t \fBbeginTime\fP"
.br
.ti -1c
.RI "time_t \fBtermTime\fP"
.br
.ti -1c
.RI "int \fBsigValue\fP"
.br
.ti -1c
.RI "char * \fBinFile\fP"
.br
.ti -1c
.RI "char * \fBoutFile\fP"
.br
.ti -1c
.RI "char * \fBerrFile\fP"
.br
.ti -1c
.RI "char * \fBcommand\fP"
.br
.ti -1c
.RI "char * \fBnewCommand\fP"
.br
.ti -1c
.RI "time_t \fBchkpntPeriod\fP"
.br
.ti -1c
.RI "char * \fBchkpntDir\fP"
.br
.ti -1c
.RI "int \fBnxf\fP"
.br
.ti -1c
.RI "struct \fBxFile\fP * \fBxf\fP"
.br
.ti -1c
.RI "char * \fBpreExecCmd\fP"
.br
.ti -1c
.RI "char * \fBmailUser\fP"
.br
.ti -1c
.RI "int \fBdelOptions\fP"
.br
.ti -1c
.RI "int \fBdelOptions2\fP"
.br
.ti -1c
.RI "char * \fBprojectName\fP"
.br
.ti -1c
.RI "int \fBmaxNumProcessors\fP"
.br
.ti -1c
.RI "char * \fBloginShell\fP"
.br
.ti -1c
.RI "char * \fBuserGroup\fP"
.br
.ti -1c
.RI "char * \fBexceptList\fP"
.br
.ti -1c
.RI "int \fBuserPriority\fP"
.br
.ti -1c
.RI "char * \fBrsvId\fP"
.br
.ti -1c
.RI "char * \fBjobGroup\fP"
.br
.ti -1c
.RI "char * \fBsla\fP"
.br
.ti -1c
.RI "char * \fBextsched\fP"
.br
.ti -1c
.RI "int \fBwarningTimePeriod\fP"
.br
.ti -1c
.RI "char * \fBwarningAction\fP"
.br
.ti -1c
.RI "char * \fBlicenseProject\fP"
.br
.ti -1c
.RI "int \fBoptions3\fP"
.br
.ti -1c
.RI "int \fBdelOptions3\fP"
.br
.ti -1c
.RI "char * \fBapp\fP"
.br
.ti -1c
.RI "int \fBjsdlFlag\fP"
.br
.ti -1c
.RI "char * \fBjsdlDoc\fP"
.br
.ti -1c
.RI "void * \fBcorrelator\fP"
.br
.ti -1c
.RI "char * \fBapsString\fP"
.br
.ti -1c
.RI "char * \fBpostExecCmd\fP"
.br
.ti -1c
.RI "char * \fBcwd\fP"
.br
.ti -1c
.RI "int \fBruntimeEstimation\fP"
.br
.ti -1c
.RI "char * \fBrequeueEValues\fP"
.br
.ti -1c
.RI "int \fBinitChkpntPeriod\fP"
.br
.ti -1c
.RI "int \fBmigThreshold\fP"
.br
.ti -1c
.RI "char * \fBnotifyCmd\fP"
.br
.ti -1c
.RI "char * \fBjobDescription\fP"
.br
.ti -1c
.RI "struct \fBsubmit_ext\fP * \fBsubmitExt\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBsubmit\fP request structure. 
.SH "Field Documentation"
.PP 
.SS "int \fBsubmit::options\fP"
.PP
<lsf/lsbatch.h> defines the flags in \fBlsb_submit_options\fP constructed from bits. 
.PP
These flags correspond to some of the options of the bsub command line. Use the bitwise OR to set more than one flag. 
.SS "int \fBsubmit::options2\fP"
.PP
Extended bitwise inclusive OR of some of the flags in \fBlsb_submit_options2\fP. 
.PP

.SS "char* \fBsubmit::jobName\fP"
.PP
The job name. 
.PP
If jobName is NULL, command is used as the job name. 
.SS "char* \fBsubmit::queue\fP"
.PP
Submit the job to this queue. 
.PP
If queue is NULL, \fBsubmit\fP the job to a system default queue. 
.SS "int \fBsubmit::numAskedHosts\fP"
.PP
The number of invoker specified candidate hosts for running the job. 
.PP
If numAskedHosts is 0, all qualified hosts will be considered. 
.SS "char** \fBsubmit::askedHosts\fP"
.PP
The array of names of invoker specified candidate hosts. 
.PP
The number of hosts is given by numAskedHosts. 
.SS "char* \fBsubmit::resReq\fP"
.PP
The resource requirements of the job. 
.PP
If resReq is NULL, the batch system will try to obtain resource requirements for command from the remote task lists (see \fBls_task\fP ). If the task does not appear in the remote task lists, then the default resource requirement is to run on host() of the same type. 
.SS "int \fBsubmit::rLimits\fP[LSF_RLIM_NLIMITS]"
.PP
Limits on the consumption of system resources by all processes belonging to this job. 
.PP
See getrlimit() for details. If an element of the array is -1, there is no limit for that resource. For the constants used to index the array, see \fBlsb_queueinfo\fP . 
.SS "char* \fBsubmit::hostSpec\fP"
.PP
Specify the host model to use for scaling rLimits[LSF_RLIMIT_CPU] and rLimits[LSF_RLIMIT_RUN]. 
.PP
(See \fBlsb_queueinfo\fP). If hostSpec is NULL, the local host is assumed. 
.SS "int \fBsubmit::numProcessors\fP"
.PP
The initial number of processors needed by a (parallel) job. 
.PP
The default is 1. 
.SS "char* \fBsubmit::dependCond\fP"
.PP
The job dependency condition. 
.PP

.SS "char* \fBsubmit::timeEvent\fP"
.PP
Time event string. 
.PP
.SS "time_t \fBsubmit::beginTime\fP"
.PP
Dispatch the job on or after beginTime, where beginTime is the number of seconds since 00:00:00 GMT, Jan. 
.PP
1, 1970 (See time(), ctime()). If beginTime is 0, start the job as soon as possible. 
.SS "time_t \fBsubmit::termTime\fP"
.PP
The job termination deadline. 
.PP
If the job is still running at termTime, it will be sent a USR2 signal. If the job does not terminate within 10 minutes after being sent this signal, it will be ended. termTime has the same representation as beginTime. If termTime is 0, allow the job to run until it reaches a resource limit. 
.SS "int \fBsubmit::sigValue\fP"
.PP
Applies to jobs submitted to a queue that has a run window (See \fBlsb_queueinfo\fP). 
.PP
Send signal sigValue to the job 10 minutes before the run window is going to close. This allows the job to clean up or checkpoint itself, if desired. If the job does not terminate 10 minutes after being sent this signal, it will be suspended. 
.SS "char* \fBsubmit::inFile\fP"
.PP
The path name of the job's standard input file. 
.PP
If inFile is NULL, use /dev/null as the default. 
.SS "char* \fBsubmit::outFile\fP"
.PP
The path name of the job's standard output file. 
.PP
If outFile is NULL, the job's output will be mailed to the submitter 
.SS "char* \fBsubmit::errFile\fP"
.PP
The path name of the job's standard error output file. 
.PP
If errFile is NULL, the standard error output will be merged with the standard output of the job. 
.SS "char* \fBsubmit::command\fP"
.PP
When submitting a job, the command line of the job. 
.PP
When modifying a job, a mandatory parameter that should be set to jobId in string format. 
.SS "char* \fBsubmit::newCommand\fP"
.PP
New command line for bmod. 
.PP

.SS "time_t \fBsubmit::chkpntPeriod\fP"
.PP
The job is checkpointable with a period of chkpntPeriod seconds. 
.PP
The value 0 disables periodic checkpointing. 
.SS "char* \fBsubmit::chkpntDir\fP"
.PP
The directory where the chk directory for this job checkpoint files will be created. 
.PP
When a job is checkpointed, its checkpoint files are placed in chkpntDir/chk. chkpntDir can be a relative or absolute path name. 
.SS "int \fBsubmit::nxf\fP"
.PP
The number of files to transfer. 
.PP

.SS "struct \fBxFile\fP* \fBsubmit::xf\fP"
.PP
The array of file transfer specifications. 
.PP
(The \fBxFile\fP structure is defined in <lsf/lsbatch.h>.) 
.SS "char* \fBsubmit::preExecCmd\fP"
.PP
The job pre-execution command. 
.PP

.SS "char* \fBsubmit::mailUser\fP"
.PP
The user that results are mailed to. 
.PP

.SS "int \fBsubmit::delOptions\fP"
.PP
Delete options in options field. 
.PP

.SS "int \fBsubmit::delOptions2\fP"
.PP
Extended delete options in options2 field. 
.PP

.SS "char* \fBsubmit::projectName\fP"
.PP
The name of the project the job will be charged to. 
.PP

.SS "int \fBsubmit::maxNumProcessors\fP"
.PP
Maximum number of processors required to run the job. 
.PP

.SS "char* \fBsubmit::loginShell\fP"
.PP
Specified login shell used to initialize the execution environment for the job (see the -L option of bsub). 
.PP

.SS "char* \fBsubmit::userGroup\fP"
.PP
The name of the LSF user group (see lsb.users) to which the job will belong. 
.PP
(see the -G option of bsub) 
.SS "char* \fBsubmit::exceptList\fP"
.PP
Passes the exception handlers to mbatchd during a job. 
.PP
(see the -X option of bsub). Specifies execption handlers that tell the system how to respond to an exceptional condition for a job. An action is performed when any one of the following exceptions is detected:
.PP
.IP "\(bu" 2
\fBmissched\fP - A job has not been scheduled within the time event specified in the -T option.
.IP "\(bu" 2
\fBoverrun\fP - A job did not finish in its maximum time (maxtime).
.IP "\(bu" 2
\fBunderrun\fP - A job finished before it reaches its minimum running time (mintime).
.IP "\(bu" 2
\fBabend\fP - A job terminated abnormally. Test an exit code that is one value, two or more comma separated values, or a range of values (two values separated by a `-' to indivate a range). If the job exits with one of the tested values, the abend condition is detected.
.IP "\(bu" 2
\fBstartfail\fP - A job did not start due to insufficient system resources.
.IP "\(bu" 2
\fBcantrun\fP - A job did not start because a dependency condition (see the -w option of bsub) is invalid, or a startfail exception occurs 20 times in a row and the job is suspended. For jobs submitted with a time event (see the -T option of bsub), the cantrun exception condition can be detected once in each time event.
.IP "\(bu" 2
\fBhostfail\fP - The host running a job becomes unavailable.
.PP
.PP
When one or more of the above exceptions is detected, you can specify one of the following actions to be taken:
.IP "\(bu" 2
\fBalarm\fP - Triggers an alarm incident (see balarms(1)). The alarm can be viewed, acknowledged and resolved.
.IP "\(bu" 2
\fBsetexcept\fP - Causes the exception event event_name to be set. Other jobs waiting on the exception event event_name specified through the -w option can be triggered. event_name is an arbitrary string.
.IP "\(bu" 2
\fBrerun\fP - Causes the job to be rescheduled for execution. Any dependencies associated with the job must be satisfied before re-execution takes place. The rerun action can only be specified for the abend and hostfail exception conditions. The startfail exception condition automatically triggers the rerun action.
.IP "\(bu" 2
\fBkill\fP - Causes the current execution of the job to be terminated. This action can only be specified for the overrun exception condition. 
.PP

.SS "int \fBsubmit::userPriority\fP"
.PP
User priority for fairshare scheduling. 
.PP

.SS "char* \fBsubmit::rsvId\fP"
.PP
Reservation ID for advance reservation. 
.PP

.SS "char* \fBsubmit::jobGroup\fP"
.PP
Job group under which the job runs. 
.PP

.SS "char* \fBsubmit::sla\fP"
.PP
SLA under which the job runs. 
.PP

.SS "char* \fBsubmit::extsched\fP"
.PP
External scheduler options. 
.PP

.SS "int \fBsubmit::warningTimePeriod\fP"
.PP
Warning time period in seconds, -1 if unspecified. 
.PP

.SS "char* \fBsubmit::warningAction\fP"
.PP
Warning action, SIGNAL | CHKPNT | command, NULL if unspecified. 
.PP

.SS "char* \fBsubmit::licenseProject\fP"
.PP
License Scheduler project name. 
.PP

.SS "int \fBsubmit::options3\fP"
.PP
Extended bitwise inclusive OR of options flags in \fBlsb_submit_options3\fP. 
.PP

.SS "int \fBsubmit::delOptions3\fP"
.PP
Extended delete options in options3 field. 
.PP

.SS "char* \fBsubmit::app\fP"
.PP
Application profile under which the job runs. 
.PP

.SS "int \fBsubmit::jsdlFlag\fP"
.PP
-1 if no -jsdl and -jsdl_strict options. 
.PP
.IP "\(bu" 2
0 -jsdl_strict option
.IP "\(bu" 2
1 -jsdl option 
.PP

.SS "char* \fBsubmit::jsdlDoc\fP"
.PP
JSDL filename. 
.PP
.SS "void* \fBsubmit::correlator\fP"
.PP
ARM correlator. 
.PP
.SS "char* \fBsubmit::apsString\fP"
.PP
Absolute priority scheduling string set by administrators to denote static system APS value or ADMIN factor APS value. 
.PP
This field is ignored by \fBlsb_submit\fP. 
.SS "char* \fBsubmit::postExecCmd\fP"
.PP
Post-execution commands specified by -Ep option of bsub and bmod. 
.PP

.SS "char* \fBsubmit::cwd\fP"
.PP
Current working directory specified by -cwd option of bsub and bmod. 
.PP

.SS "int \fBsubmit::runtimeEstimation\fP"
.PP
Runtime estimate specified by -We option of bsub and bmod. 
.PP

.SS "char* \fBsubmit::requeueEValues\fP"
.PP
Job-level requeue exit values specified by -Q option of bsub and bmod. 
.PP

.SS "int \fBsubmit::initChkpntPeriod\fP"
.PP
Initial checkpoint period specified by -k option of bsub and bmod. 
.PP

.SS "int \fBsubmit::migThreshold\fP"
.PP
Job migration threshold specified by -mig option of bsub and bmod. 
.PP

.SS "char* \fBsubmit::notifyCmd\fP"
.PP
Job resize notification command to be invoked on the first execution host when a resize request has been satisfied. 
.PP

.SS "char* \fBsubmit::jobDescription\fP"
.PP
Job description. 
.PP

.SS "struct \fBsubmit_ext\fP* \fBsubmit::submitExt\fP"
.PP
For new options in future. 
.PP


.ad l
.nh
.SH NAME
external_msg_processing \- options for \fBlsb_readjobmsg\fP call  

.PP
.SS "Modules"

.in +1c
.ti -1c
.RI "\fBexternal_msg_post\fP"
.br
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBEXT_MSG_READ\fP   0x04"
.br
.ti -1c
.RI "#define \fBEXT_ATTA_READ\fP   0x08"
.br
.ti -1c
.RI "#define \fBEXT_MSG_REPLAY\fP   0x10"
.br
.ti -1c
.RI "#define \fBEXT_MSG_POST_NOEVENT\fP   0x20"
.br
.in -1c
.SH "Detailed Description"
.PP 
options for \fBlsb_readjobmsg\fP call 
.SH "Define Documentation"
.PP 
.SS "#define EXT_MSG_READ   0x04"
.PP
Read the external job message. 
.PP
There is no attached data file. 
.SS "#define EXT_ATTA_READ   0x08"
.PP
Read the external job message and data file posted to the job.If there is no data file attached, the error message 'The attached data of the message is not available' is displayed, and the external job message is displayed. 
.PP

.SS "#define EXT_MSG_REPLAY   0x10"
.PP
Replay the external message. 
.PP
.SS "#define EXT_MSG_POST_NOEVENT   0x20"
.PP
Post the external job noevent message. 
.PP
.ad l
.nh
.SH NAME
group_nodetypes \- define statements group node types.  

.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBJGRP_NODE_JOB\fP   1"
.br
.ti -1c
.RI "#define \fBJGRP_NODE_GROUP\fP   2"
.br
.ti -1c
.RI "#define \fBJGRP_NODE_ARRAY\fP   3"
.br
.ti -1c
.RI "#define \fBJGRP_NODE_SLA\fP   4"
.br
.in -1c
.SH "Detailed Description"
.PP 
define statements group node types. 
.SH "Define Documentation"
.PP 
.SS "#define JGRP_NODE_JOB   1"
.PP
Job. 
.PP
.SS "#define JGRP_NODE_GROUP   2"
.PP
Group. 
.PP
.SS "#define JGRP_NODE_ARRAY   3"
.PP
Array. 
.PP
.SS "#define JGRP_NODE_SLA   4"
.PP
SLA. 
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for Platform LSF 7.0.6 C API Reference from the source code.
