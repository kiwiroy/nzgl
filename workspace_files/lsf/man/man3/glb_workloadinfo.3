.TH "glb_workloadinfo" 3 "3 Sep 2009" "Version 7.0" "Platform LSF 7.0.6 C API Reference" \" -*- nroff -*-
.ad l
.nh
.SH NAME
glb_workloadinfo \- glb_workloadinfo 
Returns an array of workload distribution information.
.PP
\fBglb_workloadinfo\fP returns an array of \fBglbWorkload\fP structures, which contains detailed LSF and non-LSF workload distribution information for a particular feature.
.PP
\fB #include <glb/glb.h>\fP
.PP
\fB struct \fBglbWorkload\fP *glb_workloadinfo(void) \fP
.PP
.SH "Parameters:"
\fInone\fP 
.PP
.SH "Data Structures:" 
.PP
\fBglbWorkload\fP 
.br
\fBworkloadBasket\fP
.PP
.SH "Define Statements:" 
.PP
none
.PP
.SH "Returns:"
*glbWorkload 
.br
 A linked list of workload distribution inforation for a particular feature.
.PP
.SH "Errors:" 
.PP
On failure, glberrno is set to indicate the error.
.PP
.SH "Equivalent line commands:" 
.PP
none
.PP
.SH "Files:" 
.PP
none
.PP
.SH "See also:"
\fBglb_info\fP 
.PP
\fBglb_jobinfo\fP 
.PP
\fBglb_perror\fP 
.PP
\fBglb_userinfo\fP 
.PP
\fBglb_workloadinfo\fP 
.PP

.ad l
.nh
.SH NAME
glbWorkload \- glb Workload  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "struct \fBglbWorkload\fP * \fBnext\fP"
.br
.ti -1c
.RI "char * \fBfeature\fP"
.br
.ti -1c
.RI "char * \fBsDomain\fP"
.br
.ti -1c
.RI "struct \fBworkloadBasket\fP \fBlsf\fP"
.br
.ti -1c
.RI "struct \fBworkloadBasket\fP \fBnonlsf\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
glb Workload 
.SH "Field Documentation"
.PP 
.SS "struct \fBglbWorkload\fP* \fBglbWorkload::next\fP"
.PP
next item in the list 
.PP
.SS "char* \fBglbWorkload::feature\fP"
.PP
feature name 
.PP
.SS "char* \fBglbWorkload::sDomain\fP"
.PP
service domain 
.PP
.SS "struct \fBworkloadBasket\fP \fBglbWorkload::lsf\fP"
.PP
workload of LSF 
.PP
.SS "struct \fBworkloadBasket\fP \fBglbWorkload::nonlsf\fP"
.PP
workload of non-LSF 
.PP


.ad l
.nh
.SH NAME
workloadBasket \- Capture the WORKLOAD_DISTRIBUTION parameter and its dynamic allocation inside the license scheduler.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char * \fBowner\fP"
.br
.ti -1c
.RI "double \fBshare\fP"
.br
.ti -1c
.RI "int \fBdeserve\fP"
.br
.ti -1c
.RI "int \fBtotal\fP"
.br
.ti -1c
.RI "int \fBuse\fP"
.br
.ti -1c
.RI "int \fBfree\fP"
.br
.ti -1c
.RI "int \fBenforce\fP"
.br
.ti -1c
.RI "time_t \fBt\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Capture the WORKLOAD_DISTRIBUTION parameter and its dynamic allocation inside the license scheduler. 

The API glb_workloaddistrib() returns a linked list of those babies. blstat -s displays the status of the workloads. Each workload has its own basket of data that represents how many license it deserves based on configuration and how many is actually using. 
.SH "Field Documentation"
.PP 
.SS "char* \fBworkloadBasket::owner\fP"
.PP
lsf or non_lsf 
.PP
.SS "double \fBworkloadBasket::share\fP"
.PP
shares 
.PP
.SS "int \fBworkloadBasket::deserve\fP"
.PP
shares * total 
.PP
.SS "int \fBworkloadBasket::total\fP"
.PP
total in SD lsf + non_lsf 
.PP
.SS "int \fBworkloadBasket::use\fP"
.PP
in use by the workload 
.PP
.SS "int \fBworkloadBasket::free\fP"
.PP
free for the workload 
.PP
.SS "int \fBworkloadBasket::enforce\fP"
.PP
the distribution is enforced 
.PP
.SS "time_t \fBworkloadBasket::t\fP"
.PP
when that jazz all happened 
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Platform LSF 7.0.6 C API Reference from the source code.
