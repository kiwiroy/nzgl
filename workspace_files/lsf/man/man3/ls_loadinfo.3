.TH "ls_loadinfo" 3 "3 Sep 2009" "Version 7.0" "Platform LSF 7.0.6 C API Reference" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ls_loadinfo \- ls_loadinfo 
Returns the requested load indices of the hosts that satisfy specified resource requirements.
.PP
This routine returns the dynamic load information of qualified hosts.
.PP
.SH "ls_loadinfo\fP returns the requested load indices of the hosts that satisfy the specified resource requirements. The result of this call is an array of \fBhostLoad\fP data structures as defined in <lsf/lsf.h>. The status component of the \fBhostLoad\fP structure is an array of integers. The high order 16 bits of the first int are used to mark the operation status of the host. Possible states defined in <lsf/lsf.h> are as follows: \fBstatus_ls_load".
.PP
.SH "ls_load\fP returns all load indices. The result of this call is an array of \fBhostLoad\fP data structures as defined in <lsf/lsf.h>. The status component of the \fBhostLoad\fP structure is an array of integers. The high order 16 bits of the first int are used to mark the operation status of the host. Possible states defined in <lsf/lsf.h> are as follows: \fBstatus_ls_load".
.PP
The low order 16 bits of the first int are reserved. The other int() of the status array is used to indicate the load status of the host. If any of these bits is set, then the host is considered to be busy (overloaded). Each bit (starting from bit 0) in int() represents one load index that caused the host to be busy. If bit i is set then the load index corresponding to li[i] caused the host to be busy. An int can be used to for 32 load indices. If number of load indices on the host, both built-in and user defined, are more than 32, more than one int will be used.
.PP
Programmers can use macros to test the status of a host. The most commonly used macros include:
.PP
.IP "\(bu" 2
LS_ISUNAVAIL(status)
.IP "\(bu" 2
LS_ISBUSY(status)
.IP "\(bu" 2
LS_ISBUSYON(status, index)
.IP "\(bu" 2
LS_ISLOCKEDU(status)
.IP "\(bu" 2
LS_ISLOCKEDW(status)
.IP "\(bu" 2
LS_ISLOCKED(status)
.IP "\(bu" 2
LS_ISRESDOWN(status)
.IP "\(bu" 2
LS_ISUNLICENSED(status)
.IP "\(bu" 2
LS_ISOK(status)
.PP
.PP
In the \fBhostLoad\fP data structure, the li vector contains load information on various resources on a host. The elements of the load vector are determined by the namelist parameter.
.PP
The returned \fBhostLoad\fP array is sorted according to the order section of the resource requirements, resreq (or, if not specified, the 1-minute average CPU queue length and paging rate), with the lightest loaded host being the first.
.PP
hostlist is an array of listsize host or cluster names. If not NULL, then only load information about hosts in this list will be returned.
.PP
\fB#include <lsf/lsf.h>\fP
.PP
\fB struct \fBhostLoad\fP *ls_loadinfo(char *resreq, int *numhosts, int options, char *fromhost, char **hostlist, int listsize, char ***namelist)\fP
.PP
.SH "Parameters:"
\fI*resreq\fP resreq is a char string describing resource requirements. Only the load vectors of the hosts satisfying the requirements will be returned. If resreq is NULL, the load vectors of all hosts will be returned.
.br
\fI*numhosts\fP numhosts is the address of an int which initially contains the number of hosts requested. If *numhosts is 0, request information on as many hosts as satisfy resreq. If numhosts is NULL, requests load information on one (1) host. If numhosts is not NULL, then *numhosts will contain the number of \fBhostLoad\fP records returned on success.
.br
\fIoptions\fP options is constructed from the bitwise inclusive OR of zero or more of the following flags, as defined in <lsf/lsf.h>: \fBoptions_ls_load\fP.
.br
\fI*fromhost\fP fromhost is the name of the host from which a task might be transferred. This parameter affects the host selection in such a way as to give preference to fromhost if the load on other hosts is not much better. If fromhost is NULL, the local host is assumed.
.br
\fI**hostlist\fP An array of listsize host or cluster names.
.br
\fIlistsize\fP listsize gives the number of host or cluster names in hostlist.
.br
\fI***namelist\fP namelist is an input/output parameter. On input it points to a null-terminated list of names of indices whose values will be returned in the li vector for each host selected. Setting namelist to point to NULL returns all indices. On return it points to a null-terminated list of the names of the indices returned in the li load vector for each host. Each element of the load vector is a floating point number between 0.0 and INFINIT_LOAD (defined in lsf.h). The index value is set to INFINIT_LOAD to indicate an invalid or unknown value for an index. The indices in the li vector are ordered such that li[i] contains the value of index namelist[i]. If index namelist[i] is causing the host to be busy, then LS_ISBUSYON(status, i) will be TRUE. When the input namelist is NULL the output namelist is ordered such that the li vector can be indexed using constants defined in <lsf/lsf.h> as listed below: \fBindex_ls_loadinfo\fP.
.PP
.SH "Data Structures:" 
.PP
\fBhostLoad\fP 
.br
.PP
.SH "Define Statements:" 
.PP
\fBstatus_ls_load\fP 
.br
\fBoptions_ls_load\fP 
.br
\fBindex_ls_loadinfo\fP
.PP
.SH "Returns:"
struct \fBhostLoad\fP *:An array of \fBhostLoad\fP struct containing load information. 
.br
 Function was successful. 
.PP
NULL 
.br
 Function failed.
.PP
.SH "Errors:" 
.PP
Systems that conform to the Single UNIX specification are not required to detect error conditions for this function.
.PP
.SH "Equivalent line commands:" 
.PP
none
.PP
.SH "Files:" 
.PP
$LSF_CONFDIR/lsf.shared 
.br
$LSF_CONFDIR/lsf.cluster.cluster_name
.PP
.SH "See also:"
\fBls_load\fP 
.PP
\fBls_loadofhosts\fP 
.PP

.ad l
.nh
.SH NAME
hostLoad \- The host load information.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char \fBhostName\fP [MAXHOSTNAMELEN]"
.br
.ti -1c
.RI "int * \fBstatus\fP"
.br
.ti -1c
.RI "float * \fBli\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
The host load information. 
.SH "Field Documentation"
.PP 
.SS "char \fBhostLoad::hostName\fP[MAXHOSTNAMELEN]"
.PP
Host name. 
.PP
.SS "int* \fBhostLoad::status\fP"
.PP
Status of host. 
.PP
.SS "float* \fBhostLoad::li\fP"
.PP
Vector contains load information on various resources on a host. 
.PP


.ad l
.nh
.SH NAME
status_ls_load \- define statements used by \fBls_load\fP.  

.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBLIM_UNAVAIL\fP   0x00010000"
.br
.ti -1c
.RI "#define \fBLIM_LOCKEDU\fP   0x00020000"
.br
.ti -1c
.RI "#define \fBLIM_LOCKEDW\fP   0x00040000"
.br
.ti -1c
.RI "#define \fBLIM_BUSY\fP   0x00080000"
.br
.ti -1c
.RI "#define \fBLIM_RESDOWN\fP   0x00100000"
.br
.ti -1c
.RI "#define \fBLIM_UNLICENSED\fP   0x00200000"
.br
.ti -1c
.RI "#define \fBLIM_SBDDOWN\fP   0x00400000"
.br
.ti -1c
.RI "#define \fBLIM_LOCKEDM\fP   0x00800000"
.br
.ti -1c
.RI "#define \fBLIM_OK_MASK\fP   0x00bf0000"
.br
.ti -1c
.RI "#define \fBLIM_PEMDOWN\fP   0x01000000"
.br
.ti -1c
.RI "#define \fBLIM_LOCKEDU_RMS\fP   0x80000000"
.br
.in -1c
.SH "Detailed Description"
.PP 
define statements used by \fBls_load\fP. 
.SH "Define Documentation"
.PP 
.SS "#define LIM_UNAVAIL   0x00010000"
.PP
The host Load Information Manager (LIM) is unavailable. 
.PP
(e.g. the host is down or there is no LIM ). If LIM is unavailable the other information in the \fBhostLoad\fP structure is meaningless. 
.SS "#define LIM_LOCKEDU   0x00020000"
.PP
The host's LIM is locked by the root, LSF administrator or a user. 
.PP

.SS "#define LIM_LOCKEDW   0x00040000"
.PP
The host's LIM is locked by its run windows. 
.PP

.SS "#define LIM_BUSY   0x00080000"
.PP
The host is busy (overloaded). 
.PP

.SS "#define LIM_RESDOWN   0x00100000"
.PP
The host's Remote Execution Server (RES) is not available. 
.PP

.SS "#define LIM_UNLICENSED   0x00200000"
.PP
The host has no software license. 
.PP

.SS "#define LIM_SBDDOWN   0x00400000"
.PP
sbatchd is down 
.PP
.SS "#define LIM_LOCKEDM   0x00800000"
.PP
Locked by master lim. 
.PP
.SS "#define LIM_OK_MASK   0x00bf0000"
.PP
Mask used to get rid of other status; don't consider LIM_SBDDOWN. 
.PP
.SS "#define LIM_PEMDOWN   0x01000000"
.PP
PEM down or hang. 
.PP
.SS "#define LIM_LOCKEDU_RMS   0x80000000"
.PP
This bit is only used with in SIERRA_PRESTO. 
.PP
It forces MBD to close the host. 
.ad l
.nh
.SH NAME
options_ls_load \- define statements used by \fBls_load\fP.  

.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBEXACT\fP   0x01"
.br
.ti -1c
.RI "#define \fBOK_ONLY\fP   0x02"
.br
.ti -1c
.RI "#define \fBNORMALIZE\fP   0x04"
.br
.ti -1c
.RI "#define \fBLOCALITY\fP   0x08"
.br
.ti -1c
.RI "#define \fBIGNORE_RES\fP   0x10"
.br
.ti -1c
.RI "#define \fBLOCAL_ONLY\fP   0x20"
.br
.ti -1c
.RI "#define \fBDFT_FROMTYPE\fP   0x40"
.br
.ti -1c
.RI "#define \fBALL_CLUSTERS\fP   0x80"
.br
.ti -1c
.RI "#define \fBEFFECTIVE\fP   0x100"
.br
.ti -1c
.RI "#define \fBRECV_FROM_CLUSTERS\fP   0x200"
.br
.ti -1c
.RI "#define \fBNEED_MY_CLUSTER_NAME\fP   0x400"
.br
.ti -1c
.RI "#define \fBSEND_TO_CLUSTERS\fP   0x400"
.br
.ti -1c
.RI "#define \fBNO_SORT\fP   0x800"
.br
.ti -1c
.RI "#define \fBEXCLUSIVE_RESOURCE\fP   0x1000"
.br
.ti -1c
.RI "#define \fBDT_CLUSTER_LOAD\fP   0x2000"
.br
.in -1c
.SH "Detailed Description"
.PP 
define statements used by \fBls_load\fP. 
.SH "Define Documentation"
.PP 
.SS "#define EXACT   0x01"
.PP
Exactly *numhosts hosts are desired. 
.PP
If EXACT is set, either exactly *numhosts hosts are returned, or the call returns an error. If EXACT is not set, then up to *numhosts hosts are returned. If *numhosts is zero, then the EXACT flag is ignored and as many hosts in the load sharing system as are eligible (that is, those that satisfy the resource requirements) are returned. 
.SS "#define OK_ONLY   0x02"
.PP
Return only those hosts that are currently in the `ok' state. 
.PP
If OK_ONLY is set, those hosts that are busy, locked, or unavail are not returned. If OK_ONLY is not set, then some or all of the hosts whose status are not `ok' may also be returned, depending on the value of numhosts and whether the EXACT flag is set. 
.SS "#define NORMALIZE   0x04"
.PP
Normalize CPU load indices. 
.PP
If NORMALIZE is set, then the CPU run queue length load indices r15s, r1m, and r15m of each host returned are normalized. See Administering Platform LSF for the concept of normalized queue length. Default is to return the raw queue length. The options EFFECTIVE and NORMALIZE are mutually exclusive. 
.SS "#define LOCALITY   0x08"
.PP
The locality of the hosts. 
.PP
.SS "#define IGNORE_RES   0x10"
.PP
Ignore the status of RES when determining the hosts that are considered to be `ok'. 
.PP
If IGNORE_RES is specified, then hosts with RES not running are also considered to be `ok' during host selection. 
.SS "#define LOCAL_ONLY   0x20"
.PP
Local cluster only. 
.PP
.SS "#define DFT_FROMTYPE   0x40"
.PP
Return hosts with the same type as the fromhost which satisfy the resource requirements. 
.PP
By default all host types are considered. 
.SS "#define ALL_CLUSTERS   0x80"
.PP
All clusters. 
.PP
.SS "#define EFFECTIVE   0x100"
.PP
If EFFECTIVE is set, then the CPU run queue length load indices of each host returned are effective load. 
.PP
See Administering Platform LSF for the concept of effective queue length. Default is to return the raw queue length. The options EFFECTIVE and NORMALIZE are mutually exclusive. 
.SS "#define RECV_FROM_CLUSTERS   0x200"
.PP
Only return info about clusters I can receive job from. 
.PP
.SS "#define NEED_MY_CLUSTER_NAME   0x400"
.PP
Need my cluster name. 
.PP
.SS "#define SEND_TO_CLUSTERS   0x400"
.PP
Only return info about clusters I can send job to. 
.PP
.SS "#define NO_SORT   0x800"
.PP
No host sorting is needed. 
.PP
.SS "#define EXCLUSIVE_RESOURCE   0x1000"
.PP
Exclusive resource definition enforcement. 
.PP
.SS "#define DT_CLUSTER_LOAD   0x2000"
.PP
Desktop cluster return unlicensed hosts load info. 
.PP
.ad l
.nh
.SH NAME
index_ls_loadinfo \- define statements used by ls_loadinfo.  

.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBR15S\fP   0"
.br
.ti -1c
.RI "#define \fBR1M\fP   1"
.br
.ti -1c
.RI "#define \fBR15M\fP   2"
.br
.ti -1c
.RI "#define \fBUT\fP   3"
.br
.ti -1c
.RI "#define \fBPG\fP   4"
.br
.ti -1c
.RI "#define \fBIO\fP   5"
.br
.ti -1c
.RI "#define \fBLS\fP   6"
.br
.ti -1c
.RI "#define \fBIT\fP   7"
.br
.ti -1c
.RI "#define \fBTMP\fP   8"
.br
.ti -1c
.RI "#define \fBSWP\fP   9"
.br
.ti -1c
.RI "#define \fBMEM\fP   10"
.br
.in -1c
.SH "Detailed Description"
.PP 
define statements used by ls_loadinfo. 
.SH "Define Documentation"
.PP 
.SS "#define R15S   0"
.PP
15-second exponentially averaged CPU run queue length. 
.PP

.SS "#define R1M   1"
.PP
1-minute exponentially averaged CPU run queue length. 
.PP

.SS "#define R15M   2"
.PP
15-minute exponentially averaged CPU run queue length. 
.PP

.SS "#define UT   3"
.PP
CPU utilization exponentially averaged over the last minute (from 0.0 to 1.0). 
.PP

.SS "#define PG   4"
.PP
Memory paging rate exponentially averaged over the last minute, in pages per second. 
.PP

.SS "#define IO   5"
.PP
Disk I/O rate exponentially averaged over the last minute, in KBytes per second. 
.PP

.SS "#define LS   6"
.PP
Number of current login users. 
.PP

.SS "#define IT   7"
.PP
Idle time of the host (keyboard not touched on all logged in sessions), in minutes. 
.PP

.SS "#define TMP   8"
.PP
Available free disk space in /tmp, in MBytes. 
.PP

.SS "#define SWP   9"
.PP
Amount of currently available swap space, in MBytes. 
.PP

.SS "#define MEM   10"
.PP
Amount of currently available memory, in MBytes. 
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Platform LSF 7.0.6 C API Reference from the source code.
