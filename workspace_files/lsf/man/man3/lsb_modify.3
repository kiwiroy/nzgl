.TH "lsb_modify" 3 "3 Sep 2009" "Version 7.0" "Platform LSF 7.0.6 C API Reference" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lsb_modify \- lsb_modify 
Modifies a submitted job's parameters.
.PP
lsb_modify() allows for the modification of a submitted job's parameters.
.PP
\fB#include <lsf/lsbatch.h>\fP
.PP
\fB LS_LONG_INT lsb_modify (struct \fBsubmit\fP *jobsubReq, struct \fBsubmitReply\fP *jobSubReply, LS_LONG_INT jobId)\fP
.PP
.SH "Parameters:"
\fI*jobSubReq\fP Describes the requirements for job modification to the batch system. A job that does not meet these requirements is not submitted to the batch system and an error is returned. 
.br
\fI*jobSubReply\fP Describes the results of the job modification to the batch system. 
.br
\fIjobId\fP The job to be modified. If an element of a job array is to be modified, use the array form jobID[i] where jobID is the job array name, and i is the index value.
.PP
.SH "Data Structures:" 
.PP
\fBsubmit\fP 
.br
\fBsubmitReply\fP
.PP
.SH "Define Statements:" 
.PP
none
.PP
.SH "Returns:"
LS_LONG_INT:jobID 
.br
 The function was successful, and sets the queue field of jobSubReply to the name of the queue that the job was submitted to. 
.PP
LS_LONG_INT:-1 
.br
 Function failed.
.PP
.SH "Errors:" 
.PP
If the function fails, lsberrno is set to indicate the error.
.PP
.SH "Equivalent line command :" 
.PP
bmod
.PP
.SH "Files:" 
.PP
${LSF_ENVDIR:-/etc}/lsf.conf
.PP
.SH "See also:"
\fBlsb_submit\fP 
.PP
\fBls_info\fP 
.PP
\fBls_rtask\fP 
.PP
\fBlsb_queueinfo\fP 
.PP

.ad l
.nh
.SH NAME
submit \- \fBsubmit\fP request structure.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBoptions\fP"
.br
.ti -1c
.RI "int \fBoptions2\fP"
.br
.ti -1c
.RI "char * \fBjobName\fP"
.br
.ti -1c
.RI "char * \fBqueue\fP"
.br
.ti -1c
.RI "int \fBnumAskedHosts\fP"
.br
.ti -1c
.RI "char ** \fBaskedHosts\fP"
.br
.ti -1c
.RI "char * \fBresReq\fP"
.br
.ti -1c
.RI "int \fBrLimits\fP [LSF_RLIM_NLIMITS]"
.br
.ti -1c
.RI "char * \fBhostSpec\fP"
.br
.ti -1c
.RI "int \fBnumProcessors\fP"
.br
.ti -1c
.RI "char * \fBdependCond\fP"
.br
.ti -1c
.RI "char * \fBtimeEvent\fP"
.br
.ti -1c
.RI "time_t \fBbeginTime\fP"
.br
.ti -1c
.RI "time_t \fBtermTime\fP"
.br
.ti -1c
.RI "int \fBsigValue\fP"
.br
.ti -1c
.RI "char * \fBinFile\fP"
.br
.ti -1c
.RI "char * \fBoutFile\fP"
.br
.ti -1c
.RI "char * \fBerrFile\fP"
.br
.ti -1c
.RI "char * \fBcommand\fP"
.br
.ti -1c
.RI "char * \fBnewCommand\fP"
.br
.ti -1c
.RI "time_t \fBchkpntPeriod\fP"
.br
.ti -1c
.RI "char * \fBchkpntDir\fP"
.br
.ti -1c
.RI "int \fBnxf\fP"
.br
.ti -1c
.RI "struct \fBxFile\fP * \fBxf\fP"
.br
.ti -1c
.RI "char * \fBpreExecCmd\fP"
.br
.ti -1c
.RI "char * \fBmailUser\fP"
.br
.ti -1c
.RI "int \fBdelOptions\fP"
.br
.ti -1c
.RI "int \fBdelOptions2\fP"
.br
.ti -1c
.RI "char * \fBprojectName\fP"
.br
.ti -1c
.RI "int \fBmaxNumProcessors\fP"
.br
.ti -1c
.RI "char * \fBloginShell\fP"
.br
.ti -1c
.RI "char * \fBuserGroup\fP"
.br
.ti -1c
.RI "char * \fBexceptList\fP"
.br
.ti -1c
.RI "int \fBuserPriority\fP"
.br
.ti -1c
.RI "char * \fBrsvId\fP"
.br
.ti -1c
.RI "char * \fBjobGroup\fP"
.br
.ti -1c
.RI "char * \fBsla\fP"
.br
.ti -1c
.RI "char * \fBextsched\fP"
.br
.ti -1c
.RI "int \fBwarningTimePeriod\fP"
.br
.ti -1c
.RI "char * \fBwarningAction\fP"
.br
.ti -1c
.RI "char * \fBlicenseProject\fP"
.br
.ti -1c
.RI "int \fBoptions3\fP"
.br
.ti -1c
.RI "int \fBdelOptions3\fP"
.br
.ti -1c
.RI "char * \fBapp\fP"
.br
.ti -1c
.RI "int \fBjsdlFlag\fP"
.br
.ti -1c
.RI "char * \fBjsdlDoc\fP"
.br
.ti -1c
.RI "void * \fBcorrelator\fP"
.br
.ti -1c
.RI "char * \fBapsString\fP"
.br
.ti -1c
.RI "char * \fBpostExecCmd\fP"
.br
.ti -1c
.RI "char * \fBcwd\fP"
.br
.ti -1c
.RI "int \fBruntimeEstimation\fP"
.br
.ti -1c
.RI "char * \fBrequeueEValues\fP"
.br
.ti -1c
.RI "int \fBinitChkpntPeriod\fP"
.br
.ti -1c
.RI "int \fBmigThreshold\fP"
.br
.ti -1c
.RI "char * \fBnotifyCmd\fP"
.br
.ti -1c
.RI "char * \fBjobDescription\fP"
.br
.ti -1c
.RI "struct \fBsubmit_ext\fP * \fBsubmitExt\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBsubmit\fP request structure. 
.SH "Field Documentation"
.PP 
.SS "int \fBsubmit::options\fP"
.PP
<lsf/lsbatch.h> defines the flags in \fBlsb_submit_options\fP constructed from bits. 
.PP
These flags correspond to some of the options of the bsub command line. Use the bitwise OR to set more than one flag. 
.SS "int \fBsubmit::options2\fP"
.PP
Extended bitwise inclusive OR of some of the flags in \fBlsb_submit_options2\fP. 
.PP

.SS "char* \fBsubmit::jobName\fP"
.PP
The job name. 
.PP
If jobName is NULL, command is used as the job name. 
.SS "char* \fBsubmit::queue\fP"
.PP
Submit the job to this queue. 
.PP
If queue is NULL, \fBsubmit\fP the job to a system default queue. 
.SS "int \fBsubmit::numAskedHosts\fP"
.PP
The number of invoker specified candidate hosts for running the job. 
.PP
If numAskedHosts is 0, all qualified hosts will be considered. 
.SS "char** \fBsubmit::askedHosts\fP"
.PP
The array of names of invoker specified candidate hosts. 
.PP
The number of hosts is given by numAskedHosts. 
.SS "char* \fBsubmit::resReq\fP"
.PP
The resource requirements of the job. 
.PP
If resReq is NULL, the batch system will try to obtain resource requirements for command from the remote task lists (see \fBls_task\fP ). If the task does not appear in the remote task lists, then the default resource requirement is to run on host() of the same type. 
.SS "int \fBsubmit::rLimits\fP[LSF_RLIM_NLIMITS]"
.PP
Limits on the consumption of system resources by all processes belonging to this job. 
.PP
See getrlimit() for details. If an element of the array is -1, there is no limit for that resource. For the constants used to index the array, see \fBlsb_queueinfo\fP . 
.SS "char* \fBsubmit::hostSpec\fP"
.PP
Specify the host model to use for scaling rLimits[LSF_RLIMIT_CPU] and rLimits[LSF_RLIMIT_RUN]. 
.PP
(See \fBlsb_queueinfo\fP). If hostSpec is NULL, the local host is assumed. 
.SS "int \fBsubmit::numProcessors\fP"
.PP
The initial number of processors needed by a (parallel) job. 
.PP
The default is 1. 
.SS "char* \fBsubmit::dependCond\fP"
.PP
The job dependency condition. 
.PP

.SS "char* \fBsubmit::timeEvent\fP"
.PP
Time event string. 
.PP
.SS "time_t \fBsubmit::beginTime\fP"
.PP
Dispatch the job on or after beginTime, where beginTime is the number of seconds since 00:00:00 GMT, Jan. 
.PP
1, 1970 (See time(), ctime()). If beginTime is 0, start the job as soon as possible. 
.SS "time_t \fBsubmit::termTime\fP"
.PP
The job termination deadline. 
.PP
If the job is still running at termTime, it will be sent a USR2 signal. If the job does not terminate within 10 minutes after being sent this signal, it will be ended. termTime has the same representation as beginTime. If termTime is 0, allow the job to run until it reaches a resource limit. 
.SS "int \fBsubmit::sigValue\fP"
.PP
Applies to jobs submitted to a queue that has a run window (See \fBlsb_queueinfo\fP). 
.PP
Send signal sigValue to the job 10 minutes before the run window is going to close. This allows the job to clean up or checkpoint itself, if desired. If the job does not terminate 10 minutes after being sent this signal, it will be suspended. 
.SS "char* \fBsubmit::inFile\fP"
.PP
The path name of the job's standard input file. 
.PP
If inFile is NULL, use /dev/null as the default. 
.SS "char* \fBsubmit::outFile\fP"
.PP
The path name of the job's standard output file. 
.PP
If outFile is NULL, the job's output will be mailed to the submitter 
.SS "char* \fBsubmit::errFile\fP"
.PP
The path name of the job's standard error output file. 
.PP
If errFile is NULL, the standard error output will be merged with the standard output of the job. 
.SS "char* \fBsubmit::command\fP"
.PP
When submitting a job, the command line of the job. 
.PP
When modifying a job, a mandatory parameter that should be set to jobId in string format. 
.SS "char* \fBsubmit::newCommand\fP"
.PP
New command line for bmod. 
.PP

.SS "time_t \fBsubmit::chkpntPeriod\fP"
.PP
The job is checkpointable with a period of chkpntPeriod seconds. 
.PP
The value 0 disables periodic checkpointing. 
.SS "char* \fBsubmit::chkpntDir\fP"
.PP
The directory where the chk directory for this job checkpoint files will be created. 
.PP
When a job is checkpointed, its checkpoint files are placed in chkpntDir/chk. chkpntDir can be a relative or absolute path name. 
.SS "int \fBsubmit::nxf\fP"
.PP
The number of files to transfer. 
.PP

.SS "struct \fBxFile\fP* \fBsubmit::xf\fP"
.PP
The array of file transfer specifications. 
.PP
(The \fBxFile\fP structure is defined in <lsf/lsbatch.h>.) 
.SS "char* \fBsubmit::preExecCmd\fP"
.PP
The job pre-execution command. 
.PP

.SS "char* \fBsubmit::mailUser\fP"
.PP
The user that results are mailed to. 
.PP

.SS "int \fBsubmit::delOptions\fP"
.PP
Delete options in options field. 
.PP

.SS "int \fBsubmit::delOptions2\fP"
.PP
Extended delete options in options2 field. 
.PP

.SS "char* \fBsubmit::projectName\fP"
.PP
The name of the project the job will be charged to. 
.PP

.SS "int \fBsubmit::maxNumProcessors\fP"
.PP
Maximum number of processors required to run the job. 
.PP

.SS "char* \fBsubmit::loginShell\fP"
.PP
Specified login shell used to initialize the execution environment for the job (see the -L option of bsub). 
.PP

.SS "char* \fBsubmit::userGroup\fP"
.PP
The name of the LSF user group (see lsb.users) to which the job will belong. 
.PP
(see the -G option of bsub) 
.SS "char* \fBsubmit::exceptList\fP"
.PP
Passes the exception handlers to mbatchd during a job. 
.PP
(see the -X option of bsub). Specifies execption handlers that tell the system how to respond to an exceptional condition for a job. An action is performed when any one of the following exceptions is detected:
.PP
.IP "\(bu" 2
\fBmissched\fP - A job has not been scheduled within the time event specified in the -T option.
.IP "\(bu" 2
\fBoverrun\fP - A job did not finish in its maximum time (maxtime).
.IP "\(bu" 2
\fBunderrun\fP - A job finished before it reaches its minimum running time (mintime).
.IP "\(bu" 2
\fBabend\fP - A job terminated abnormally. Test an exit code that is one value, two or more comma separated values, or a range of values (two values separated by a `-' to indivate a range). If the job exits with one of the tested values, the abend condition is detected.
.IP "\(bu" 2
\fBstartfail\fP - A job did not start due to insufficient system resources.
.IP "\(bu" 2
\fBcantrun\fP - A job did not start because a dependency condition (see the -w option of bsub) is invalid, or a startfail exception occurs 20 times in a row and the job is suspended. For jobs submitted with a time event (see the -T option of bsub), the cantrun exception condition can be detected once in each time event.
.IP "\(bu" 2
\fBhostfail\fP - The host running a job becomes unavailable.
.PP
.PP
When one or more of the above exceptions is detected, you can specify one of the following actions to be taken:
.IP "\(bu" 2
\fBalarm\fP - Triggers an alarm incident (see balarms(1)). The alarm can be viewed, acknowledged and resolved.
.IP "\(bu" 2
\fBsetexcept\fP - Causes the exception event event_name to be set. Other jobs waiting on the exception event event_name specified through the -w option can be triggered. event_name is an arbitrary string.
.IP "\(bu" 2
\fBrerun\fP - Causes the job to be rescheduled for execution. Any dependencies associated with the job must be satisfied before re-execution takes place. The rerun action can only be specified for the abend and hostfail exception conditions. The startfail exception condition automatically triggers the rerun action.
.IP "\(bu" 2
\fBkill\fP - Causes the current execution of the job to be terminated. This action can only be specified for the overrun exception condition. 
.PP

.SS "int \fBsubmit::userPriority\fP"
.PP
User priority for fairshare scheduling. 
.PP

.SS "char* \fBsubmit::rsvId\fP"
.PP
Reservation ID for advance reservation. 
.PP

.SS "char* \fBsubmit::jobGroup\fP"
.PP
Job group under which the job runs. 
.PP

.SS "char* \fBsubmit::sla\fP"
.PP
SLA under which the job runs. 
.PP

.SS "char* \fBsubmit::extsched\fP"
.PP
External scheduler options. 
.PP

.SS "int \fBsubmit::warningTimePeriod\fP"
.PP
Warning time period in seconds, -1 if unspecified. 
.PP

.SS "char* \fBsubmit::warningAction\fP"
.PP
Warning action, SIGNAL | CHKPNT | command, NULL if unspecified. 
.PP

.SS "char* \fBsubmit::licenseProject\fP"
.PP
License Scheduler project name. 
.PP

.SS "int \fBsubmit::options3\fP"
.PP
Extended bitwise inclusive OR of options flags in \fBlsb_submit_options3\fP. 
.PP

.SS "int \fBsubmit::delOptions3\fP"
.PP
Extended delete options in options3 field. 
.PP

.SS "char* \fBsubmit::app\fP"
.PP
Application profile under which the job runs. 
.PP

.SS "int \fBsubmit::jsdlFlag\fP"
.PP
-1 if no -jsdl and -jsdl_strict options. 
.PP
.IP "\(bu" 2
0 -jsdl_strict option
.IP "\(bu" 2
1 -jsdl option 
.PP

.SS "char* \fBsubmit::jsdlDoc\fP"
.PP
JSDL filename. 
.PP
.SS "void* \fBsubmit::correlator\fP"
.PP
ARM correlator. 
.PP
.SS "char* \fBsubmit::apsString\fP"
.PP
Absolute priority scheduling string set by administrators to denote static system APS value or ADMIN factor APS value. 
.PP
This field is ignored by \fBlsb_submit\fP. 
.SS "char* \fBsubmit::postExecCmd\fP"
.PP
Post-execution commands specified by -Ep option of bsub and bmod. 
.PP

.SS "char* \fBsubmit::cwd\fP"
.PP
Current working directory specified by -cwd option of bsub and bmod. 
.PP

.SS "int \fBsubmit::runtimeEstimation\fP"
.PP
Runtime estimate specified by -We option of bsub and bmod. 
.PP

.SS "char* \fBsubmit::requeueEValues\fP"
.PP
Job-level requeue exit values specified by -Q option of bsub and bmod. 
.PP

.SS "int \fBsubmit::initChkpntPeriod\fP"
.PP
Initial checkpoint period specified by -k option of bsub and bmod. 
.PP

.SS "int \fBsubmit::migThreshold\fP"
.PP
Job migration threshold specified by -mig option of bsub and bmod. 
.PP

.SS "char* \fBsubmit::notifyCmd\fP"
.PP
Job resize notification command to be invoked on the first execution host when a resize request has been satisfied. 
.PP

.SS "char* \fBsubmit::jobDescription\fP"
.PP
Job description. 
.PP

.SS "struct \fBsubmit_ext\fP* \fBsubmit::submitExt\fP"
.PP
For new options in future. 
.PP


.ad l
.nh
.SH NAME
submitReply \- \fBsubmit\fP reply.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char * \fBqueue\fP"
.br
.ti -1c
.RI "LS_LONG_INT \fBbadJobId\fP"
.br
.ti -1c
.RI "char * \fBbadJobName\fP"
.br
.ti -1c
.RI "int \fBbadReqIndx\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBsubmit\fP reply. 
.SH "Field Documentation"
.PP 
.SS "char* \fBsubmitReply::queue\fP"
.PP
The queue the job was submitted to. 
.PP

.SS "LS_LONG_INT \fBsubmitReply::badJobId\fP"
.PP
DependCond contained badJobId but badJobId does not exist in the system. 
.PP

.SS "char* \fBsubmitReply::badJobName\fP"
.PP
DependCond contained badJobName but badJobName does not exist in the system. 
.PP
If the environment variable BSUB_CHK_RESREQ is set, the value of lsberrno is either LSBE_RESREQ_OK or LSBE_RESREQ_ERR, depending on the result of resource requirement string checking. The badJobName field contains the detailed error message. 
.SS "int \fBsubmitReply::badReqIndx\fP"
.PP
If lsberrno is LSBE_BAD_HOST, (**askedHosts)[badReqIndx] is not a host known to the system. 
.PP
If lsberrno is LSBE_QUEUE_HOST, (**askedHosts)[badReqIndx] is not a host used by the specified queue. If lsberrno is LSBE_OVER_LIMIT, (*rLimits)[badReqIndx] exceeds the queue's limit for the resource. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Platform LSF 7.0.6 C API Reference from the source code.
