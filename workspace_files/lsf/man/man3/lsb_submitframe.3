.TH "lsb_submitframe" 3 "3 Sep 2009" "Version 7.0" "Platform LSF 7.0.6 C API Reference" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lsb_submitframe \- lsb_submitframe 
Submits a frame job to the batch system.
.PP
\fBlsb_submitframe\fP submits a frame job to the batch system according to the jobSubReq specification and frameExp.
.PP
Any program using this API must be setuid to root if LSF_AUTH is not defined in the lsf.conf file.
.PP
\fB#include <lsf/lsbatch.h>\fP
.PP
\fBint lsb_submitframe (struct \fBsubmit\fP *jobSubReq, char *frameExp, struct \fBsubmitReply\fP *jobSubReply)\fP
.PP
.SH "Parameters:"
\fI*jobSubReq\fP Describes the requirements for job submission to the batch system. A job that does not meet these requirements is not submitted to the batch system and an error is returned. 
.br
 See \fBlsb_submit\fP for descriptions of the \fBsubmit\fP structure fields. 
.br
\fI*frameExp\fP The syntax of frameExp is: 
.br
 \fBframe_name[indexlist]\fP 
.br
 frame_name is any name consisting of alphanumerics, periods, forward slashes, dashes or underscores. indexlist is a list of one or more frame indexes, separated by commas. These indexes can each be either a single integer or a range, specified in the following format: 
.br
 \fBstart-end[xstep[:chunk]]\fP 
.br
 start, end, step, and chunk are integers, but chunk must be positive. If step and chunk are ommitted, the default value is 1.
.br
 An example of a valid expression for frameExp is:
.br
 \fBFrame_job_1[5,10-15,20-30x2:3]\fP 
.br
\fI**jobSubReply\fP Describes the results of the job submission to the batch system. 
.br
 See \fBlsb_submit\fP for descriptions of the \fBsubmitReply\fP structure fields.
.PP
.SH "Data Structures:" 
.PP
\fBsubmit\fP 
.br
\fBsubmitReply\fP
.PP
.SH "Define Statements:" 
.PP
\fBlsb_submit_options\fP 
.br
\fBlsb_submit_options2\fP 
.br
\fBlsb_submit_options3\fP
.PP
.SH "Returns:"
int:jobId 
.br
 The function was successful, and sets the queue field of jobSubReply to the name of the queue that the job was submitted to. 
.PP
int:-1 
.br
 Function failed.
.PP
.SH "Errors:" 
.PP
If the function fails, lsberrno is set to indicate the error and jobSubReply gives additional information about the error.
.PP
.SH "Equivalent line commands:" 
.PP
none
.PP
.SH "Files:" 
.PP
${LSF_ENVDIR:-/etc}/lsf.conf
.PP
.SH "See also:"
none 
.PP

.ad l
.nh
.SH NAME
submit \- \fBsubmit\fP request structure.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBoptions\fP"
.br
.ti -1c
.RI "int \fBoptions2\fP"
.br
.ti -1c
.RI "char * \fBjobName\fP"
.br
.ti -1c
.RI "char * \fBqueue\fP"
.br
.ti -1c
.RI "int \fBnumAskedHosts\fP"
.br
.ti -1c
.RI "char ** \fBaskedHosts\fP"
.br
.ti -1c
.RI "char * \fBresReq\fP"
.br
.ti -1c
.RI "int \fBrLimits\fP [LSF_RLIM_NLIMITS]"
.br
.ti -1c
.RI "char * \fBhostSpec\fP"
.br
.ti -1c
.RI "int \fBnumProcessors\fP"
.br
.ti -1c
.RI "char * \fBdependCond\fP"
.br
.ti -1c
.RI "char * \fBtimeEvent\fP"
.br
.ti -1c
.RI "time_t \fBbeginTime\fP"
.br
.ti -1c
.RI "time_t \fBtermTime\fP"
.br
.ti -1c
.RI "int \fBsigValue\fP"
.br
.ti -1c
.RI "char * \fBinFile\fP"
.br
.ti -1c
.RI "char * \fBoutFile\fP"
.br
.ti -1c
.RI "char * \fBerrFile\fP"
.br
.ti -1c
.RI "char * \fBcommand\fP"
.br
.ti -1c
.RI "char * \fBnewCommand\fP"
.br
.ti -1c
.RI "time_t \fBchkpntPeriod\fP"
.br
.ti -1c
.RI "char * \fBchkpntDir\fP"
.br
.ti -1c
.RI "int \fBnxf\fP"
.br
.ti -1c
.RI "struct \fBxFile\fP * \fBxf\fP"
.br
.ti -1c
.RI "char * \fBpreExecCmd\fP"
.br
.ti -1c
.RI "char * \fBmailUser\fP"
.br
.ti -1c
.RI "int \fBdelOptions\fP"
.br
.ti -1c
.RI "int \fBdelOptions2\fP"
.br
.ti -1c
.RI "char * \fBprojectName\fP"
.br
.ti -1c
.RI "int \fBmaxNumProcessors\fP"
.br
.ti -1c
.RI "char * \fBloginShell\fP"
.br
.ti -1c
.RI "char * \fBuserGroup\fP"
.br
.ti -1c
.RI "char * \fBexceptList\fP"
.br
.ti -1c
.RI "int \fBuserPriority\fP"
.br
.ti -1c
.RI "char * \fBrsvId\fP"
.br
.ti -1c
.RI "char * \fBjobGroup\fP"
.br
.ti -1c
.RI "char * \fBsla\fP"
.br
.ti -1c
.RI "char * \fBextsched\fP"
.br
.ti -1c
.RI "int \fBwarningTimePeriod\fP"
.br
.ti -1c
.RI "char * \fBwarningAction\fP"
.br
.ti -1c
.RI "char * \fBlicenseProject\fP"
.br
.ti -1c
.RI "int \fBoptions3\fP"
.br
.ti -1c
.RI "int \fBdelOptions3\fP"
.br
.ti -1c
.RI "char * \fBapp\fP"
.br
.ti -1c
.RI "int \fBjsdlFlag\fP"
.br
.ti -1c
.RI "char * \fBjsdlDoc\fP"
.br
.ti -1c
.RI "void * \fBcorrelator\fP"
.br
.ti -1c
.RI "char * \fBapsString\fP"
.br
.ti -1c
.RI "char * \fBpostExecCmd\fP"
.br
.ti -1c
.RI "char * \fBcwd\fP"
.br
.ti -1c
.RI "int \fBruntimeEstimation\fP"
.br
.ti -1c
.RI "char * \fBrequeueEValues\fP"
.br
.ti -1c
.RI "int \fBinitChkpntPeriod\fP"
.br
.ti -1c
.RI "int \fBmigThreshold\fP"
.br
.ti -1c
.RI "char * \fBnotifyCmd\fP"
.br
.ti -1c
.RI "char * \fBjobDescription\fP"
.br
.ti -1c
.RI "struct \fBsubmit_ext\fP * \fBsubmitExt\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBsubmit\fP request structure. 
.SH "Field Documentation"
.PP 
.SS "int \fBsubmit::options\fP"
.PP
<lsf/lsbatch.h> defines the flags in \fBlsb_submit_options\fP constructed from bits. 
.PP
These flags correspond to some of the options of the bsub command line. Use the bitwise OR to set more than one flag. 
.SS "int \fBsubmit::options2\fP"
.PP
Extended bitwise inclusive OR of some of the flags in \fBlsb_submit_options2\fP. 
.PP

.SS "char* \fBsubmit::jobName\fP"
.PP
The job name. 
.PP
If jobName is NULL, command is used as the job name. 
.SS "char* \fBsubmit::queue\fP"
.PP
Submit the job to this queue. 
.PP
If queue is NULL, \fBsubmit\fP the job to a system default queue. 
.SS "int \fBsubmit::numAskedHosts\fP"
.PP
The number of invoker specified candidate hosts for running the job. 
.PP
If numAskedHosts is 0, all qualified hosts will be considered. 
.SS "char** \fBsubmit::askedHosts\fP"
.PP
The array of names of invoker specified candidate hosts. 
.PP
The number of hosts is given by numAskedHosts. 
.SS "char* \fBsubmit::resReq\fP"
.PP
The resource requirements of the job. 
.PP
If resReq is NULL, the batch system will try to obtain resource requirements for command from the remote task lists (see \fBls_task\fP ). If the task does not appear in the remote task lists, then the default resource requirement is to run on host() of the same type. 
.SS "int \fBsubmit::rLimits\fP[LSF_RLIM_NLIMITS]"
.PP
Limits on the consumption of system resources by all processes belonging to this job. 
.PP
See getrlimit() for details. If an element of the array is -1, there is no limit for that resource. For the constants used to index the array, see \fBlsb_queueinfo\fP . 
.SS "char* \fBsubmit::hostSpec\fP"
.PP
Specify the host model to use for scaling rLimits[LSF_RLIMIT_CPU] and rLimits[LSF_RLIMIT_RUN]. 
.PP
(See \fBlsb_queueinfo\fP). If hostSpec is NULL, the local host is assumed. 
.SS "int \fBsubmit::numProcessors\fP"
.PP
The initial number of processors needed by a (parallel) job. 
.PP
The default is 1. 
.SS "char* \fBsubmit::dependCond\fP"
.PP
The job dependency condition. 
.PP

.SS "char* \fBsubmit::timeEvent\fP"
.PP
Time event string. 
.PP
.SS "time_t \fBsubmit::beginTime\fP"
.PP
Dispatch the job on or after beginTime, where beginTime is the number of seconds since 00:00:00 GMT, Jan. 
.PP
1, 1970 (See time(), ctime()). If beginTime is 0, start the job as soon as possible. 
.SS "time_t \fBsubmit::termTime\fP"
.PP
The job termination deadline. 
.PP
If the job is still running at termTime, it will be sent a USR2 signal. If the job does not terminate within 10 minutes after being sent this signal, it will be ended. termTime has the same representation as beginTime. If termTime is 0, allow the job to run until it reaches a resource limit. 
.SS "int \fBsubmit::sigValue\fP"
.PP
Applies to jobs submitted to a queue that has a run window (See \fBlsb_queueinfo\fP). 
.PP
Send signal sigValue to the job 10 minutes before the run window is going to close. This allows the job to clean up or checkpoint itself, if desired. If the job does not terminate 10 minutes after being sent this signal, it will be suspended. 
.SS "char* \fBsubmit::inFile\fP"
.PP
The path name of the job's standard input file. 
.PP
If inFile is NULL, use /dev/null as the default. 
.SS "char* \fBsubmit::outFile\fP"
.PP
The path name of the job's standard output file. 
.PP
If outFile is NULL, the job's output will be mailed to the submitter 
.SS "char* \fBsubmit::errFile\fP"
.PP
The path name of the job's standard error output file. 
.PP
If errFile is NULL, the standard error output will be merged with the standard output of the job. 
.SS "char* \fBsubmit::command\fP"
.PP
When submitting a job, the command line of the job. 
.PP
When modifying a job, a mandatory parameter that should be set to jobId in string format. 
.SS "char* \fBsubmit::newCommand\fP"
.PP
New command line for bmod. 
.PP

.SS "time_t \fBsubmit::chkpntPeriod\fP"
.PP
The job is checkpointable with a period of chkpntPeriod seconds. 
.PP
The value 0 disables periodic checkpointing. 
.SS "char* \fBsubmit::chkpntDir\fP"
.PP
The directory where the chk directory for this job checkpoint files will be created. 
.PP
When a job is checkpointed, its checkpoint files are placed in chkpntDir/chk. chkpntDir can be a relative or absolute path name. 
.SS "int \fBsubmit::nxf\fP"
.PP
The number of files to transfer. 
.PP

.SS "struct \fBxFile\fP* \fBsubmit::xf\fP"
.PP
The array of file transfer specifications. 
.PP
(The \fBxFile\fP structure is defined in <lsf/lsbatch.h>.) 
.SS "char* \fBsubmit::preExecCmd\fP"
.PP
The job pre-execution command. 
.PP

.SS "char* \fBsubmit::mailUser\fP"
.PP
The user that results are mailed to. 
.PP

.SS "int \fBsubmit::delOptions\fP"
.PP
Delete options in options field. 
.PP

.SS "int \fBsubmit::delOptions2\fP"
.PP
Extended delete options in options2 field. 
.PP

.SS "char* \fBsubmit::projectName\fP"
.PP
The name of the project the job will be charged to. 
.PP

.SS "int \fBsubmit::maxNumProcessors\fP"
.PP
Maximum number of processors required to run the job. 
.PP

.SS "char* \fBsubmit::loginShell\fP"
.PP
Specified login shell used to initialize the execution environment for the job (see the -L option of bsub). 
.PP

.SS "char* \fBsubmit::userGroup\fP"
.PP
The name of the LSF user group (see lsb.users) to which the job will belong. 
.PP
(see the -G option of bsub) 
.SS "char* \fBsubmit::exceptList\fP"
.PP
Passes the exception handlers to mbatchd during a job. 
.PP
(see the -X option of bsub). Specifies execption handlers that tell the system how to respond to an exceptional condition for a job. An action is performed when any one of the following exceptions is detected:
.PP
.IP "\(bu" 2
\fBmissched\fP - A job has not been scheduled within the time event specified in the -T option.
.IP "\(bu" 2
\fBoverrun\fP - A job did not finish in its maximum time (maxtime).
.IP "\(bu" 2
\fBunderrun\fP - A job finished before it reaches its minimum running time (mintime).
.IP "\(bu" 2
\fBabend\fP - A job terminated abnormally. Test an exit code that is one value, two or more comma separated values, or a range of values (two values separated by a `-' to indivate a range). If the job exits with one of the tested values, the abend condition is detected.
.IP "\(bu" 2
\fBstartfail\fP - A job did not start due to insufficient system resources.
.IP "\(bu" 2
\fBcantrun\fP - A job did not start because a dependency condition (see the -w option of bsub) is invalid, or a startfail exception occurs 20 times in a row and the job is suspended. For jobs submitted with a time event (see the -T option of bsub), the cantrun exception condition can be detected once in each time event.
.IP "\(bu" 2
\fBhostfail\fP - The host running a job becomes unavailable.
.PP
.PP
When one or more of the above exceptions is detected, you can specify one of the following actions to be taken:
.IP "\(bu" 2
\fBalarm\fP - Triggers an alarm incident (see balarms(1)). The alarm can be viewed, acknowledged and resolved.
.IP "\(bu" 2
\fBsetexcept\fP - Causes the exception event event_name to be set. Other jobs waiting on the exception event event_name specified through the -w option can be triggered. event_name is an arbitrary string.
.IP "\(bu" 2
\fBrerun\fP - Causes the job to be rescheduled for execution. Any dependencies associated with the job must be satisfied before re-execution takes place. The rerun action can only be specified for the abend and hostfail exception conditions. The startfail exception condition automatically triggers the rerun action.
.IP "\(bu" 2
\fBkill\fP - Causes the current execution of the job to be terminated. This action can only be specified for the overrun exception condition. 
.PP

.SS "int \fBsubmit::userPriority\fP"
.PP
User priority for fairshare scheduling. 
.PP

.SS "char* \fBsubmit::rsvId\fP"
.PP
Reservation ID for advance reservation. 
.PP

.SS "char* \fBsubmit::jobGroup\fP"
.PP
Job group under which the job runs. 
.PP

.SS "char* \fBsubmit::sla\fP"
.PP
SLA under which the job runs. 
.PP

.SS "char* \fBsubmit::extsched\fP"
.PP
External scheduler options. 
.PP

.SS "int \fBsubmit::warningTimePeriod\fP"
.PP
Warning time period in seconds, -1 if unspecified. 
.PP

.SS "char* \fBsubmit::warningAction\fP"
.PP
Warning action, SIGNAL | CHKPNT | command, NULL if unspecified. 
.PP

.SS "char* \fBsubmit::licenseProject\fP"
.PP
License Scheduler project name. 
.PP

.SS "int \fBsubmit::options3\fP"
.PP
Extended bitwise inclusive OR of options flags in \fBlsb_submit_options3\fP. 
.PP

.SS "int \fBsubmit::delOptions3\fP"
.PP
Extended delete options in options3 field. 
.PP

.SS "char* \fBsubmit::app\fP"
.PP
Application profile under which the job runs. 
.PP

.SS "int \fBsubmit::jsdlFlag\fP"
.PP
-1 if no -jsdl and -jsdl_strict options. 
.PP
.IP "\(bu" 2
0 -jsdl_strict option
.IP "\(bu" 2
1 -jsdl option 
.PP

.SS "char* \fBsubmit::jsdlDoc\fP"
.PP
JSDL filename. 
.PP
.SS "void* \fBsubmit::correlator\fP"
.PP
ARM correlator. 
.PP
.SS "char* \fBsubmit::apsString\fP"
.PP
Absolute priority scheduling string set by administrators to denote static system APS value or ADMIN factor APS value. 
.PP
This field is ignored by \fBlsb_submit\fP. 
.SS "char* \fBsubmit::postExecCmd\fP"
.PP
Post-execution commands specified by -Ep option of bsub and bmod. 
.PP

.SS "char* \fBsubmit::cwd\fP"
.PP
Current working directory specified by -cwd option of bsub and bmod. 
.PP

.SS "int \fBsubmit::runtimeEstimation\fP"
.PP
Runtime estimate specified by -We option of bsub and bmod. 
.PP

.SS "char* \fBsubmit::requeueEValues\fP"
.PP
Job-level requeue exit values specified by -Q option of bsub and bmod. 
.PP

.SS "int \fBsubmit::initChkpntPeriod\fP"
.PP
Initial checkpoint period specified by -k option of bsub and bmod. 
.PP

.SS "int \fBsubmit::migThreshold\fP"
.PP
Job migration threshold specified by -mig option of bsub and bmod. 
.PP

.SS "char* \fBsubmit::notifyCmd\fP"
.PP
Job resize notification command to be invoked on the first execution host when a resize request has been satisfied. 
.PP

.SS "char* \fBsubmit::jobDescription\fP"
.PP
Job description. 
.PP

.SS "struct \fBsubmit_ext\fP* \fBsubmit::submitExt\fP"
.PP
For new options in future. 
.PP


.ad l
.nh
.SH NAME
submitReply \- \fBsubmit\fP reply.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "char * \fBqueue\fP"
.br
.ti -1c
.RI "LS_LONG_INT \fBbadJobId\fP"
.br
.ti -1c
.RI "char * \fBbadJobName\fP"
.br
.ti -1c
.RI "int \fBbadReqIndx\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBsubmit\fP reply. 
.SH "Field Documentation"
.PP 
.SS "char* \fBsubmitReply::queue\fP"
.PP
The queue the job was submitted to. 
.PP

.SS "LS_LONG_INT \fBsubmitReply::badJobId\fP"
.PP
DependCond contained badJobId but badJobId does not exist in the system. 
.PP

.SS "char* \fBsubmitReply::badJobName\fP"
.PP
DependCond contained badJobName but badJobName does not exist in the system. 
.PP
If the environment variable BSUB_CHK_RESREQ is set, the value of lsberrno is either LSBE_RESREQ_OK or LSBE_RESREQ_ERR, depending on the result of resource requirement string checking. The badJobName field contains the detailed error message. 
.SS "int \fBsubmitReply::badReqIndx\fP"
.PP
If lsberrno is LSBE_BAD_HOST, (**askedHosts)[badReqIndx] is not a host known to the system. 
.PP
If lsberrno is LSBE_QUEUE_HOST, (**askedHosts)[badReqIndx] is not a host used by the specified queue. If lsberrno is LSBE_OVER_LIMIT, (*rLimits)[badReqIndx] exceeds the queue's limit for the resource. 

.ad l
.nh
.SH NAME
lsb_submit_options \- define statements used by lsb_submit.  

.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBSUB_JOB_NAME\fP   0x01"
.br
.ti -1c
.RI "#define \fBSUB_QUEUE\fP   0x02"
.br
.ti -1c
.RI "#define \fBSUB_HOST\fP   0x04"
.br
.ti -1c
.RI "#define \fBSUB_IN_FILE\fP   0x08"
.br
.ti -1c
.RI "#define \fBSUB_OUT_FILE\fP   0x10"
.br
.ti -1c
.RI "#define \fBSUB_ERR_FILE\fP   0x20"
.br
.ti -1c
.RI "#define \fBSUB_EXCLUSIVE\fP   0x40"
.br
.ti -1c
.RI "#define \fBSUB_NOTIFY_END\fP   0x80"
.br
.ti -1c
.RI "#define \fBSUB_NOTIFY_BEGIN\fP   0x100"
.br
.ti -1c
.RI "#define \fBSUB_USER_GROUP\fP   0x200"
.br
.ti -1c
.RI "#define \fBSUB_CHKPNT_PERIOD\fP   0x400"
.br
.ti -1c
.RI "#define \fBSUB_CHKPNT_DIR\fP   0x800"
.br
.ti -1c
.RI "#define \fBSUB_CHKPNTABLE\fP   SUB_CHKPNT_DIR"
.br
.ti -1c
.RI "#define \fBSUB_RESTART_FORCE\fP   0x1000"
.br
.ti -1c
.RI "#define \fBSUB_RESTART\fP   0x2000"
.br
.ti -1c
.RI "#define \fBSUB_RERUNNABLE\fP   0x4000"
.br
.ti -1c
.RI "#define \fBSUB_WINDOW_SIG\fP   0x8000"
.br
.ti -1c
.RI "#define \fBSUB_HOST_SPEC\fP   0x10000"
.br
.ti -1c
.RI "#define \fBSUB_DEPEND_COND\fP   0x20000"
.br
.ti -1c
.RI "#define \fBSUB_RES_REQ\fP   0x40000"
.br
.ti -1c
.RI "#define \fBSUB_OTHER_FILES\fP   0x80000"
.br
.ti -1c
.RI "#define \fBSUB_PRE_EXEC\fP   0x100000"
.br
.ti -1c
.RI "#define \fBSUB_LOGIN_SHELL\fP   0x200000"
.br
.ti -1c
.RI "#define \fBSUB_MAIL_USER\fP   0x400000"
.br
.ti -1c
.RI "#define \fBSUB_MODIFY\fP   0x800000"
.br
.ti -1c
.RI "#define \fBSUB_MODIFY_ONCE\fP   0x1000000"
.br
.ti -1c
.RI "#define \fBSUB_PROJECT_NAME\fP   0x2000000"
.br
.ti -1c
.RI "#define \fBSUB_INTERACTIVE\fP   0x4000000"
.br
.ti -1c
.RI "#define \fBSUB_PTY\fP   0x8000000"
.br
.ti -1c
.RI "#define \fBSUB_PTY_SHELL\fP   0x10000000"
.br
.ti -1c
.RI "#define \fBSUB_EXCEPT\fP   0x20000000"
.br
.ti -1c
.RI "#define \fBSUB_TIME_EVENT\fP   0x40000000"
.br
.in -1c
.SH "Detailed Description"
.PP 
define statements used by lsb_submit. 
.SH "Define Documentation"
.PP 
.SS "#define SUB_JOB_NAME   0x01"
.PP
Flag to indicate jobName parameter has data. 
.PP
Equivalent to bsub -J command line option existence. 
.SS "#define SUB_QUEUE   0x02"
.PP
Flag to indicate queue parameter has data. 
.PP
Equivalent to bsub -q command line option existence. 
.SS "#define SUB_HOST   0x04"
.PP
Flat to indicate numAskedHosts parameter has data. 
.PP
Equivalent to bsub -m command line option existence. 
.SS "#define SUB_IN_FILE   0x08"
.PP
Flag to indicate inFile parameter has data. 
.PP
Equivalent to bsub -i command line option existence. 
.SS "#define SUB_OUT_FILE   0x10"
.PP
Flag to indicate outFile parameter has data. 
.PP
Equivalent to bsub -o command line option existence. 
.SS "#define SUB_ERR_FILE   0x20"
.PP
Flag to indicate errFile parameter has data. 
.PP
Equivalent to bsub -e command line option existence. 
.SS "#define SUB_EXCLUSIVE   0x40"
.PP
Flag to indicate execution of a job on a host by itself requested. 
.PP
Equivalent to bsub -x command line option existence. 
.SS "#define SUB_NOTIFY_END   0x80"
.PP
Flag to indicate whether to send mail to the user when the job finishes. 
.PP
Equivalent to bsub -N command line option existence. 
.SS "#define SUB_NOTIFY_BEGIN   0x100"
.PP
Flag to indicate whether to send mail to the user when the job is dispatched. 
.PP
Equivalent to bsub -B command line option existence. 
.SS "#define SUB_USER_GROUP   0x200"
.PP
Flag to indicate userGroup name parameter has data. 
.PP
Equivalent to bsub -G command line option existence. 
.SS "#define SUB_CHKPNT_PERIOD   0x400"
.PP
Flag to indicatechkpntPeriod parameter has data . 
.PP
Equivalent to bsub -k command line option existence. 
.SS "#define SUB_CHKPNT_DIR   0x800"
.PP
Flag to indicate chkpntDir parameter has data. 
.PP
Equivalent to bsub -k command line option existence. 
.SS "#define SUB_CHKPNTABLE   SUB_CHKPNT_DIR"
.PP
Indicates the job is checkpointable. 
.PP
Equivalent to bsub -k command line option. 
.SS "#define SUB_RESTART_FORCE   0x1000"
.PP
Flag to indicate whether to force the job to restart even if non-restartable conditions exist. 
.PP
These conditions are operating system specific. Equivalent to brestart() -f command line option existence. 
.SS "#define SUB_RESTART   0x2000"
.PP
Flag to indicate restart of a checkpointed job. 
.PP
Only jobs that have been successfully checkpointed can be restarted. Jobs are re-submitted and assigned a new job ID. By default, jobs are restarted with the same output file, file transfer specifications, job name, window signal value, checkpoint directory and period, and rerun options as the original job. To restart a job on another host, both hosts must be binary compatible, run the same OS version, have access to the executable, have access to all open files (LSF must locate them with an absolute path name), and have access to the checkpoint directory. Equivalent to bsub -k command line option existence. 
.SS "#define SUB_RERUNNABLE   0x4000"
.PP
Indicates the job is re-runnable. 
.PP
If the execution host of the job is considered down, the batch system will re-queue this job in the same job queue, and re-run it from the beginning when a suitable host is found. Everything will be as if it were submitted as a new job, and a new job ID will be assigned. The user who submitted the failed job will receive a mail notice of the job failure, requeueing of the job, and the new job ID.
.PP
For a job that was checkpointed before the execution host went down, the job will be restarted from the last checkpoint. Equivalent to bsub -r command line option existence. 
.SS "#define SUB_WINDOW_SIG   0x8000"
.PP
Flag to indicate sigValue parameter has data. 
.PP
Sends a signal as the queue window closes. 
.SS "#define SUB_HOST_SPEC   0x10000"
.PP
Flag to indicate hostSpec parameter has data. 
.PP

.SS "#define SUB_DEPEND_COND   0x20000"
.PP
Flag to indicate dependCond parameter has data. 
.PP
Equivalent to bsub -w command line option existence. 
.SS "#define SUB_RES_REQ   0x40000"
.PP
Flag to indicate resReq parameter has data. 
.PP
Equivalent to bsub -R command line option existence. 
.SS "#define SUB_OTHER_FILES   0x80000"
.PP
Flag to indicate nxf parameter and structure xf have data. 
.PP

.SS "#define SUB_PRE_EXEC   0x100000"
.PP
Flag to indicate preExecCmd parameter has data. 
.PP
Equivalent to bsub -E command line option existence. 
.SS "#define SUB_LOGIN_SHELL   0x200000"
.PP
Equivalent to bsub -L command line option existence. 
.PP

.SS "#define SUB_MAIL_USER   0x400000"
.PP
Flag to indicate mailUser parameter has data. 
.PP

.SS "#define SUB_MODIFY   0x800000"
.PP
Flag to indicate newCommand parameter has data. 
.PP
Equivalent to bmod bsub_options existence. 
.SS "#define SUB_MODIFY_ONCE   0x1000000"
.PP
Flag to indicate modify option once. 
.PP

.SS "#define SUB_PROJECT_NAME   0x2000000"
.PP
Flag to indicate ProjectName parameter has data . 
.PP
Equivalent to bsub -P command line option existence. 
.SS "#define SUB_INTERACTIVE   0x4000000"
.PP
Indicates that the job is submitted as a batch interactive job. 
.PP
When this flag is given, \fBlsb_submit\fP does not return unless an error occurs during the submission process. When the job is started, the user can interact with the job's standard input and output via the terminal. See the -I option in bsub for the description of a batch interactive job. Unless the SUB_PTY flag is specified, the job will run without a pseudo-terminal. Equivalent to bsub -I command line option. 
.SS "#define SUB_PTY   0x8000000"
.PP
Requests pseudo-terminal support for a job submitted with the SUB_INTERACTIVE flag. 
.PP
This flag is ignored if SUB_INTERACTIVE is not specified. A pseudo-terminal is required to run some applications (such as: vi). Equivalent to bsub -Ip command line option. 
.SS "#define SUB_PTY_SHELL   0x10000000"
.PP
Requests pseudo-terminal shell mode support for a job submitted with the SUB_INTERACTIVE and SUB_PTY flags. 
.PP
This flag is ignored if SUB_INTERACTIVE and SUB_PTY are not specified. This flag should be specified for submitting interactive shells, or applications which redefine the ctrl-C and ctrl-Z keys (such as: jove). Equivalent to bsub -Is command line option. 
.SS "#define SUB_EXCEPT   0x20000000"
.PP
Exception handler for job. 
.PP

.SS "#define SUB_TIME_EVENT   0x40000000"
.PP
Specifies time_event. 
.PP

.ad l
.nh
.SH NAME
lsb_submit_options2 \- define statements used by \fBlsb_submit\fP.  

.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBSUB2_HOLD\fP   0x01"
.br
.ti -1c
.RI "#define \fBSUB2_MODIFY_CMD\fP   0x02"
.br
.ti -1c
.RI "#define \fBSUB2_BSUB_BLOCK\fP   0x04"
.br
.ti -1c
.RI "#define \fBSUB2_HOST_NT\fP   0x08"
.br
.ti -1c
.RI "#define \fBSUB2_HOST_UX\fP   0x10"
.br
.ti -1c
.RI "#define \fBSUB2_QUEUE_CHKPNT\fP   0x20"
.br
.ti -1c
.RI "#define \fBSUB2_QUEUE_RERUNNABLE\fP   0x40"
.br
.ti -1c
.RI "#define \fBSUB2_IN_FILE_SPOOL\fP   0x80"
.br
.ti -1c
.RI "#define \fBSUB2_JOB_CMD_SPOOL\fP   0x100"
.br
.ti -1c
.RI "#define \fBSUB2_JOB_PRIORITY\fP   0x200"
.br
.ti -1c
.RI "#define \fBSUB2_USE_DEF_PROCLIMIT\fP   0x400"
.br
.ti -1c
.RI "#define \fBSUB2_MODIFY_RUN_JOB\fP   0x800"
.br
.ti -1c
.RI "#define \fBSUB2_MODIFY_PEND_JOB\fP   0x1000"
.br
.ti -1c
.RI "#define \fBSUB2_WARNING_TIME_PERIOD\fP   0x2000"
.br
.ti -1c
.RI "#define \fBSUB2_WARNING_ACTION\fP   0x4000"
.br
.ti -1c
.RI "#define \fBSUB2_USE_RSV\fP   0x8000"
.br
.ti -1c
.RI "#define \fBSUB2_TSJOB\fP   0x10000"
.br
.ti -1c
.RI "#define \fBSUB2_LSF2TP\fP   0x20000"
.br
.ti -1c
.RI "#define \fBSUB2_JOB_GROUP\fP   0x40000"
.br
.ti -1c
.RI "#define \fBSUB2_SLA\fP   0x80000"
.br
.ti -1c
.RI "#define \fBSUB2_EXTSCHED\fP   0x100000"
.br
.ti -1c
.RI "#define \fBSUB2_LICENSE_PROJECT\fP   0x200000"
.br
.ti -1c
.RI "#define \fBSUB2_OVERWRITE_OUT_FILE\fP   0x400000"
.br
.ti -1c
.RI "#define \fBSUB2_OVERWRITE_ERR_FILE\fP   0x800000"
.br
.ti -1c
.RI "#define \fBSUB2_SSM_JOB\fP   0x1000000"
.br
.ti -1c
.RI "#define \fBSUB2_SYM_JOB\fP   0x2000000"
.br
.ti -1c
.RI "#define \fBSUB2_SRV_JOB\fP   0x4000000"
.br
.ti -1c
.RI "#define \fBSUB2_SYM_GRP\fP   0x8000000"
.br
.ti -1c
.RI "#define \fBSUB2_SYM_JOB_PARENT\fP   0x10000000"
.br
.ti -1c
.RI "#define \fBSUB2_SYM_JOB_REALTIME\fP   0x20000000"
.br
.ti -1c
.RI "#define \fBSUB2_SYM_JOB_PERSIST_SRV\fP   0x40000000"
.br
.ti -1c
.RI "#define \fBSUB2_SSM_JOB_PERSIST\fP   0x80000000"
.br
.in -1c
.SH "Detailed Description"
.PP 
define statements used by \fBlsb_submit\fP. 
.SH "Define Documentation"
.PP 
.SS "#define SUB2_HOLD   0x01"
.PP
Hold the job after it is submitted. 
.PP
The job will be in PSUSP status. Equivalent to bsub -H command line option. 
.SS "#define SUB2_MODIFY_CMD   0x02"
.PP
New cmd for bmod. 
.PP

.SS "#define SUB2_BSUB_BLOCK   0x04"
.PP
Submit a job in a synchronous mode so that submission does not return until the job terminates. 
.PP
Note once this flag is set, the \fBlsb_submit\fP will never return if the job is accepted by LSF. Programs that wishes to know the status of the submission needs to fork, with the child process invoking the API call in the blocking mode and the parent process wait on the child process (see wait() for details. 
.SS "#define SUB2_HOST_NT   0x08"
.PP
Submit from NT. 
.PP

.SS "#define SUB2_HOST_UX   0x10"
.PP
Submit fom UNIX. 
.PP

.SS "#define SUB2_QUEUE_CHKPNT   0x20"
.PP
Submit to a chkpntable queue. 
.PP

.SS "#define SUB2_QUEUE_RERUNNABLE   0x40"
.PP
Submit to a rerunnable queue. 
.PP

.SS "#define SUB2_IN_FILE_SPOOL   0x80"
.PP
Spool job command. 
.PP

.SS "#define SUB2_JOB_CMD_SPOOL   0x100"
.PP
Inputs the specified file with spooling. 
.PP
.SS "#define SUB2_JOB_PRIORITY   0x200"
.PP
Submits job with priority. 
.PP

.SS "#define SUB2_USE_DEF_PROCLIMIT   0x400"
.PP
Job submitted without -n, use queue's default proclimit. 
.PP
.SS "#define SUB2_MODIFY_RUN_JOB   0x800"
.PP
bmod -c/-M/-W/-o/-e 
.PP
.SS "#define SUB2_MODIFY_PEND_JOB   0x1000"
.PP
bmod options only to pending jobs 
.PP
.SS "#define SUB2_WARNING_TIME_PERIOD   0x2000"
.PP
Job action warning time. 
.PP
Equivalent to bsub or bmod -wt. 
.SS "#define SUB2_WARNING_ACTION   0x4000"
.PP
Job action to be taken before a job control action occurs. 
.PP
Equivalent to bsub or bmod -wa. 
.SS "#define SUB2_USE_RSV   0x8000"
.PP
Use an advance reservation created with the brsvadd command. 
.PP
Equivalent to bsub -U. 
.SS "#define SUB2_TSJOB   0x10000"
.PP
Windows Terminal Services job. 
.PP
.SS "#define SUB2_LSF2TP   0x20000"
.PP
Parameter is deprecated. 
.PP
.SS "#define SUB2_JOB_GROUP   0x40000"
.PP
Submit into a job group. 
.PP
.SS "#define SUB2_SLA   0x80000"
.PP
Submit into a service class. 
.PP
.SS "#define SUB2_EXTSCHED   0x100000"
.PP
Submit with -extsched options. 
.PP
.SS "#define SUB2_LICENSE_PROJECT   0x200000"
.PP
License Scheduler project. 
.PP
.SS "#define SUB2_OVERWRITE_OUT_FILE   0x400000"
.PP
Overwrite the standard output of the job. 
.PP
Equivalent to bsub -oo. 
.SS "#define SUB2_OVERWRITE_ERR_FILE   0x800000"
.PP
Overwrites the standard error output of the job. 
.PP
Equivalent to bsub -eo. 
.SS "#define SUB2_SSM_JOB   0x1000000"
.PP
(symphony) session job 
.PP
.SS "#define SUB2_SYM_JOB   0x2000000"
.PP
(symphony) symphony job 
.PP
.SS "#define SUB2_SRV_JOB   0x4000000"
.PP
(symphony) service(LSF) job 
.PP
.SS "#define SUB2_SYM_GRP   0x8000000"
.PP
(symphony) 'group' job 
.PP
.SS "#define SUB2_SYM_JOB_PARENT   0x10000000"
.PP
(symphony) symphony job has child symphony job 
.PP
.SS "#define SUB2_SYM_JOB_REALTIME   0x20000000"
.PP
(symphony) symphony job has real time feature 
.PP
.SS "#define SUB2_SYM_JOB_PERSIST_SRV   0x40000000"
.PP
(symphony) symphony job has dummy feature to hold all persistent service jobs. 
.PP

.SS "#define SUB2_SSM_JOB_PERSIST   0x80000000"
.PP
Persistent session job. 
.PP
.ad l
.nh
.SH NAME
lsb_submit_options3 \- define statements used by \fBlsb_submit\fP.  

.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBSUB3_APP\fP   0x01"
.br
.ti -1c
.RI "#define \fBSUB3_APP_RERUNNABLE\fP   0x02"
.br
.ti -1c
.RI "#define \fBSUB3_ABSOLUTE_PRIORITY\fP   0x04"
.br
.ti -1c
.RI "#define \fBSUB3_DEFAULT_JOBGROUP\fP   0x08"
.br
.ti -1c
.RI "#define \fBSUB3_POST_EXEC\fP   0x10"
.br
.ti -1c
.RI "#define \fBSUB3_USER_SHELL_LIMITS\fP   0x20"
.br
.ti -1c
.RI "#define \fBSUB3_CWD\fP   0x40"
.br
.ti -1c
.RI "#define \fBSUB3_RUNTIME_ESTIMATION\fP   0x80"
.br
.ti -1c
.RI "#define \fBSUB3_NOT_RERUNNABLE\fP   0x100"
.br
.ti -1c
.RI "#define \fBSUB3_JOB_REQUEUE\fP   0x200"
.br
.ti -1c
.RI "#define \fBSUB3_INIT_CHKPNT_PERIOD\fP   0x400"
.br
.ti -1c
.RI "#define \fBSUB3_MIG_THRESHOLD\fP   0x800"
.br
.ti -1c
.RI "#define \fBSUB3_APP_CHKPNT_DIR\fP   0x1000"
.br
.ti -1c
.RI "#define \fBSUB3_BSUB_CHK_RESREQ\fP   0x2000"
.br
.ti -1c
.RI "#define \fBSUB3_RUNTIME_ESTIMATION_ACC\fP   0x4000"
.br
.ti -1c
.RI "#define \fBSUB3_RUNTIME_ESTIMATION_PERC\fP   0x8000"
.br
.ti -1c
.RI "#define \fBSUB3_INTERACTIVE_SSH\fP   0x10000"
.br
.ti -1c
.RI "#define \fBSUB3_XJOB_SSH\fP   0x20000"
.br
.ti -1c
.RI "#define \fBSUB3_AUTO_RESIZE\fP   0x40000"
.br
.ti -1c
.RI "#define \fBSUB3_RESIZE_NOTIFY_CMD\fP   0x80000"
.br
.ti -1c
.RI "#define \fBSUB3_BULK_SUBMIT\fP   0x100000"
.br
.ti -1c
.RI "#define \fBSUB3_INTERACTIVE_TTY\fP   0x200000"
.br
.ti -1c
.RI "#define \fBSUB3_FLOATING_CLIENT\fP   0x400000"
.br
.ti -1c
.RI "#define \fBSUB3_XFJOB\fP   0x800000"
.br
.ti -1c
.RI "#define \fBSUB3_XFJOB_EXCLUSIVE\fP   0x1000000"
.br
.ti -1c
.RI "#define \fBSUB3_JOB_DESCRIPTION\fP   0x2000000"
.br
.ti -1c
.RI "#define \fBSUB3_SIMULATION\fP   0x4000000"
.br
.in -1c
.SH "Detailed Description"
.PP 
define statements used by \fBlsb_submit\fP. 
.SH "Define Documentation"
.PP 
.SS "#define SUB3_APP   0x01"
.PP
Application profile name. 
.PP
Equivalent to bsub -app. 
.SS "#define SUB3_APP_RERUNNABLE   0x02"
.PP
Job rerunable because of application profile. 
.PP
.SS "#define SUB3_ABSOLUTE_PRIORITY   0x04"
.PP
Job modified with absolute priority. 
.PP
Equivalent to bmod -aps. 
.SS "#define SUB3_DEFAULT_JOBGROUP   0x08"
.PP
Submit into a default job group. 
.PP
Equivalent to bsub -g. 
.SS "#define SUB3_POST_EXEC   0x10"
.PP
Run the specified post-execution command on the execution host after the job finishes. 
.PP
Equivalent to bsub -Ep. 
.SS "#define SUB3_USER_SHELL_LIMITS   0x20"
.PP
Pass user shell limits to execution host. 
.PP
Equivalent to bsub -ul. 
.SS "#define SUB3_CWD   0x40"
.PP
Current working directory specified on the command line with bsub -cwd. 
.PP
.SS "#define SUB3_RUNTIME_ESTIMATION   0x80"
.PP
Runtime estimate. 
.PP
Equivalent to bsub -We. Use in conjunction with SUB3_RUNTIME_ESTIMATION_ACC and SUB3_RUNTIME_ESTIMATION_PERC. 
.SS "#define SUB3_NOT_RERUNNABLE   0x100"
.PP
Job is not rerunnable. 
.PP
Equivalent to bsub -rn. 
.SS "#define SUB3_JOB_REQUEUE   0x200"
.PP
Job level requeue exit values. 
.PP

.SS "#define SUB3_INIT_CHKPNT_PERIOD   0x400"
.PP
Initial checkpoint period. 
.PP
Equivalent to bsub -k initial_checkpoint_period. 
.SS "#define SUB3_MIG_THRESHOLD   0x800"
.PP
Job migration threshold. 
.PP
Equivalent to bsub -mig migration_threshold. 
.SS "#define SUB3_APP_CHKPNT_DIR   0x1000"
.PP
Checkpoint dir was set by application profile. 
.PP
.SS "#define SUB3_BSUB_CHK_RESREQ   0x2000"
.PP
Value of BSUB_CHK_RESREQ environment variable, used for select section resource requirement string syntax checking with bsub -R. 
.PP
bsub only checks the resreq syntax. 
.SS "#define SUB3_RUNTIME_ESTIMATION_ACC   0x4000"
.PP
Runtime estimate that is the accumulated run time plus the runtime estimate. 
.PP
Equivalent to bmod -We+. Use in conjunction with SUB3_RUNTIME_ESTIMATION. 
.SS "#define SUB3_RUNTIME_ESTIMATION_PERC   0x8000"
.PP
Runtime estimate in percentage of completion. 
.PP
Equivalent to bmod -Wep. Two digits after the decimal point are suported. The highest eight bits of runtimeEstimation in the \fBsubmit\fP structure are used for the integer; the remaining bits are used for the fraction. Use in conjunction with SUB3_RUNTIME_ESTIMATION. 
.SS "#define SUB3_INTERACTIVE_SSH   0x10000"
.PP
Protects the sessions of interactive jobs with SSH encryption. 
.PP
Equivalent to bsub -IS|-ISp|-ISs. 
.SS "#define SUB3_XJOB_SSH   0x20000"
.PP
Protect the sessions of interactive x-window job with SSH encryption. 
.PP
Equivalent to bsub -IX. 
.SS "#define SUB3_AUTO_RESIZE   0x40000"
.PP
If set the submitted job is auto-resizable. 
.PP
.SS "#define SUB3_RESIZE_NOTIFY_CMD   0x80000"
.PP
If set, the resize notify cmd specified. 
.PP
.SS "#define SUB3_BULK_SUBMIT   0x100000"
.PP
Job broker bulk \fBsubmit\fP. 
.PP
.SS "#define SUB3_INTERACTIVE_TTY   0x200000"
.PP
tty mode for interactive job 
.PP
.SS "#define SUB3_FLOATING_CLIENT   0x400000"
.PP
Job submitted from floating client. 
.PP
.SS "#define SUB3_XFJOB   0x800000"
.PP
ssh X11 forwarding (bsub -XF) 
.PP
.SS "#define SUB3_XFJOB_EXCLUSIVE   0x1000000"
.PP
ssh X11 forwarding (bsub -XF) without bsub -I. 
.PP
.. 
.SS "#define SUB3_JOB_DESCRIPTION   0x2000000"
.PP
Job description. 
.PP

.SS "#define SUB3_SIMULATION   0x4000000"
.PP
Job submitted from floating client. 
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for Platform LSF 7.0.6 C API Reference from the source code.
